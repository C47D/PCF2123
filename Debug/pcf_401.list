
pcf_401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000514c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080052e8  080052e8  000152e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005470  08005470  00015470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005478  08005478  00015478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800547c  0800547c  0001547c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08005480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c4  2000000c  0800548c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000d0  0800548c  000200d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000aa3f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001cd8  00000000  00000000  0002aa7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009d8  00000000  00000000  0002c758  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008d0  00000000  00000000  0002d130  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004af2  00000000  00000000  0002da00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000031cd  00000000  00000000  000324f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000356bf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000299c  00000000  00000000  0003573c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080052cc 	.word	0x080052cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080052cc 	.word	0x080052cc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b97a 	b.w	8000e18 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	468c      	mov	ip, r1
 8000b42:	460d      	mov	r5, r1
 8000b44:	4604      	mov	r4, r0
 8000b46:	9e08      	ldr	r6, [sp, #32]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d151      	bne.n	8000bf0 <__udivmoddi4+0xb4>
 8000b4c:	428a      	cmp	r2, r1
 8000b4e:	4617      	mov	r7, r2
 8000b50:	d96d      	bls.n	8000c2e <__udivmoddi4+0xf2>
 8000b52:	fab2 fe82 	clz	lr, r2
 8000b56:	f1be 0f00 	cmp.w	lr, #0
 8000b5a:	d00b      	beq.n	8000b74 <__udivmoddi4+0x38>
 8000b5c:	f1ce 0c20 	rsb	ip, lr, #32
 8000b60:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b64:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b68:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b6c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b70:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b74:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b78:	0c25      	lsrs	r5, r4, #16
 8000b7a:	fbbc f8fa 	udiv	r8, ip, sl
 8000b7e:	fa1f f987 	uxth.w	r9, r7
 8000b82:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b86:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b8a:	fb08 f309 	mul.w	r3, r8, r9
 8000b8e:	42ab      	cmp	r3, r5
 8000b90:	d90a      	bls.n	8000ba8 <__udivmoddi4+0x6c>
 8000b92:	19ed      	adds	r5, r5, r7
 8000b94:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b98:	f080 8123 	bcs.w	8000de2 <__udivmoddi4+0x2a6>
 8000b9c:	42ab      	cmp	r3, r5
 8000b9e:	f240 8120 	bls.w	8000de2 <__udivmoddi4+0x2a6>
 8000ba2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba6:	443d      	add	r5, r7
 8000ba8:	1aed      	subs	r5, r5, r3
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb5 f0fa 	udiv	r0, r5, sl
 8000bb0:	fb0a 5510 	mls	r5, sl, r0, r5
 8000bb4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bb8:	fb00 f909 	mul.w	r9, r0, r9
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x98>
 8000bc0:	19e4      	adds	r4, r4, r7
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc6:	f080 810a 	bcs.w	8000dde <__udivmoddi4+0x2a2>
 8000bca:	45a1      	cmp	r9, r4
 8000bcc:	f240 8107 	bls.w	8000dde <__udivmoddi4+0x2a2>
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	443c      	add	r4, r7
 8000bd4:	eba4 0409 	sub.w	r4, r4, r9
 8000bd8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d061      	beq.n	8000ca6 <__udivmoddi4+0x16a>
 8000be2:	fa24 f40e 	lsr.w	r4, r4, lr
 8000be6:	2300      	movs	r3, #0
 8000be8:	6034      	str	r4, [r6, #0]
 8000bea:	6073      	str	r3, [r6, #4]
 8000bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d907      	bls.n	8000c04 <__udivmoddi4+0xc8>
 8000bf4:	2e00      	cmp	r6, #0
 8000bf6:	d054      	beq.n	8000ca2 <__udivmoddi4+0x166>
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	e886 0021 	stmia.w	r6, {r0, r5}
 8000bfe:	4608      	mov	r0, r1
 8000c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c04:	fab3 f183 	clz	r1, r3
 8000c08:	2900      	cmp	r1, #0
 8000c0a:	f040 808e 	bne.w	8000d2a <__udivmoddi4+0x1ee>
 8000c0e:	42ab      	cmp	r3, r5
 8000c10:	d302      	bcc.n	8000c18 <__udivmoddi4+0xdc>
 8000c12:	4282      	cmp	r2, r0
 8000c14:	f200 80fa 	bhi.w	8000e0c <__udivmoddi4+0x2d0>
 8000c18:	1a84      	subs	r4, r0, r2
 8000c1a:	eb65 0503 	sbc.w	r5, r5, r3
 8000c1e:	2001      	movs	r0, #1
 8000c20:	46ac      	mov	ip, r5
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	d03f      	beq.n	8000ca6 <__udivmoddi4+0x16a>
 8000c26:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	b912      	cbnz	r2, 8000c36 <__udivmoddi4+0xfa>
 8000c30:	2701      	movs	r7, #1
 8000c32:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c36:	fab7 fe87 	clz	lr, r7
 8000c3a:	f1be 0f00 	cmp.w	lr, #0
 8000c3e:	d134      	bne.n	8000caa <__udivmoddi4+0x16e>
 8000c40:	1beb      	subs	r3, r5, r7
 8000c42:	0c3a      	lsrs	r2, r7, #16
 8000c44:	fa1f fc87 	uxth.w	ip, r7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c4e:	0c25      	lsrs	r5, r4, #16
 8000c50:	fb02 3318 	mls	r3, r2, r8, r3
 8000c54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c58:	fb0c f308 	mul.w	r3, ip, r8
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x134>
 8000c60:	19ed      	adds	r5, r5, r7
 8000c62:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x132>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f200 80d1 	bhi.w	8000e10 <__udivmoddi4+0x2d4>
 8000c6e:	4680      	mov	r8, r0
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c78:	fb02 5510 	mls	r5, r2, r0, r5
 8000c7c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c80:	fb0c fc00 	mul.w	ip, ip, r0
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x15c>
 8000c88:	19e4      	adds	r4, r4, r7
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x15a>
 8000c90:	45a4      	cmp	ip, r4
 8000c92:	f200 80b8 	bhi.w	8000e06 <__udivmoddi4+0x2ca>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 040c 	sub.w	r4, r4, ip
 8000c9c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca0:	e79d      	b.n	8000bde <__udivmoddi4+0xa2>
 8000ca2:	4631      	mov	r1, r6
 8000ca4:	4630      	mov	r0, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	f1ce 0420 	rsb	r4, lr, #32
 8000cae:	fa05 f30e 	lsl.w	r3, r5, lr
 8000cb2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000cb6:	fa20 f804 	lsr.w	r8, r0, r4
 8000cba:	0c3a      	lsrs	r2, r7, #16
 8000cbc:	fa25 f404 	lsr.w	r4, r5, r4
 8000cc0:	ea48 0803 	orr.w	r8, r8, r3
 8000cc4:	fbb4 f1f2 	udiv	r1, r4, r2
 8000cc8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000ccc:	fb02 4411 	mls	r4, r2, r1, r4
 8000cd0:	fa1f fc87 	uxth.w	ip, r7
 8000cd4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000cd8:	fb01 f30c 	mul.w	r3, r1, ip
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x1bc>
 8000ce4:	19ed      	adds	r5, r5, r7
 8000ce6:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cea:	f080 808a 	bcs.w	8000e02 <__udivmoddi4+0x2c6>
 8000cee:	42ab      	cmp	r3, r5
 8000cf0:	f240 8087 	bls.w	8000e02 <__udivmoddi4+0x2c6>
 8000cf4:	3902      	subs	r1, #2
 8000cf6:	443d      	add	r5, r7
 8000cf8:	1aeb      	subs	r3, r5, r3
 8000cfa:	fa1f f588 	uxth.w	r5, r8
 8000cfe:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d02:	fb02 3310 	mls	r3, r2, r0, r3
 8000d06:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d0a:	fb00 f30c 	mul.w	r3, r0, ip
 8000d0e:	42ab      	cmp	r3, r5
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x1e6>
 8000d12:	19ed      	adds	r5, r5, r7
 8000d14:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d18:	d26f      	bcs.n	8000dfa <__udivmoddi4+0x2be>
 8000d1a:	42ab      	cmp	r3, r5
 8000d1c:	d96d      	bls.n	8000dfa <__udivmoddi4+0x2be>
 8000d1e:	3802      	subs	r0, #2
 8000d20:	443d      	add	r5, r7
 8000d22:	1aeb      	subs	r3, r5, r3
 8000d24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d28:	e78f      	b.n	8000c4a <__udivmoddi4+0x10e>
 8000d2a:	f1c1 0720 	rsb	r7, r1, #32
 8000d2e:	fa22 f807 	lsr.w	r8, r2, r7
 8000d32:	408b      	lsls	r3, r1
 8000d34:	fa05 f401 	lsl.w	r4, r5, r1
 8000d38:	ea48 0303 	orr.w	r3, r8, r3
 8000d3c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d40:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d44:	40fd      	lsrs	r5, r7
 8000d46:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d4a:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d4e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d52:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d56:	fa1f f883 	uxth.w	r8, r3
 8000d5a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d5e:	fb09 f408 	mul.w	r4, r9, r8
 8000d62:	42ac      	cmp	r4, r5
 8000d64:	fa02 f201 	lsl.w	r2, r2, r1
 8000d68:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x244>
 8000d6e:	18ed      	adds	r5, r5, r3
 8000d70:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d74:	d243      	bcs.n	8000dfe <__udivmoddi4+0x2c2>
 8000d76:	42ac      	cmp	r4, r5
 8000d78:	d941      	bls.n	8000dfe <__udivmoddi4+0x2c2>
 8000d7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7e:	441d      	add	r5, r3
 8000d80:	1b2d      	subs	r5, r5, r4
 8000d82:	fa1f fe8e 	uxth.w	lr, lr
 8000d86:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d8a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d8e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d92:	fb00 f808 	mul.w	r8, r0, r8
 8000d96:	45a0      	cmp	r8, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x26e>
 8000d9a:	18e4      	adds	r4, r4, r3
 8000d9c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000da0:	d229      	bcs.n	8000df6 <__udivmoddi4+0x2ba>
 8000da2:	45a0      	cmp	r8, r4
 8000da4:	d927      	bls.n	8000df6 <__udivmoddi4+0x2ba>
 8000da6:	3802      	subs	r0, #2
 8000da8:	441c      	add	r4, r3
 8000daa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dae:	eba4 0408 	sub.w	r4, r4, r8
 8000db2:	fba0 8902 	umull	r8, r9, r0, r2
 8000db6:	454c      	cmp	r4, r9
 8000db8:	46c6      	mov	lr, r8
 8000dba:	464d      	mov	r5, r9
 8000dbc:	d315      	bcc.n	8000dea <__udivmoddi4+0x2ae>
 8000dbe:	d012      	beq.n	8000de6 <__udivmoddi4+0x2aa>
 8000dc0:	b156      	cbz	r6, 8000dd8 <__udivmoddi4+0x29c>
 8000dc2:	ebba 030e 	subs.w	r3, sl, lr
 8000dc6:	eb64 0405 	sbc.w	r4, r4, r5
 8000dca:	fa04 f707 	lsl.w	r7, r4, r7
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431f      	orrs	r7, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	6037      	str	r7, [r6, #0]
 8000dd6:	6074      	str	r4, [r6, #4]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	4618      	mov	r0, r3
 8000de0:	e6f8      	b.n	8000bd4 <__udivmoddi4+0x98>
 8000de2:	4690      	mov	r8, r2
 8000de4:	e6e0      	b.n	8000ba8 <__udivmoddi4+0x6c>
 8000de6:	45c2      	cmp	sl, r8
 8000de8:	d2ea      	bcs.n	8000dc0 <__udivmoddi4+0x284>
 8000dea:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dee:	eb69 0503 	sbc.w	r5, r9, r3
 8000df2:	3801      	subs	r0, #1
 8000df4:	e7e4      	b.n	8000dc0 <__udivmoddi4+0x284>
 8000df6:	4628      	mov	r0, r5
 8000df8:	e7d7      	b.n	8000daa <__udivmoddi4+0x26e>
 8000dfa:	4640      	mov	r0, r8
 8000dfc:	e791      	b.n	8000d22 <__udivmoddi4+0x1e6>
 8000dfe:	4681      	mov	r9, r0
 8000e00:	e7be      	b.n	8000d80 <__udivmoddi4+0x244>
 8000e02:	4601      	mov	r1, r0
 8000e04:	e778      	b.n	8000cf8 <__udivmoddi4+0x1bc>
 8000e06:	3802      	subs	r0, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	e745      	b.n	8000c98 <__udivmoddi4+0x15c>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e708      	b.n	8000c22 <__udivmoddi4+0xe6>
 8000e10:	f1a8 0802 	sub.w	r8, r8, #2
 8000e14:	443d      	add	r5, r7
 8000e16:	e72b      	b.n	8000c70 <__udivmoddi4+0x134>

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	4a23      	ldr	r2, [pc, #140]	; (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	4a1c      	ldr	r2, [pc, #112]	; (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2110      	movs	r1, #16
 8000e6e:	4816      	ldr	r0, [pc, #88]	; (8000ec8 <MX_GPIO_Init+0xac>)
 8000e70:	f000 fe60 	bl	8001b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEART_GPIO_Port, HEART_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e7a:	4814      	ldr	r0, [pc, #80]	; (8000ecc <MX_GPIO_Init+0xb0>)
 8000e7c:	f000 fe5a 	bl	8001b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000e80:	2310      	movs	r3, #16
 8000e82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	4619      	mov	r1, r3
 8000e96:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <MX_GPIO_Init+0xac>)
 8000e98:	f000 fcca 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEART_Pin;
 8000e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HEART_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_GPIO_Init+0xb0>)
 8000eb6:	f000 fcbb 	bl	8001830 <HAL_GPIO_Init>

}
 8000eba:	bf00      	nop
 8000ebc:	3720      	adds	r7, #32
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed6:	f000 fb33 	bl	8001540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eda:	f000 f905 	bl	80010e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ede:	f7ff ff9d 	bl	8000e1c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ee2:	f000 f9d1 	bl	8001288 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000ee6:	f000 fab9 	bl	800145c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  DBG_init(&huart2);
 8000eea:	4872      	ldr	r0, [pc, #456]	; (80010b4 <main+0x1e4>)
 8000eec:	f002 fd36 	bl	800395c <DBG_init>
  DBG_println("PCF2123 demo project");
 8000ef0:	4871      	ldr	r0, [pc, #452]	; (80010b8 <main+0x1e8>)
 8000ef2:	f002 fd43 	bl	800397c <DBG_println>

  /* Wait for Oscilator to become stable */
  HAL_Delay(1000 * 2);
 8000ef6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000efa:	f000 fb93 	bl	8001624 <HAL_Delay>

  PCF2123_init(&my_pcf, my_spi_xfer, my_control_ce);
 8000efe:	4a6f      	ldr	r2, [pc, #444]	; (80010bc <main+0x1ec>)
 8000f00:	496f      	ldr	r1, [pc, #444]	; (80010c0 <main+0x1f0>)
 8000f02:	4870      	ldr	r0, [pc, #448]	; (80010c4 <main+0x1f4>)
 8000f04:	f002 f9a8 	bl	8003258 <PCF2123_init>

  PCF2123_sw_reset(&my_pcf);
 8000f08:	486e      	ldr	r0, [pc, #440]	; (80010c4 <main+0x1f4>)
 8000f0a:	f002 fb2a 	bl	8003562 <PCF2123_sw_reset>

  HAL_Delay(1000 * 2);
 8000f0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f12:	f000 fb87 	bl	8001624 <HAL_Delay>

  uint8_t control_1 = 0xff;
 8000f16:	23ff      	movs	r3, #255	; 0xff
 8000f18:	77bb      	strb	r3, [r7, #30]
  uint8_t control_2 = 0xff;
 8000f1a:	23ff      	movs	r3, #255	; 0xff
 8000f1c:	777b      	strb	r3, [r7, #29]
  uint8_t osc_status = 0xff;
 8000f1e:	23ff      	movs	r3, #255	; 0xff
 8000f20:	773b      	strb	r3, [r7, #28]

  PCF2123_read_register(&my_pcf, PCF2123_REG_CONTROL_1,
 8000f22:	f107 021e 	add.w	r2, r7, #30
 8000f26:	2301      	movs	r3, #1
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4866      	ldr	r0, [pc, #408]	; (80010c4 <main+0x1f4>)
 8000f2c:	f002 fb55 	bl	80035da <PCF2123_read_register>
	&control_1, 1);
  PCF2123_read_register(&my_pcf, PCF2123_REG_CONTROL_2,
 8000f30:	f107 021d 	add.w	r2, r7, #29
 8000f34:	2301      	movs	r3, #1
 8000f36:	2101      	movs	r1, #1
 8000f38:	4862      	ldr	r0, [pc, #392]	; (80010c4 <main+0x1f4>)
 8000f3a:	f002 fb4e 	bl	80035da <PCF2123_read_register>
	&control_2, 1);
  PCF2123_read_register(&my_pcf, PCF2123_REG_SECONDS,
 8000f3e:	f107 021c 	add.w	r2, r7, #28
 8000f42:	2301      	movs	r3, #1
 8000f44:	2102      	movs	r1, #2
 8000f46:	485f      	ldr	r0, [pc, #380]	; (80010c4 <main+0x1f4>)
 8000f48:	f002 fb47 	bl	80035da <PCF2123_read_register>
  	&osc_status, 1);

  DBG_println("C1: %x, C2: %x", control_1, control_2);
 8000f4c:	7fbb      	ldrb	r3, [r7, #30]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	7f7b      	ldrb	r3, [r7, #29]
 8000f52:	461a      	mov	r2, r3
 8000f54:	485c      	ldr	r0, [pc, #368]	; (80010c8 <main+0x1f8>)
 8000f56:	f002 fd11 	bl	800397c <DBG_println>
  DBG_println("Osc sts: %x", osc_status);
 8000f5a:	7f3b      	ldrb	r3, [r7, #28]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	485b      	ldr	r0, [pc, #364]	; (80010cc <main+0x1fc>)
 8000f60:	f002 fd0c 	bl	800397c <DBG_println>

  if (0x08 & control_2) {
 8000f64:	7f7b      	ldrb	r3, [r7, #29]
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d01c      	beq.n	8000faa <main+0xda>
	  control_2 &= ~(0x08);
 8000f70:	7f7b      	ldrb	r3, [r7, #29]
 8000f72:	f023 0308 	bic.w	r3, r3, #8
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	777b      	strb	r3, [r7, #29]
	  DBG_println("C2: %x", control_2);
 8000f7a:	7f7b      	ldrb	r3, [r7, #29]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4854      	ldr	r0, [pc, #336]	; (80010d0 <main+0x200>)
 8000f80:	f002 fcfc 	bl	800397c <DBG_println>
	  PCF2123_write_register(&my_pcf, PCF2123_REG_CONTROL_2,
 8000f84:	f107 021d 	add.w	r2, r7, #29
 8000f88:	2301      	movs	r3, #1
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	484d      	ldr	r0, [pc, #308]	; (80010c4 <main+0x1f4>)
 8000f8e:	f002 fbaf 	bl	80036f0 <PCF2123_write_register>
		&control_2, 1);

	  PCF2123_read_register(&my_pcf, PCF2123_REG_CONTROL_2,
 8000f92:	f107 021d 	add.w	r2, r7, #29
 8000f96:	2301      	movs	r3, #1
 8000f98:	2101      	movs	r1, #1
 8000f9a:	484a      	ldr	r0, [pc, #296]	; (80010c4 <main+0x1f4>)
 8000f9c:	f002 fb1d 	bl	80035da <PCF2123_read_register>
		&control_2, 1);

	  DBG_println("C2: %x", control_2);
 8000fa0:	7f7b      	ldrb	r3, [r7, #29]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	484a      	ldr	r0, [pc, #296]	; (80010d0 <main+0x200>)
 8000fa6:	f002 fce9 	bl	800397c <DBG_println>
  }

  if (0x80 & osc_status) {
 8000faa:	7f3b      	ldrb	r3, [r7, #28]
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	da10      	bge.n	8000fd4 <main+0x104>
	  osc_status &= ~(0x80);
 8000fb2:	7f3b      	ldrb	r3, [r7, #28]
 8000fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	773b      	strb	r3, [r7, #28]
	  DBG_println("Osc sts: %x", osc_status);
 8000fbc:	7f3b      	ldrb	r3, [r7, #28]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4842      	ldr	r0, [pc, #264]	; (80010cc <main+0x1fc>)
 8000fc2:	f002 fcdb 	bl	800397c <DBG_println>
	  PCF2123_write_register(&my_pcf, PCF2123_REG_SECONDS,
 8000fc6:	f107 021c 	add.w	r2, r7, #28
 8000fca:	2301      	movs	r3, #1
 8000fcc:	2102      	movs	r1, #2
 8000fce:	483d      	ldr	r0, [pc, #244]	; (80010c4 <main+0x1f4>)
 8000fd0:	f002 fb8e 	bl	80036f0 <PCF2123_write_register>
		&osc_status, 1);
  }

  osc_status = 0xff;
 8000fd4:	23ff      	movs	r3, #255	; 0xff
 8000fd6:	773b      	strb	r3, [r7, #28]
  PCF2123_read_register(&my_pcf, PCF2123_REG_SECONDS,
 8000fd8:	f107 021c 	add.w	r2, r7, #28
 8000fdc:	2301      	movs	r3, #1
 8000fde:	2102      	movs	r1, #2
 8000fe0:	4838      	ldr	r0, [pc, #224]	; (80010c4 <main+0x1f4>)
 8000fe2:	f002 fafa 	bl	80035da <PCF2123_read_register>
  	&osc_status, 1);

  DBG_println("Osc sts: %x", osc_status);
 8000fe6:	7f3b      	ldrb	r3, [r7, #28]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4838      	ldr	r0, [pc, #224]	; (80010cc <main+0x1fc>)
 8000fec:	f002 fcc6 	bl	800397c <DBG_println>

  pcf2123_time_t time = {
 8000ff0:	4a38      	ldr	r2, [pc, #224]	; (80010d4 <main+0x204>)
 8000ff2:	f107 0318 	add.w	r3, r7, #24
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	8019      	strh	r1, [r3, #0]
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	0c12      	lsrs	r2, r2, #16
 8001000:	701a      	strb	r2, [r3, #0]
		  .sec = 56,
		  .min = 10,
		  .hour = 0
  };

  pcf2123_date_t date = {
 8001002:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <main+0x208>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	617b      	str	r3, [r7, #20]
		  .weekday = PCF2123_WEEKDAY_SUNDAY,
		  .month = PCF2123_MONTH_OCTOBER,
		  .year = 20
  };

  PCF2123_set_rtcc_data(&my_pcf, &time, &date);
 8001008:	f107 0214 	add.w	r2, r7, #20
 800100c:	f107 0318 	add.w	r3, r7, #24
 8001010:	4619      	mov	r1, r3
 8001012:	482c      	ldr	r0, [pc, #176]	; (80010c4 <main+0x1f4>)
 8001014:	f002 f934 	bl	8003280 <PCF2123_set_rtcc_data>

  pcf2123_alarm_conf_t alarm = {
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	711a      	strb	r2, [r3, #4]
 8001022:	2301      	movs	r3, #1
 8001024:	733b      	strb	r3, [r7, #12]
 8001026:	230b      	movs	r3, #11
 8001028:	737b      	strb	r3, [r7, #13]
		  .alarm_enable = PCF2123_ALARM_MIN_ENABLE,
		  .min = 11,
  };

  PCF2123_set_alarm_interrupt(&my_pcf, &alarm);
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	4619      	mov	r1, r3
 8001030:	4824      	ldr	r0, [pc, #144]	; (80010c4 <main+0x1f4>)
 8001032:	f002 f9f9 	bl	8003428 <PCF2123_set_alarm_interrupt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(HEART_GPIO_Port, HEART_Pin);
 8001036:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800103a:	4828      	ldr	r0, [pc, #160]	; (80010dc <main+0x20c>)
 800103c:	f000 fd93 	bl	8001b66 <HAL_GPIO_TogglePin>

	  uint8_t flags = PCF2123_get_interrupt_flags(&my_pcf);
 8001040:	4820      	ldr	r0, [pc, #128]	; (80010c4 <main+0x1f4>)
 8001042:	f002 fc25 	bl	8003890 <PCF2123_get_interrupt_flags>
 8001046:	4603      	mov	r3, r0
 8001048:	77fb      	strb	r3, [r7, #31]

	  /* AF */
	  if (0x08 & flags) {
 800104a:	7ffb      	ldrb	r3, [r7, #31]
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <main+0x18c>
		  PCF2123_clear_af(&my_pcf);
 8001056:	481b      	ldr	r0, [pc, #108]	; (80010c4 <main+0x1f4>)
 8001058:	f002 fbd8 	bl	800380c <PCF2123_clear_af>
	  }

	  /* TF */
	  if (0x04 & flags) {
 800105c:	7ffb      	ldrb	r3, [r7, #31]
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d002      	beq.n	800106e <main+0x19e>
		  PCF2123_clear_tf(&my_pcf);
 8001068:	4816      	ldr	r0, [pc, #88]	; (80010c4 <main+0x1f4>)
 800106a:	f002 fbf0 	bl	800384e <PCF2123_clear_tf>
	  }

	  pcf2123_time_t current_time;
	  pcf2123_date_t current_date;

	  PCF2123_get_rtcc_data(&my_pcf, &current_time, &current_date);
 800106e:	1d3a      	adds	r2, r7, #4
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	4619      	mov	r1, r3
 8001076:	4813      	ldr	r0, [pc, #76]	; (80010c4 <main+0x1f4>)
 8001078:	f002 f95b 	bl	8003332 <PCF2123_get_rtcc_data>

	  DBG_println("Hour: %d, Min: %d, Sec: %d",
			  current_time.hour, current_time.min, current_time.sec);
 800107c:	7abb      	ldrb	r3, [r7, #10]
	  DBG_println("Hour: %d, Min: %d, Sec: %d",
 800107e:	4619      	mov	r1, r3
			  current_time.hour, current_time.min, current_time.sec);
 8001080:	7a7b      	ldrb	r3, [r7, #9]
	  DBG_println("Hour: %d, Min: %d, Sec: %d",
 8001082:	461a      	mov	r2, r3
			  current_time.hour, current_time.min, current_time.sec);
 8001084:	7a3b      	ldrb	r3, [r7, #8]
	  DBG_println("Hour: %d, Min: %d, Sec: %d",
 8001086:	4816      	ldr	r0, [pc, #88]	; (80010e0 <main+0x210>)
 8001088:	f002 fc78 	bl	800397c <DBG_println>
	  DBG_println("Day: %d, Weekday: %d, month: %d, year: %d",
			  current_date.day, current_date.weekday, current_date.month, current_date.year);
 800108c:	793b      	ldrb	r3, [r7, #4]
	  DBG_println("Day: %d, Weekday: %d, month: %d, year: %d",
 800108e:	4619      	mov	r1, r3
			  current_date.day, current_date.weekday, current_date.month, current_date.year);
 8001090:	f997 3005 	ldrsb.w	r3, [r7, #5]
	  DBG_println("Day: %d, Weekday: %d, month: %d, year: %d",
 8001094:	461a      	mov	r2, r3
			  current_date.day, current_date.weekday, current_date.month, current_date.year);
 8001096:	f997 3006 	ldrsb.w	r3, [r7, #6]
	  DBG_println("Day: %d, Weekday: %d, month: %d, year: %d",
 800109a:	4618      	mov	r0, r3
			  current_date.day, current_date.weekday, current_date.month, current_date.year);
 800109c:	79fb      	ldrb	r3, [r7, #7]
	  DBG_println("Day: %d, Weekday: %d, month: %d, year: %d",
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	4603      	mov	r3, r0
 80010a2:	4810      	ldr	r0, [pc, #64]	; (80010e4 <main+0x214>)
 80010a4:	f002 fc6a 	bl	800397c <DBG_println>

	  HAL_Delay(1000);
 80010a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ac:	f000 faba 	bl	8001624 <HAL_Delay>
  {
 80010b0:	e7c1      	b.n	8001036 <main+0x166>
 80010b2:	bf00      	nop
 80010b4:	2000008c 	.word	0x2000008c
 80010b8:	080052e8 	.word	0x080052e8
 80010bc:	08001239 	.word	0x08001239
 80010c0:	080011b9 	.word	0x080011b9
 80010c4:	2000002c 	.word	0x2000002c
 80010c8:	08005300 	.word	0x08005300
 80010cc:	08005310 	.word	0x08005310
 80010d0:	0800531c 	.word	0x0800531c
 80010d4:	0800536c 	.word	0x0800536c
 80010d8:	08005370 	.word	0x08005370
 80010dc:	40020000 	.word	0x40020000
 80010e0:	08005324 	.word	0x08005324
 80010e4:	08005340 	.word	0x08005340

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	; 0x50
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	2230      	movs	r2, #48	; 0x30
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f004 f8e0 	bl	80052bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	4a23      	ldr	r2, [pc, #140]	; (80011a0 <SystemClock_Config+0xb8>)
 8001112:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <SystemClock_Config+0xb8>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111a:	6413      	str	r3, [r2, #64]	; 0x40
 800111c:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <SystemClock_Config+0xb8>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	4a1d      	ldr	r2, [pc, #116]	; (80011a4 <SystemClock_Config+0xbc>)
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <SystemClock_Config+0xbc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <SystemClock_Config+0xbc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001148:	2302      	movs	r3, #2
 800114a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114c:	2301      	movs	r3, #1
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001150:	2310      	movs	r3, #16
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001154:	2300      	movs	r3, #0
 8001156:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4618      	mov	r0, r3
 800115e:	f000 fd1d 	bl	8001b9c <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001168:	f000 f886 	bl	8001278 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f000 ff78 	bl	800207c <HAL_RCC_ClockConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001192:	f000 f871 	bl	8001278 <Error_Handler>
  }
}
 8001196:	bf00      	nop
 8001198:	3750      	adds	r7, #80	; 0x50
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40007000 	.word	0x40007000

080011a8 <PCF2123_on_assertion>:
	}
}
#endif

void PCF2123_on_assertion(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <my_spi_xfer>:

pcf2123_error_t my_spi_xfer(uint8_t *write, uint8_t *read, size_t xfer_len, uint32_t timeout_ms)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af02      	add	r7, sp, #8
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	603b      	str	r3, [r7, #0]
	PCF2123_ASSERT(write);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <my_spi_xfer+0x1a>
 80011cc:	f7ff ffec 	bl	80011a8 <PCF2123_on_assertion>
 80011d0:	e7fe      	b.n	80011d0 <my_spi_xfer+0x18>
	PCF2123_ASSERT(read);
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d102      	bne.n	80011de <my_spi_xfer+0x26>
 80011d8:	f7ff ffe6 	bl	80011a8 <PCF2123_on_assertion>
 80011dc:	e7fe      	b.n	80011dc <my_spi_xfer+0x24>

	pcf2123_error_t retval;
	HAL_StatusTypeDef xfer_sts;

	HAL_GPIO_WritePin(HEART_GPIO_Port, HEART_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e4:	4812      	ldr	r0, [pc, #72]	; (8001230 <my_spi_xfer+0x78>)
 80011e6:	f000 fca5 	bl	8001b34 <HAL_GPIO_WritePin>
	xfer_sts = HAL_SPI_TransmitReceive(&hspi1, write, read, xfer_len, timeout_ms);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	4613      	mov	r3, r2
 80011f4:	68ba      	ldr	r2, [r7, #8]
 80011f6:	68f9      	ldr	r1, [r7, #12]
 80011f8:	480e      	ldr	r0, [pc, #56]	; (8001234 <my_spi_xfer+0x7c>)
 80011fa:	f001 f972 	bl	80024e2 <HAL_SPI_TransmitReceive>
 80011fe:	4603      	mov	r3, r0
 8001200:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(HEART_GPIO_Port, HEART_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <my_spi_xfer+0x78>)
 800120a:	f000 fc93 	bl	8001b34 <HAL_GPIO_WritePin>

	if (HAL_TIMEOUT == xfer_sts) {
 800120e:	7dbb      	ldrb	r3, [r7, #22]
 8001210:	2b03      	cmp	r3, #3
 8001212:	d102      	bne.n	800121a <my_spi_xfer+0x62>
		retval = PCF2123_ETIMEOUT;
 8001214:	23ff      	movs	r3, #255	; 0xff
 8001216:	75fb      	strb	r3, [r7, #23]
 8001218:	e004      	b.n	8001224 <my_spi_xfer+0x6c>
	} else if (HAL_OK == xfer_sts) {
 800121a:	7dbb      	ldrb	r3, [r7, #22]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <my_spi_xfer+0x6c>
		retval = PCF2123_ENONE;
 8001220:	2300      	movs	r3, #0
 8001222:	75fb      	strb	r3, [r7, #23]
	}

	return retval;
 8001224:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40020000 	.word	0x40020000
 8001234:	20000034 	.word	0x20000034

08001238 <my_control_ce>:

void my_control_ce(pcf2123_ce_t ce_state)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
	if (PCF2123_CE_ENABLE == ce_state) {
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d105      	bne.n	8001254 <my_control_ce+0x1c>
		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 8001248:	2201      	movs	r2, #1
 800124a:	2110      	movs	r1, #16
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <my_control_ce+0x3c>)
 800124e:	f000 fc71 	bl	8001b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
	} else {
		/* NOTE: You should never reach this point */
		PCF2123_ASSERT(0);
	}
}
 8001252:	e00b      	b.n	800126c <my_control_ce+0x34>
	} else if (PCF2123_CE_DISABLE == ce_state) {
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d105      	bne.n	8001266 <my_control_ce+0x2e>
		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2110      	movs	r1, #16
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <my_control_ce+0x3c>)
 8001260:	f000 fc68 	bl	8001b34 <HAL_GPIO_WritePin>
}
 8001264:	e002      	b.n	800126c <my_control_ce+0x34>
		PCF2123_ASSERT(0);
 8001266:	f7ff ff9f 	bl	80011a8 <PCF2123_on_assertion>
 800126a:	e7fe      	b.n	800126a <my_control_ce+0x32>
}
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40020800 	.word	0x40020800

08001278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <MX_SPI1_Init+0x64>)
 800128e:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <MX_SPI1_Init+0x68>)
 8001290:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001292:	4b16      	ldr	r3, [pc, #88]	; (80012ec <MX_SPI1_Init+0x64>)
 8001294:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001298:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_SPI1_Init+0x64>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_SPI1_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_SPI1_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_SPI1_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_SPI1_Init+0x64>)
 80012b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_SPI1_Init+0x64>)
 80012bc:	2218      	movs	r2, #24
 80012be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <MX_SPI1_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_SPI1_Init+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MX_SPI1_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_SPI1_Init+0x64>)
 80012d4:	220a      	movs	r2, #10
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_SPI1_Init+0x64>)
 80012da:	f001 f89f 	bl	800241c <HAL_SPI_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012e4:	f7ff ffc8 	bl	8001278 <Error_Handler>
  }

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000034 	.word	0x20000034
 80012f0:	40013000 	.word	0x40013000

080012f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a19      	ldr	r2, [pc, #100]	; (8001378 <HAL_SPI_MspInit+0x84>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d12b      	bne.n	800136e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4a18      	ldr	r2, [pc, #96]	; (800137c <HAL_SPI_MspInit+0x88>)
 800131c:	4b17      	ldr	r3, [pc, #92]	; (800137c <HAL_SPI_MspInit+0x88>)
 800131e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001320:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <HAL_SPI_MspInit+0x88>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4a11      	ldr	r2, [pc, #68]	; (800137c <HAL_SPI_MspInit+0x88>)
 8001338:	4b10      	ldr	r3, [pc, #64]	; (800137c <HAL_SPI_MspInit+0x88>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_SPI_MspInit+0x88>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800134e:	23e0      	movs	r3, #224	; 0xe0
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800135e:	2305      	movs	r3, #5
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <HAL_SPI_MspInit+0x8c>)
 800136a:	f000 fa61 	bl	8001830 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	; 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40013000 	.word	0x40013000
 800137c:	40023800 	.word	0x40023800
 8001380:	40020000 	.word	0x40020000

08001384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <HAL_MspInit+0x4c>)
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <HAL_MspInit+0x4c>)
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_MspInit+0x4c>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	4a09      	ldr	r2, [pc, #36]	; (80013d0 <HAL_MspInit+0x4c>)
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_MspInit+0x4c>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b4:	6413      	str	r3, [r2, #64]	; 0x40
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_MspInit+0x4c>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <HardFault_Handler+0x4>

080013e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <MemManage_Handler+0x4>

080013ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001428:	f000 f8dc 	bl	80015e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001434:	4a08      	ldr	r2, [pc, #32]	; (8001458 <SystemInit+0x28>)
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <SystemInit+0x28>)
 8001438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SystemInit+0x28>)
 8001446:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800144a:	609a      	str	r2, [r3, #8]
#endif
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <MX_USART2_UART_Init+0x50>)
 8001464:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001468:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800146c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <MX_USART2_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001482:	220c      	movs	r2, #12
 8001484:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_USART2_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_USART2_UART_Init+0x4c>)
 8001494:	f001 fa72 	bl	800297c <HAL_UART_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800149e:	f7ff feeb 	bl	8001278 <Error_Handler>
  }

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2000008c 	.word	0x2000008c
 80014ac:	40004400 	.word	0x40004400

080014b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a19      	ldr	r2, [pc, #100]	; (8001534 <HAL_UART_MspInit+0x84>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d12b      	bne.n	800152a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4a18      	ldr	r2, [pc, #96]	; (8001538 <HAL_UART_MspInit+0x88>)
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <HAL_UART_MspInit+0x88>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_UART_MspInit+0x88>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4a11      	ldr	r2, [pc, #68]	; (8001538 <HAL_UART_MspInit+0x88>)
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_UART_MspInit+0x88>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_UART_MspInit+0x88>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800150a:	230c      	movs	r3, #12
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800151a:	2307      	movs	r3, #7
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	; (800153c <HAL_UART_MspInit+0x8c>)
 8001526:	f000 f983 	bl	8001830 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40004400 	.word	0x40004400
 8001538:	40023800 	.word	0x40023800
 800153c:	40020000 	.word	0x40020000

08001540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001544:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <HAL_Init+0x40>)
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_Init+0x40>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800154e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001550:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <HAL_Init+0x40>)
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_Init+0x40>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800155c:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_Init+0x40>)
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_Init+0x40>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001566:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001568:	2003      	movs	r0, #3
 800156a:	f000 f92d 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156e:	2000      	movs	r0, #0
 8001570:	f000 f808 	bl	8001584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001574:	f7ff ff06 	bl	8001384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023c00 	.word	0x40023c00

08001584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_InitTick+0x54>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x58>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159a:	fbb3 f3f1 	udiv	r3, r3, r1
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f937 	bl	8001816 <HAL_SYSTICK_Config>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00e      	b.n	80015d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d80a      	bhi.n	80015ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f000 f90d 	bl	80017de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c4:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <HAL_InitTick+0x5c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000008 	.word	0x20000008
 80015e0:	20000004 	.word	0x20000004

080015e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_IncTick+0x20>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_IncTick+0x24>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a04      	ldr	r2, [pc, #16]	; (8001608 <HAL_IncTick+0x24>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000008 	.word	0x20000008
 8001608:	200000cc 	.word	0x200000cc

0800160c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return uwTick;
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <HAL_GetTick+0x14>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	200000cc 	.word	0x200000cc

08001624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800162c:	f7ff ffee 	bl	800160c <HAL_GetTick>
 8001630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163c:	d005      	beq.n	800164a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_Delay+0x40>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4413      	add	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800164a:	bf00      	nop
 800164c:	f7ff ffde 	bl	800160c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	1ad2      	subs	r2, r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	429a      	cmp	r2, r3
 800165a:	d3f7      	bcc.n	800164c <HAL_Delay+0x28>
  {
  }
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000008 	.word	0x20000008

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	db0a      	blt.n	80016f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	490d      	ldr	r1, [pc, #52]	; (8001718 <__NVIC_SetPriority+0x4c>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	0112      	lsls	r2, r2, #4
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	440b      	add	r3, r1
 80016f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f4:	e00a      	b.n	800170c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f6:	4909      	ldr	r1, [pc, #36]	; (800171c <__NVIC_SetPriority+0x50>)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	3b04      	subs	r3, #4
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	0112      	lsls	r2, r2, #4
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	440b      	add	r3, r1
 800170a:	761a      	strb	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000e100 	.word	0xe000e100
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	; 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f1c3 0307 	rsb	r3, r3, #7
 800173a:	2b04      	cmp	r3, #4
 800173c:	bf28      	it	cs
 800173e:	2304      	movcs	r3, #4
 8001740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3304      	adds	r3, #4
 8001746:	2b06      	cmp	r3, #6
 8001748:	d902      	bls.n	8001750 <NVIC_EncodePriority+0x30>
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3b03      	subs	r3, #3
 800174e:	e000      	b.n	8001752 <NVIC_EncodePriority+0x32>
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	2201      	movs	r2, #1
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	1e5a      	subs	r2, r3, #1
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	401a      	ands	r2, r3
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001766:	2101      	movs	r1, #1
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	1e59      	subs	r1, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	4313      	orrs	r3, r2
         );
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	; 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001794:	d301      	bcc.n	800179a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001796:	2301      	movs	r3, #1
 8001798:	e00f      	b.n	80017ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <SysTick_Config+0x40>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a2:	210f      	movs	r1, #15
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f7ff ff90 	bl	80016cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <SysTick_Config+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <SysTick_Config+0x40>)
 80017b4:	2207      	movs	r2, #7
 80017b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	e000e010 	.word	0xe000e010

080017c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff49 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f0:	f7ff ff5e 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 80017f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	6978      	ldr	r0, [r7, #20]
 80017fc:	f7ff ff90 	bl	8001720 <NVIC_EncodePriority>
 8001800:	4602      	mov	r2, r0
 8001802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff5f 	bl	80016cc <__NVIC_SetPriority>
}
 800180e:	bf00      	nop
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ffb0 	bl	8001784 <SysTick_Config>
 8001824:	4603      	mov	r3, r0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	; 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	e159      	b.n	8001b00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800184c:	2201      	movs	r2, #1
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	429a      	cmp	r2, r3
 8001866:	f040 8148 	bne.w	8001afa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d00b      	beq.n	800188a <HAL_GPIO_Init+0x5a>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d007      	beq.n	800188a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800187e:	2b11      	cmp	r3, #17
 8001880:	d003      	beq.n	800188a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b12      	cmp	r3, #18
 8001888:	d130      	bne.n	80018ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	2203      	movs	r2, #3
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018c0:	2201      	movs	r2, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 0201 	and.w	r2, r3, #1
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0xfc>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b12      	cmp	r3, #18
 800192a:	d123      	bne.n	8001974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	08da      	lsrs	r2, r3, #3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3208      	adds	r2, #8
 8001934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	220f      	movs	r2, #15
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	08da      	lsrs	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3208      	adds	r2, #8
 800196e:	69b9      	ldr	r1, [r7, #24]
 8001970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0203 	and.w	r2, r3, #3
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 80a2 	beq.w	8001afa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4a56      	ldr	r2, [pc, #344]	; (8001b14 <HAL_GPIO_Init+0x2e4>)
 80019bc:	4b55      	ldr	r3, [pc, #340]	; (8001b14 <HAL_GPIO_Init+0x2e4>)
 80019be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
 80019c6:	4b53      	ldr	r3, [pc, #332]	; (8001b14 <HAL_GPIO_Init+0x2e4>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d2:	4a51      	ldr	r2, [pc, #324]	; (8001b18 <HAL_GPIO_Init+0x2e8>)
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	3302      	adds	r3, #2
 80019da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	220f      	movs	r2, #15
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a48      	ldr	r2, [pc, #288]	; (8001b1c <HAL_GPIO_Init+0x2ec>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d019      	beq.n	8001a32 <HAL_GPIO_Init+0x202>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a47      	ldr	r2, [pc, #284]	; (8001b20 <HAL_GPIO_Init+0x2f0>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d013      	beq.n	8001a2e <HAL_GPIO_Init+0x1fe>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a46      	ldr	r2, [pc, #280]	; (8001b24 <HAL_GPIO_Init+0x2f4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d00d      	beq.n	8001a2a <HAL_GPIO_Init+0x1fa>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a45      	ldr	r2, [pc, #276]	; (8001b28 <HAL_GPIO_Init+0x2f8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d007      	beq.n	8001a26 <HAL_GPIO_Init+0x1f6>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a44      	ldr	r2, [pc, #272]	; (8001b2c <HAL_GPIO_Init+0x2fc>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d101      	bne.n	8001a22 <HAL_GPIO_Init+0x1f2>
 8001a1e:	2304      	movs	r3, #4
 8001a20:	e008      	b.n	8001a34 <HAL_GPIO_Init+0x204>
 8001a22:	2307      	movs	r3, #7
 8001a24:	e006      	b.n	8001a34 <HAL_GPIO_Init+0x204>
 8001a26:	2303      	movs	r3, #3
 8001a28:	e004      	b.n	8001a34 <HAL_GPIO_Init+0x204>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e002      	b.n	8001a34 <HAL_GPIO_Init+0x204>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <HAL_GPIO_Init+0x204>
 8001a32:	2300      	movs	r3, #0
 8001a34:	69fa      	ldr	r2, [r7, #28]
 8001a36:	f002 0203 	and.w	r2, r2, #3
 8001a3a:	0092      	lsls	r2, r2, #2
 8001a3c:	4093      	lsls	r3, r2
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a44:	4934      	ldr	r1, [pc, #208]	; (8001b18 <HAL_GPIO_Init+0x2e8>)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	089b      	lsrs	r3, r3, #2
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a52:	4b37      	ldr	r3, [pc, #220]	; (8001b30 <HAL_GPIO_Init+0x300>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a76:	4a2e      	ldr	r2, [pc, #184]	; (8001b30 <HAL_GPIO_Init+0x300>)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a7c:	4b2c      	ldr	r3, [pc, #176]	; (8001b30 <HAL_GPIO_Init+0x300>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa0:	4a23      	ldr	r2, [pc, #140]	; (8001b30 <HAL_GPIO_Init+0x300>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa6:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <HAL_GPIO_Init+0x300>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aca:	4a19      	ldr	r2, [pc, #100]	; (8001b30 <HAL_GPIO_Init+0x300>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_GPIO_Init+0x300>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <HAL_GPIO_Init+0x300>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3301      	adds	r3, #1
 8001afe:	61fb      	str	r3, [r7, #28]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	2b0f      	cmp	r3, #15
 8001b04:	f67f aea2 	bls.w	800184c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b08:	bf00      	nop
 8001b0a:	3724      	adds	r7, #36	; 0x24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40013800 	.word	0x40013800
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	40020400 	.word	0x40020400
 8001b24:	40020800 	.word	0x40020800
 8001b28:	40020c00 	.word	0x40020c00
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40013c00 	.word	0x40013c00

08001b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	807b      	strh	r3, [r7, #2]
 8001b40:	4613      	mov	r3, r2
 8001b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b44:	787b      	ldrb	r3, [r7, #1]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b4a:	887a      	ldrh	r2, [r7, #2]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b50:	e003      	b.n	8001b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b52:	887b      	ldrh	r3, [r7, #2]
 8001b54:	041a      	lsls	r2, r3, #16
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	619a      	str	r2, [r3, #24]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	887b      	ldrh	r3, [r7, #2]
 8001b78:	401a      	ands	r2, r3
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d104      	bne.n	8001b8a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b80:	887b      	ldrh	r3, [r7, #2]
 8001b82:	041a      	lsls	r2, r3, #16
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001b88:	e002      	b.n	8001b90 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	619a      	str	r2, [r3, #24]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e25b      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d075      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bba:	4ba3      	ldr	r3, [pc, #652]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d00c      	beq.n	8001be0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bc6:	4ba0      	ldr	r3, [pc, #640]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d112      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bd2:	4b9d      	ldr	r3, [pc, #628]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bde:	d10b      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	4b99      	ldr	r3, [pc, #612]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d05b      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x108>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d157      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e236      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c00:	d106      	bne.n	8001c10 <HAL_RCC_OscConfig+0x74>
 8001c02:	4a91      	ldr	r2, [pc, #580]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c04:	4b90      	ldr	r3, [pc, #576]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e01d      	b.n	8001c4c <HAL_RCC_OscConfig+0xb0>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x98>
 8001c1a:	4a8b      	ldr	r2, [pc, #556]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	4b8a      	ldr	r3, [pc, #552]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4a88      	ldr	r2, [pc, #544]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	4b87      	ldr	r3, [pc, #540]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e00b      	b.n	8001c4c <HAL_RCC_OscConfig+0xb0>
 8001c34:	4a84      	ldr	r2, [pc, #528]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c36:	4b84      	ldr	r3, [pc, #528]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	4a81      	ldr	r2, [pc, #516]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c42:	4b81      	ldr	r3, [pc, #516]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d013      	beq.n	8001c7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff fcda 	bl	800160c <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff fcd6 	bl	800160c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e1fb      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6e:	4b76      	ldr	r3, [pc, #472]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0xc0>
 8001c7a:	e014      	b.n	8001ca6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fcc6 	bl	800160c <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff fcc2 	bl	800160c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e1e7      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c96:	4b6c      	ldr	r3, [pc, #432]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0xe8>
 8001ca2:	e000      	b.n	8001ca6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d063      	beq.n	8001d7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cb2:	4b65      	ldr	r3, [pc, #404]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cbe:	4b62      	ldr	r3, [pc, #392]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d11c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cca:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d116      	bne.n	8001d04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd6:	4b5c      	ldr	r3, [pc, #368]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <HAL_RCC_OscConfig+0x152>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e1bb      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cee:	4956      	ldr	r1, [pc, #344]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	4b55      	ldr	r3, [pc, #340]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d02:	e03a      	b.n	8001d7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d020      	beq.n	8001d4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0c:	4b4f      	ldr	r3, [pc, #316]	; (8001e4c <HAL_RCC_OscConfig+0x2b0>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d12:	f7ff fc7b 	bl	800160c <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1a:	f7ff fc77 	bl	800160c <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e19c      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d38:	4943      	ldr	r1, [pc, #268]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001d3a:	4b43      	ldr	r3, [pc, #268]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	600b      	str	r3, [r1, #0]
 8001d4c:	e015      	b.n	8001d7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4e:	4b3f      	ldr	r3, [pc, #252]	; (8001e4c <HAL_RCC_OscConfig+0x2b0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff fc5a 	bl	800160c <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fc56 	bl	800160c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e17b      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6e:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d030      	beq.n	8001de8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d016      	beq.n	8001dbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8e:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <HAL_RCC_OscConfig+0x2b4>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7ff fc3a 	bl	800160c <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fc36 	bl	800160c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e15b      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dae:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x200>
 8001dba:	e015      	b.n	8001de8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dbc:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <HAL_RCC_OscConfig+0x2b4>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc2:	f7ff fc23 	bl	800160c <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dca:	f7ff fc1f 	bl	800160c <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e144      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f0      	bne.n	8001dca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80a0 	beq.w	8001f36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfa:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10f      	bne.n	8001e26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	4a0f      	ldr	r2, [pc, #60]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e22:	2301      	movs	r3, #1
 8001e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_RCC_OscConfig+0x2b8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d121      	bne.n	8001e76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e32:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <HAL_RCC_OscConfig+0x2b8>)
 8001e34:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <HAL_RCC_OscConfig+0x2b8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3e:	f7ff fbe5 	bl	800160c <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	e011      	b.n	8001e6a <HAL_RCC_OscConfig+0x2ce>
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	42470000 	.word	0x42470000
 8001e50:	42470e80 	.word	0x42470e80
 8001e54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e58:	f7ff fbd8 	bl	800160c <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e0fd      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6a:	4b81      	ldr	r3, [pc, #516]	; (8002070 <HAL_RCC_OscConfig+0x4d4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d106      	bne.n	8001e8c <HAL_RCC_OscConfig+0x2f0>
 8001e7e:	4a7d      	ldr	r2, [pc, #500]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001e80:	4b7c      	ldr	r3, [pc, #496]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8a:	e01c      	b.n	8001ec6 <HAL_RCC_OscConfig+0x32a>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	d10c      	bne.n	8001eae <HAL_RCC_OscConfig+0x312>
 8001e94:	4a77      	ldr	r2, [pc, #476]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001e96:	4b77      	ldr	r3, [pc, #476]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea0:	4a74      	ldr	r2, [pc, #464]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001ea2:	4b74      	ldr	r3, [pc, #464]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8001eac:	e00b      	b.n	8001ec6 <HAL_RCC_OscConfig+0x32a>
 8001eae:	4a71      	ldr	r2, [pc, #452]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001eb0:	4b70      	ldr	r3, [pc, #448]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eba:	4a6e      	ldr	r2, [pc, #440]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001ebc:	4b6d      	ldr	r3, [pc, #436]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec0:	f023 0304 	bic.w	r3, r3, #4
 8001ec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d015      	beq.n	8001efa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ece:	f7ff fb9d 	bl	800160c <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7ff fb99 	bl	800160c <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e0bc      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eec:	4b61      	ldr	r3, [pc, #388]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0ee      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x33a>
 8001ef8:	e014      	b.n	8001f24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efa:	f7ff fb87 	bl	800160c <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f00:	e00a      	b.n	8001f18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7ff fb83 	bl	800160c <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e0a6      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f18:	4b56      	ldr	r3, [pc, #344]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1ee      	bne.n	8001f02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d105      	bne.n	8001f36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f2a:	4a52      	ldr	r2, [pc, #328]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001f2c:	4b51      	ldr	r3, [pc, #324]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 8092 	beq.w	8002064 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f40:	4b4c      	ldr	r3, [pc, #304]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 030c 	and.w	r3, r3, #12
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d05c      	beq.n	8002006 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d141      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f54:	4b48      	ldr	r3, [pc, #288]	; (8002078 <HAL_RCC_OscConfig+0x4dc>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff fb57 	bl	800160c <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f62:	f7ff fb53 	bl	800160c <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e078      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f74:	4b3f      	ldr	r3, [pc, #252]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f0      	bne.n	8001f62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f80:	493c      	ldr	r1, [pc, #240]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69da      	ldr	r2, [r3, #28]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	019b      	lsls	r3, r3, #6
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	085b      	lsrs	r3, r3, #1
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	041b      	lsls	r3, r3, #16
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	061b      	lsls	r3, r3, #24
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001faa:	4b33      	ldr	r3, [pc, #204]	; (8002078 <HAL_RCC_OscConfig+0x4dc>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fb2c 	bl	800160c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff fb28 	bl	800160c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e04d      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fca:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x41c>
 8001fd6:	e045      	b.n	8002064 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd8:	4b27      	ldr	r3, [pc, #156]	; (8002078 <HAL_RCC_OscConfig+0x4dc>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7ff fb15 	bl	800160c <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7ff fb11 	bl	800160c <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e036      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f0      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x44a>
 8002004:	e02e      	b.n	8002064 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e029      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_RCC_OscConfig+0x4d8>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	429a      	cmp	r2, r3
 8002024:	d11c      	bne.n	8002060 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d115      	bne.n	8002060 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800203a:	4013      	ands	r3, r2
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002040:	4293      	cmp	r3, r2
 8002042:	d10d      	bne.n	8002060 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d106      	bne.n	8002060 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40007000 	.word	0x40007000
 8002074:	40023800 	.word	0x40023800
 8002078:	42470060 	.word	0x42470060

0800207c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0cc      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b68      	ldr	r3, [pc, #416]	; (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 020f 	and.w	r2, r3, #15
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d20c      	bcs.n	80020b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b65      	ldr	r3, [pc, #404]	; (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b63      	ldr	r3, [pc, #396]	; (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 020f 	and.w	r2, r3, #15
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0b8      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4a59      	ldr	r2, [pc, #356]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	4b59      	ldr	r3, [pc, #356]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e8:	4a53      	ldr	r2, [pc, #332]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	4b53      	ldr	r3, [pc, #332]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f4:	4950      	ldr	r1, [pc, #320]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	4b50      	ldr	r3, [pc, #320]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d044      	beq.n	800219c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	4b47      	ldr	r3, [pc, #284]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d119      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e07f      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d003      	beq.n	800213a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002136:	2b03      	cmp	r3, #3
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213a:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d109      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e06f      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214a:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e067      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215a:	4937      	ldr	r1, [pc, #220]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	4b36      	ldr	r3, [pc, #216]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f023 0203 	bic.w	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4313      	orrs	r3, r2
 800216a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800216c:	f7ff fa4e 	bl	800160c <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	e00a      	b.n	800218a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002174:	f7ff fa4a 	bl	800160c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e04f      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	4b2b      	ldr	r3, [pc, #172]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 020c 	and.w	r2, r3, #12
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	429a      	cmp	r2, r3
 800219a:	d1eb      	bne.n	8002174 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800219c:	4b25      	ldr	r3, [pc, #148]	; (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 020f 	and.w	r2, r3, #15
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d90c      	bls.n	80021c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b22      	ldr	r3, [pc, #136]	; (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 020f 	and.w	r2, r3, #15
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e032      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d0:	4919      	ldr	r1, [pc, #100]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ee:	4912      	ldr	r1, [pc, #72]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	4b11      	ldr	r3, [pc, #68]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002202:	f000 f821 	bl	8002248 <HAL_RCC_GetSysClockFreq>
 8002206:	4601      	mov	r1, r0
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	4a0a      	ldr	r2, [pc, #40]	; (800223c <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	5cd3      	ldrb	r3, [r2, r3]
 8002216:	fa21 f303 	lsr.w	r3, r1, r3
 800221a:	4a09      	ldr	r2, [pc, #36]	; (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff f9ae 	bl	8001584 <HAL_InitTick>

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023c00 	.word	0x40023c00
 8002238:	40023800 	.word	0x40023800
 800223c:	08005404 	.word	0x08005404
 8002240:	20000000 	.word	0x20000000
 8002244:	20000004 	.word	0x20000004

08002248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800224c:	b087      	sub	sp, #28
 800224e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002250:	2200      	movs	r2, #0
 8002252:	60fa      	str	r2, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	617a      	str	r2, [r7, #20]
 8002258:	2200      	movs	r2, #0
 800225a:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 800225c:	2200      	movs	r2, #0
 800225e:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002260:	4a51      	ldr	r2, [pc, #324]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002262:	6892      	ldr	r2, [r2, #8]
 8002264:	f002 020c 	and.w	r2, r2, #12
 8002268:	2a04      	cmp	r2, #4
 800226a:	d007      	beq.n	800227c <HAL_RCC_GetSysClockFreq+0x34>
 800226c:	2a08      	cmp	r2, #8
 800226e:	d008      	beq.n	8002282 <HAL_RCC_GetSysClockFreq+0x3a>
 8002270:	2a00      	cmp	r2, #0
 8002272:	f040 8090 	bne.w	8002396 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002276:	4b4d      	ldr	r3, [pc, #308]	; (80023ac <HAL_RCC_GetSysClockFreq+0x164>)
 8002278:	613b      	str	r3, [r7, #16]
       break;
 800227a:	e08f      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800227c:	4b4c      	ldr	r3, [pc, #304]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x168>)
 800227e:	613b      	str	r3, [r7, #16]
      break;
 8002280:	e08c      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002282:	4a49      	ldr	r2, [pc, #292]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002284:	6852      	ldr	r2, [r2, #4]
 8002286:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800228a:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800228c:	4a46      	ldr	r2, [pc, #280]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800228e:	6852      	ldr	r2, [r2, #4]
 8002290:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002294:	2a00      	cmp	r2, #0
 8002296:	d023      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002298:	4b43      	ldr	r3, [pc, #268]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	099b      	lsrs	r3, r3, #6
 800229e:	f04f 0400 	mov.w	r4, #0
 80022a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	ea03 0301 	and.w	r3, r3, r1
 80022ae:	ea04 0402 	and.w	r4, r4, r2
 80022b2:	4a3f      	ldr	r2, [pc, #252]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80022b4:	fb02 f104 	mul.w	r1, r2, r4
 80022b8:	2200      	movs	r2, #0
 80022ba:	fb02 f203 	mul.w	r2, r2, r3
 80022be:	440a      	add	r2, r1
 80022c0:	493b      	ldr	r1, [pc, #236]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80022c2:	fba3 0101 	umull	r0, r1, r3, r1
 80022c6:	1853      	adds	r3, r2, r1
 80022c8:	4619      	mov	r1, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f04f 0400 	mov.w	r4, #0
 80022d0:	461a      	mov	r2, r3
 80022d2:	4623      	mov	r3, r4
 80022d4:	f7fe fc1a 	bl	8000b0c <__aeabi_uldivmod>
 80022d8:	4603      	mov	r3, r0
 80022da:	460c      	mov	r4, r1
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	e04c      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e0:	4a31      	ldr	r2, [pc, #196]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80022e2:	6852      	ldr	r2, [r2, #4]
 80022e4:	0992      	lsrs	r2, r2, #6
 80022e6:	4611      	mov	r1, r2
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f240 15ff 	movw	r5, #511	; 0x1ff
 80022f0:	f04f 0600 	mov.w	r6, #0
 80022f4:	ea05 0501 	and.w	r5, r5, r1
 80022f8:	ea06 0602 	and.w	r6, r6, r2
 80022fc:	4629      	mov	r1, r5
 80022fe:	4632      	mov	r2, r6
 8002300:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8002304:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8002308:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 800230c:	4651      	mov	r1, sl
 800230e:	465a      	mov	r2, fp
 8002310:	46aa      	mov	sl, r5
 8002312:	46b3      	mov	fp, r6
 8002314:	4655      	mov	r5, sl
 8002316:	465e      	mov	r6, fp
 8002318:	1b4d      	subs	r5, r1, r5
 800231a:	eb62 0606 	sbc.w	r6, r2, r6
 800231e:	4629      	mov	r1, r5
 8002320:	4632      	mov	r2, r6
 8002322:	0194      	lsls	r4, r2, #6
 8002324:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002328:	018b      	lsls	r3, r1, #6
 800232a:	1a5b      	subs	r3, r3, r1
 800232c:	eb64 0402 	sbc.w	r4, r4, r2
 8002330:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002334:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002338:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800233c:	4643      	mov	r3, r8
 800233e:	464c      	mov	r4, r9
 8002340:	4655      	mov	r5, sl
 8002342:	465e      	mov	r6, fp
 8002344:	18ed      	adds	r5, r5, r3
 8002346:	eb46 0604 	adc.w	r6, r6, r4
 800234a:	462b      	mov	r3, r5
 800234c:	4634      	mov	r4, r6
 800234e:	02a2      	lsls	r2, r4, #10
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	029b      	lsls	r3, r3, #10
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002362:	4618      	mov	r0, r3
 8002364:	4621      	mov	r1, r4
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f04f 0400 	mov.w	r4, #0
 800236c:	461a      	mov	r2, r3
 800236e:	4623      	mov	r3, r4
 8002370:	f7fe fbcc 	bl	8000b0c <__aeabi_uldivmod>
 8002374:	4603      	mov	r3, r0
 8002376:	460c      	mov	r4, r1
 8002378:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800237a:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	0c1b      	lsrs	r3, r3, #16
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	3301      	adds	r3, #1
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002392:	613b      	str	r3, [r7, #16]
      break;
 8002394:	e002      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002396:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_RCC_GetSysClockFreq+0x164>)
 8002398:	613b      	str	r3, [r7, #16]
      break;
 800239a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800239c:	693b      	ldr	r3, [r7, #16]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	371c      	adds	r7, #28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023a8:	40023800 	.word	0x40023800
 80023ac:	00f42400 	.word	0x00f42400
 80023b0:	017d7840 	.word	0x017d7840

080023b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20000000 	.word	0x20000000

080023cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023d0:	f7ff fff0 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023d4:	4601      	mov	r1, r0
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	0a9b      	lsrs	r3, r3, #10
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4a03      	ldr	r2, [pc, #12]	; (80023f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e2:	5cd3      	ldrb	r3, [r2, r3]
 80023e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	08005414 	.word	0x08005414

080023f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023f8:	f7ff ffdc 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023fc:	4601      	mov	r1, r0
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	0b5b      	lsrs	r3, r3, #13
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	4a03      	ldr	r2, [pc, #12]	; (8002418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800240a:	5cd3      	ldrb	r3, [r2, r3]
 800240c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40023800 	.word	0x40023800
 8002418:	08005414 	.word	0x08005414

0800241c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e055      	b.n	80024da <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d106      	bne.n	800244e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7fe ff53 	bl	80012f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2202      	movs	r2, #2
 8002452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002464:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6851      	ldr	r1, [r2, #4]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6892      	ldr	r2, [r2, #8]
 8002472:	4311      	orrs	r1, r2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68d2      	ldr	r2, [r2, #12]
 8002478:	4311      	orrs	r1, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6912      	ldr	r2, [r2, #16]
 800247e:	4311      	orrs	r1, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6952      	ldr	r2, [r2, #20]
 8002484:	4311      	orrs	r1, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6992      	ldr	r2, [r2, #24]
 800248a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800248e:	4311      	orrs	r1, r2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	69d2      	ldr	r2, [r2, #28]
 8002494:	4311      	orrs	r1, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6a12      	ldr	r2, [r2, #32]
 800249a:	4311      	orrs	r1, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80024a0:	430a      	orrs	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6992      	ldr	r2, [r2, #24]
 80024ac:	0c12      	lsrs	r2, r2, #16
 80024ae:	f002 0104 	and.w	r1, r2, #4
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024b6:	430a      	orrs	r2, r1
 80024b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	69d2      	ldr	r2, [r2, #28]
 80024c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b08c      	sub	sp, #48	; 0x30
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024f0:	2301      	movs	r3, #1
 80024f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_SPI_TransmitReceive+0x26>
 8002504:	2302      	movs	r3, #2
 8002506:	e188      	b.n	800281a <HAL_SPI_TransmitReceive+0x338>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002510:	f7ff f87c 	bl	800160c <HAL_GetTick>
 8002514:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800251c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002526:	887b      	ldrh	r3, [r7, #2]
 8002528:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800252a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800252e:	2b01      	cmp	r3, #1
 8002530:	d00f      	beq.n	8002552 <HAL_SPI_TransmitReceive+0x70>
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002538:	d107      	bne.n	800254a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d103      	bne.n	800254a <HAL_SPI_TransmitReceive+0x68>
 8002542:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002546:	2b04      	cmp	r3, #4
 8002548:	d003      	beq.n	8002552 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800254a:	2302      	movs	r3, #2
 800254c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002550:	e159      	b.n	8002806 <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_SPI_TransmitReceive+0x82>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_SPI_TransmitReceive+0x82>
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d103      	bne.n	800256c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800256a:	e14c      	b.n	8002806 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b04      	cmp	r3, #4
 8002576:	d003      	beq.n	8002580 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2205      	movs	r2, #5
 800257c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	887a      	ldrh	r2, [r7, #2]
 8002596:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	887a      	ldrh	r2, [r7, #2]
 80025a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d007      	beq.n	80025d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025dc:	d178      	bne.n	80026d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <HAL_SPI_TransmitReceive+0x10a>
 80025e6:	8b7b      	ldrh	r3, [r7, #26]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d166      	bne.n	80026ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025f4:	8812      	ldrh	r2, [r2, #0]
 80025f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	1c9a      	adds	r2, r3, #2
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002610:	e053      	b.n	80026ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b02      	cmp	r3, #2
 800261e:	d11b      	bne.n	8002658 <HAL_SPI_TransmitReceive+0x176>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d016      	beq.n	8002658 <HAL_SPI_TransmitReceive+0x176>
 800262a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262c:	2b01      	cmp	r3, #1
 800262e:	d113      	bne.n	8002658 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002638:	8812      	ldrh	r2, [r2, #0]
 800263a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	1c9a      	adds	r2, r3, #2
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b01      	cmp	r3, #1
 8002664:	d119      	bne.n	800269a <HAL_SPI_TransmitReceive+0x1b8>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d014      	beq.n	800269a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	68d2      	ldr	r2, [r2, #12]
 800267a:	b292      	uxth	r2, r2
 800267c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002682:	1c9a      	adds	r2, r3, #2
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800268c:	b29b      	uxth	r3, r3
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002696:	2301      	movs	r3, #1
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800269a:	f7fe ffb7 	bl	800160c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	1ad2      	subs	r2, r2, r3
 80026a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d307      	bcc.n	80026ba <HAL_SPI_TransmitReceive+0x1d8>
 80026aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d003      	beq.n	80026ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026b8:	e0a5      	b.n	8002806 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1a6      	bne.n	8002612 <HAL_SPI_TransmitReceive+0x130>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1a1      	bne.n	8002612 <HAL_SPI_TransmitReceive+0x130>
 80026ce:	e07c      	b.n	80027ca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <HAL_SPI_TransmitReceive+0x1fc>
 80026d8:	8b7b      	ldrh	r3, [r7, #26]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d16b      	bne.n	80027b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	330c      	adds	r3, #12
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026e8:	7812      	ldrb	r2, [r2, #0]
 80026ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002704:	e057      	b.n	80027b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b02      	cmp	r3, #2
 8002712:	d11c      	bne.n	800274e <HAL_SPI_TransmitReceive+0x26c>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d017      	beq.n	800274e <HAL_SPI_TransmitReceive+0x26c>
 800271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002720:	2b01      	cmp	r3, #1
 8002722:	d114      	bne.n	800274e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	330c      	adds	r3, #12
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800272e:	7812      	ldrb	r2, [r2, #0]
 8002730:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800274a:	2300      	movs	r3, #0
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d119      	bne.n	8002790 <HAL_SPI_TransmitReceive+0x2ae>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d014      	beq.n	8002790 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	68d2      	ldr	r2, [r2, #12]
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800278c:	2301      	movs	r3, #1
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002790:	f7fe ff3c 	bl	800160c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	1ad2      	subs	r2, r2, r3
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	429a      	cmp	r2, r3
 800279e:	d303      	bcc.n	80027a8 <HAL_SPI_TransmitReceive+0x2c6>
 80027a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a6:	d102      	bne.n	80027ae <HAL_SPI_TransmitReceive+0x2cc>
 80027a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d103      	bne.n	80027b6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80027b4:	e027      	b.n	8002806 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1a2      	bne.n	8002706 <HAL_SPI_TransmitReceive+0x224>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d19d      	bne.n	8002706 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 f892 	bl	80028f8 <SPI_EndRxTxTransaction>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d006      	beq.n	80027e8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2220      	movs	r2, #32
 80027e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80027e6:	e00e      	b.n	8002806 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002816:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800281a:	4618      	mov	r0, r3
 800281c:	3730      	adds	r7, #48	; 0x30
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	603b      	str	r3, [r7, #0]
 800282e:	4613      	mov	r3, r2
 8002830:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002832:	e04c      	b.n	80028ce <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283a:	d048      	beq.n	80028ce <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800283c:	f7fe fee6 	bl	800160c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	1ad2      	subs	r2, r2, r3
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d202      	bcs.n	8002852 <SPI_WaitFlagStateUntilTimeout+0x30>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d13d      	bne.n	80028ce <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	6852      	ldr	r2, [r2, #4]
 800285c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002860:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800286a:	d111      	bne.n	8002890 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002874:	d004      	beq.n	8002880 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287e:	d107      	bne.n	8002890 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800288e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002898:	d10f      	bne.n	80028ba <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	6812      	ldr	r2, [r2, #0]
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e00f      	b.n	80028ee <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	401a      	ands	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	429a      	cmp	r2, r3
 80028dc:	bf0c      	ite	eq
 80028de:	2301      	moveq	r3, #1
 80028e0:	2300      	movne	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d1a3      	bne.n	8002834 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002904:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <SPI_EndRxTxTransaction+0x7c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a1b      	ldr	r2, [pc, #108]	; (8002978 <SPI_EndRxTxTransaction+0x80>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	0d5b      	lsrs	r3, r3, #21
 8002910:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002914:	fb02 f303 	mul.w	r3, r2, r3
 8002918:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002922:	d112      	bne.n	800294a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2200      	movs	r2, #0
 800292c:	2180      	movs	r1, #128	; 0x80
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f7ff ff77 	bl	8002822 <SPI_WaitFlagStateUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d016      	beq.n	8002968 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293e:	f043 0220 	orr.w	r2, r3, #32
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e00f      	b.n	800296a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	3b01      	subs	r3, #1
 8002954:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002960:	2b80      	cmp	r3, #128	; 0x80
 8002962:	d0f2      	beq.n	800294a <SPI_EndRxTxTransaction+0x52>
 8002964:	e000      	b.n	8002968 <SPI_EndRxTxTransaction+0x70>
        break;
 8002966:	bf00      	nop
  }

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000000 	.word	0x20000000
 8002978:	165e9f81 	.word	0x165e9f81

0800297c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e03f      	b.n	8002a0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fe fd84 	bl	80014b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2224      	movs	r2, #36	; 0x24
 80029ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	68d2      	ldr	r2, [r2, #12]
 80029ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f90b 	bl	8002bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	6912      	ldr	r2, [r2, #16]
 80029d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	6952      	ldr	r2, [r2, #20]
 80029e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	68d2      	ldr	r2, [r2, #12]
 80029f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b088      	sub	sp, #32
 8002a1a:	af02      	add	r7, sp, #8
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	603b      	str	r3, [r7, #0]
 8002a22:	4613      	mov	r3, r2
 8002a24:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	f040 8082 	bne.w	8002b3c <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <HAL_UART_Transmit+0x2e>
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e07a      	b.n	8002b3e <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_UART_Transmit+0x40>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e073      	b.n	8002b3e <HAL_UART_Transmit+0x128>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2221      	movs	r2, #33	; 0x21
 8002a68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a6c:	f7fe fdce 	bl	800160c <HAL_GetTick>
 8002a70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	88fa      	ldrh	r2, [r7, #6]
 8002a76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	88fa      	ldrh	r2, [r7, #6]
 8002a7c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002a86:	e041      	b.n	8002b0c <HAL_UART_Transmit+0xf6>
    {
      huart->TxXferCount--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9e:	d121      	bne.n	8002ae4 <HAL_UART_Transmit+0xce>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f84b 	bl	8002b46 <UART_WaitOnFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e041      	b.n	8002b3e <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	8812      	ldrh	r2, [r2, #0]
 8002ac6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aca:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d103      	bne.n	8002adc <HAL_UART_Transmit+0xc6>
        {
          pData += 2U;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	e017      	b.n	8002b0c <HAL_UART_Transmit+0xf6>
        }
        else
        {
          pData += 1U;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	e013      	b.n	8002b0c <HAL_UART_Transmit+0xf6>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2200      	movs	r2, #0
 8002aec:	2180      	movs	r1, #128	; 0x80
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f829 	bl	8002b46 <UART_WaitOnFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_UART_Transmit+0xe8>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e01f      	b.n	8002b3e <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1c59      	adds	r1, r3, #1
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1b8      	bne.n	8002a88 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2140      	movs	r1, #64	; 0x40
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f810 	bl	8002b46 <UART_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_UART_Transmit+0x11a>
    {
      return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e006      	b.n	8002b3e <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e000      	b.n	8002b3e <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8002b3c:	2302      	movs	r3, #2
  }
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	603b      	str	r3, [r7, #0]
 8002b52:	4613      	mov	r3, r2
 8002b54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b56:	e02c      	b.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5e:	d028      	beq.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d007      	beq.n	8002b76 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b66:	f7fe fd51 	bl	800160c <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	1ad2      	subs	r2, r2, r3
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d91d      	bls.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	6812      	ldr	r2, [r2, #0]
 8002b7e:	68d2      	ldr	r2, [r2, #12]
 8002b80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b84:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	6952      	ldr	r2, [r2, #20]
 8002b90:	f022 0201 	bic.w	r2, r2, #1
 8002b94:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e00f      	b.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	401a      	ands	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	bf0c      	ite	eq
 8002bc2:	2301      	moveq	r3, #1
 8002bc4:	2300      	movne	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d0c3      	beq.n	8002b58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002be0:	b0a3      	sub	sp, #140	; 0x8c
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	67f8      	str	r0, [r7, #124]	; 0x7c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002be6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002be8:	6819      	ldr	r1, [r3, #0]
 8002bea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	431a      	orrs	r2, r3
 8002c06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MODIFY_REG(huart->Instance->CR1,
 8002c16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c18:	6819      	ldr	r1, [r3, #0]
 8002c1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8002c24:	f022 020c 	bic.w	r2, r2, #12
 8002c28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c32:	6819      	ldr	r1, [r3, #0]
 8002c34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	614b      	str	r3, [r1, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c4e:	f040 8171 	bne.w	8002f34 <UART_SetConfig+0x358>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4ab4      	ldr	r2, [pc, #720]	; (8002f28 <UART_SetConfig+0x34c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d005      	beq.n	8002c68 <UART_SetConfig+0x8c>
 8002c5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4ab2      	ldr	r2, [pc, #712]	; (8002f2c <UART_SetConfig+0x350>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	f040 80b1 	bne.w	8002dca <UART_SetConfig+0x1ee>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c68:	f7ff fbc4 	bl	80023f4 <HAL_RCC_GetPCLK2Freq>
 8002c6c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c72:	681d      	ldr	r5, [r3, #0]
 8002c74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4614      	mov	r4, r2
 8002c82:	18db      	adds	r3, r3, r3
 8002c84:	eb44 0404 	adc.w	r4, r4, r4
 8002c88:	185b      	adds	r3, r3, r1
 8002c8a:	eb44 0402 	adc.w	r4, r4, r2
 8002c8e:	00e0      	lsls	r0, r4, #3
 8002c90:	6478      	str	r0, [r7, #68]	; 0x44
 8002c92:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002c94:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002c98:	6478      	str	r0, [r7, #68]	; 0x44
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8002c9e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002ca2:	eb13 0801 	adds.w	r8, r3, r1
 8002ca6:	eb44 0902 	adc.w	r9, r4, r2
 8002caa:	4640      	mov	r0, r8
 8002cac:	4649      	mov	r1, r9
 8002cae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f04f 0400 	mov.w	r4, #0
 8002cb6:	18db      	adds	r3, r3, r3
 8002cb8:	eb44 0404 	adc.w	r4, r4, r4
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4623      	mov	r3, r4
 8002cc0:	f7fd ff24 	bl	8000b0c <__aeabi_uldivmod>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	460c      	mov	r4, r1
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b99      	ldr	r3, [pc, #612]	; (8002f30 <UART_SetConfig+0x354>)
 8002ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	011e      	lsls	r6, r3, #4
 8002cd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4614      	mov	r4, r2
 8002ce2:	18db      	adds	r3, r3, r3
 8002ce4:	eb44 0404 	adc.w	r4, r4, r4
 8002ce8:	185b      	adds	r3, r3, r1
 8002cea:	eb44 0402 	adc.w	r4, r4, r2
 8002cee:	00e0      	lsls	r0, r4, #3
 8002cf0:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002cf2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002cf4:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002cf8:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cfe:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002d02:	eb13 0801 	adds.w	r8, r3, r1
 8002d06:	eb44 0902 	adc.w	r9, r4, r2
 8002d0a:	4640      	mov	r0, r8
 8002d0c:	4649      	mov	r1, r9
 8002d0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f04f 0400 	mov.w	r4, #0
 8002d16:	18db      	adds	r3, r3, r3
 8002d18:	eb44 0404 	adc.w	r4, r4, r4
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4623      	mov	r3, r4
 8002d20:	f7fd fef4 	bl	8000b0c <__aeabi_uldivmod>
 8002d24:	4603      	mov	r3, r0
 8002d26:	460c      	mov	r4, r1
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4b81      	ldr	r3, [pc, #516]	; (8002f30 <UART_SetConfig+0x354>)
 8002d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	2164      	movs	r1, #100	; 0x64
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	3332      	adds	r3, #50	; 0x32
 8002d3e:	4a7c      	ldr	r2, [pc, #496]	; (8002f30 <UART_SetConfig+0x354>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	095b      	lsrs	r3, r3, #5
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d4c:	441e      	add	r6, r3
 8002d4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d52:	4619      	mov	r1, r3
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4614      	mov	r4, r2
 8002d5c:	18db      	adds	r3, r3, r3
 8002d5e:	eb44 0404 	adc.w	r4, r4, r4
 8002d62:	185b      	adds	r3, r3, r1
 8002d64:	eb44 0402 	adc.w	r4, r4, r2
 8002d68:	00e0      	lsls	r0, r4, #3
 8002d6a:	6378      	str	r0, [r7, #52]	; 0x34
 8002d6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d6e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002d72:	6378      	str	r0, [r7, #52]	; 0x34
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	633b      	str	r3, [r7, #48]	; 0x30
 8002d78:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002d7c:	eb13 0801 	adds.w	r8, r3, r1
 8002d80:	eb44 0902 	adc.w	r9, r4, r2
 8002d84:	4640      	mov	r0, r8
 8002d86:	4649      	mov	r1, r9
 8002d88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f04f 0400 	mov.w	r4, #0
 8002d90:	18db      	adds	r3, r3, r3
 8002d92:	eb44 0404 	adc.w	r4, r4, r4
 8002d96:	461a      	mov	r2, r3
 8002d98:	4623      	mov	r3, r4
 8002d9a:	f7fd feb7 	bl	8000b0c <__aeabi_uldivmod>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	460c      	mov	r4, r1
 8002da2:	461a      	mov	r2, r3
 8002da4:	4b62      	ldr	r3, [pc, #392]	; (8002f30 <UART_SetConfig+0x354>)
 8002da6:	fba3 1302 	umull	r1, r3, r3, r2
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	2164      	movs	r1, #100	; 0x64
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	3332      	adds	r3, #50	; 0x32
 8002db8:	4a5d      	ldr	r2, [pc, #372]	; (8002f30 <UART_SetConfig+0x354>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	4433      	add	r3, r6
 8002dc6:	60ab      	str	r3, [r5, #8]
 8002dc8:	e240      	b.n	800324c <UART_SetConfig+0x670>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dca:	f7ff faff 	bl	80023cc <HAL_RCC_GetPCLK1Freq>
 8002dce:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	673a      	str	r2, [r7, #112]	; 0x70
 8002dd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4614      	mov	r4, r2
 8002de6:	18db      	adds	r3, r3, r3
 8002de8:	eb44 0404 	adc.w	r4, r4, r4
 8002dec:	185b      	adds	r3, r3, r1
 8002dee:	eb44 0402 	adc.w	r4, r4, r2
 8002df2:	00e0      	lsls	r0, r4, #3
 8002df4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002df6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002df8:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002dfc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e02:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002e06:	185d      	adds	r5, r3, r1
 8002e08:	eb44 0602 	adc.w	r6, r4, r2
 8002e0c:	4628      	mov	r0, r5
 8002e0e:	4631      	mov	r1, r6
 8002e10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f04f 0400 	mov.w	r4, #0
 8002e18:	18db      	adds	r3, r3, r3
 8002e1a:	eb44 0404 	adc.w	r4, r4, r4
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4623      	mov	r3, r4
 8002e22:	f7fd fe73 	bl	8000b0c <__aeabi_uldivmod>
 8002e26:	4603      	mov	r3, r0
 8002e28:	460c      	mov	r4, r1
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4b40      	ldr	r3, [pc, #256]	; (8002f30 <UART_SetConfig+0x354>)
 8002e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	011e      	lsls	r6, r3, #4
 8002e36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4614      	mov	r4, r2
 8002e44:	18db      	adds	r3, r3, r3
 8002e46:	eb44 0404 	adc.w	r4, r4, r4
 8002e4a:	185b      	adds	r3, r3, r1
 8002e4c:	eb44 0402 	adc.w	r4, r4, r2
 8002e50:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8002e54:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8002e58:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8002e5c:	4653      	mov	r3, sl
 8002e5e:	465c      	mov	r4, fp
 8002e60:	eb13 0a01 	adds.w	sl, r3, r1
 8002e64:	eb44 0b02 	adc.w	fp, r4, r2
 8002e68:	4650      	mov	r0, sl
 8002e6a:	4659      	mov	r1, fp
 8002e6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f04f 0400 	mov.w	r4, #0
 8002e74:	18db      	adds	r3, r3, r3
 8002e76:	eb44 0404 	adc.w	r4, r4, r4
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	4623      	mov	r3, r4
 8002e7e:	f7fd fe45 	bl	8000b0c <__aeabi_uldivmod>
 8002e82:	4603      	mov	r3, r0
 8002e84:	460c      	mov	r4, r1
 8002e86:	461a      	mov	r2, r3
 8002e88:	4b29      	ldr	r3, [pc, #164]	; (8002f30 <UART_SetConfig+0x354>)
 8002e8a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	2164      	movs	r1, #100	; 0x64
 8002e92:	fb01 f303 	mul.w	r3, r1, r3
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	3332      	adds	r3, #50	; 0x32
 8002e9c:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <UART_SetConfig+0x354>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002eaa:	441e      	add	r6, r3
 8002eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4614      	mov	r4, r2
 8002eba:	18db      	adds	r3, r3, r3
 8002ebc:	eb44 0404 	adc.w	r4, r4, r4
 8002ec0:	185b      	adds	r3, r3, r1
 8002ec2:	eb44 0402 	adc.w	r4, r4, r2
 8002ec6:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002eca:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002ece:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002ed2:	4643      	mov	r3, r8
 8002ed4:	464c      	mov	r4, r9
 8002ed6:	eb13 0801 	adds.w	r8, r3, r1
 8002eda:	eb44 0902 	adc.w	r9, r4, r2
 8002ede:	4640      	mov	r0, r8
 8002ee0:	4649      	mov	r1, r9
 8002ee2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f04f 0400 	mov.w	r4, #0
 8002eea:	18db      	adds	r3, r3, r3
 8002eec:	eb44 0404 	adc.w	r4, r4, r4
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4623      	mov	r3, r4
 8002ef4:	f7fd fe0a 	bl	8000b0c <__aeabi_uldivmod>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	460c      	mov	r4, r1
 8002efc:	461a      	mov	r2, r3
 8002efe:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <UART_SetConfig+0x354>)
 8002f00:	fba3 1302 	umull	r1, r3, r3, r2
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	2164      	movs	r1, #100	; 0x64
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	3332      	adds	r3, #50	; 0x32
 8002f12:	4a07      	ldr	r2, [pc, #28]	; (8002f30 <UART_SetConfig+0x354>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	4433      	add	r3, r6
 8002f20:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002f22:	6093      	str	r3, [r2, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002f24:	e192      	b.n	800324c <UART_SetConfig+0x670>
 8002f26:	bf00      	nop
 8002f28:	40011000 	.word	0x40011000
 8002f2c:	40011400 	.word	0x40011400
 8002f30:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4bc1      	ldr	r3, [pc, #772]	; (8003240 <UART_SetConfig+0x664>)
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d005      	beq.n	8002f4a <UART_SetConfig+0x36e>
 8002f3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4bc0      	ldr	r3, [pc, #768]	; (8003244 <UART_SetConfig+0x668>)
 8002f44:	429a      	cmp	r2, r3
 8002f46:	f040 80bf 	bne.w	80030c8 <UART_SetConfig+0x4ec>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f4a:	f7ff fa53 	bl	80023f4 <HAL_RCC_GetPCLK2Freq>
 8002f4e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f54:	681e      	ldr	r6, [r3, #0]
 8002f56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4614      	mov	r4, r2
 8002f64:	18db      	adds	r3, r3, r3
 8002f66:	eb44 0404 	adc.w	r4, r4, r4
 8002f6a:	185b      	adds	r3, r3, r1
 8002f6c:	eb44 0402 	adc.w	r4, r4, r2
 8002f70:	00e0      	lsls	r0, r4, #3
 8002f72:	6278      	str	r0, [r7, #36]	; 0x24
 8002f74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f76:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002f7a:	6278      	str	r0, [r7, #36]	; 0x24
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	623b      	str	r3, [r7, #32]
 8002f80:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002f84:	eb13 0801 	adds.w	r8, r3, r1
 8002f88:	eb44 0902 	adc.w	r9, r4, r2
 8002f8c:	4640      	mov	r0, r8
 8002f8e:	4649      	mov	r1, r9
 8002f90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f04f 0400 	mov.w	r4, #0
 8002f98:	00a2      	lsls	r2, r4, #2
 8002f9a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f9e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002fa2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fa8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fac:	f7fd fdae 	bl	8000b0c <__aeabi_uldivmod>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	460c      	mov	r4, r1
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4ba4      	ldr	r3, [pc, #656]	; (8003248 <UART_SetConfig+0x66c>)
 8002fb8:	fba3 2302 	umull	r2, r3, r3, r2
 8002fbc:	095b      	lsrs	r3, r3, #5
 8002fbe:	011d      	lsls	r5, r3, #4
 8002fc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4614      	mov	r4, r2
 8002fce:	18db      	adds	r3, r3, r3
 8002fd0:	eb44 0404 	adc.w	r4, r4, r4
 8002fd4:	185b      	adds	r3, r3, r1
 8002fd6:	eb44 0402 	adc.w	r4, r4, r2
 8002fda:	00e0      	lsls	r0, r4, #3
 8002fdc:	61f8      	str	r0, [r7, #28]
 8002fde:	69f8      	ldr	r0, [r7, #28]
 8002fe0:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002fe4:	61f8      	str	r0, [r7, #28]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002fee:	eb13 0801 	adds.w	r8, r3, r1
 8002ff2:	eb44 0902 	adc.w	r9, r4, r2
 8002ff6:	4640      	mov	r0, r8
 8002ff8:	4649      	mov	r1, r9
 8002ffa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f04f 0400 	mov.w	r4, #0
 8003002:	00a2      	lsls	r2, r4, #2
 8003004:	657a      	str	r2, [r7, #84]	; 0x54
 8003006:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003008:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800300c:	657a      	str	r2, [r7, #84]	; 0x54
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	653b      	str	r3, [r7, #80]	; 0x50
 8003012:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003016:	f7fd fd79 	bl	8000b0c <__aeabi_uldivmod>
 800301a:	4603      	mov	r3, r0
 800301c:	460c      	mov	r4, r1
 800301e:	461a      	mov	r2, r3
 8003020:	4b89      	ldr	r3, [pc, #548]	; (8003248 <UART_SetConfig+0x66c>)
 8003022:	fba3 1302 	umull	r1, r3, r3, r2
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	2164      	movs	r1, #100	; 0x64
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	3332      	adds	r3, #50	; 0x32
 8003034:	4a84      	ldr	r2, [pc, #528]	; (8003248 <UART_SetConfig+0x66c>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003040:	441d      	add	r5, r3
 8003042:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003046:	4619      	mov	r1, r3
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	460b      	mov	r3, r1
 800304e:	4614      	mov	r4, r2
 8003050:	18db      	adds	r3, r3, r3
 8003052:	eb44 0404 	adc.w	r4, r4, r4
 8003056:	185b      	adds	r3, r3, r1
 8003058:	eb44 0402 	adc.w	r4, r4, r2
 800305c:	00e0      	lsls	r0, r4, #3
 800305e:	6178      	str	r0, [r7, #20]
 8003060:	6978      	ldr	r0, [r7, #20]
 8003062:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003066:	6178      	str	r0, [r7, #20]
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003070:	eb13 0801 	adds.w	r8, r3, r1
 8003074:	eb44 0902 	adc.w	r9, r4, r2
 8003078:	4640      	mov	r0, r8
 800307a:	4649      	mov	r1, r9
 800307c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f04f 0400 	mov.w	r4, #0
 8003084:	00a2      	lsls	r2, r4, #2
 8003086:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003088:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800308a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800308e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	64bb      	str	r3, [r7, #72]	; 0x48
 8003094:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003098:	f7fd fd38 	bl	8000b0c <__aeabi_uldivmod>
 800309c:	4603      	mov	r3, r0
 800309e:	460c      	mov	r4, r1
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b69      	ldr	r3, [pc, #420]	; (8003248 <UART_SetConfig+0x66c>)
 80030a4:	fba3 1302 	umull	r1, r3, r3, r2
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	2164      	movs	r1, #100	; 0x64
 80030ac:	fb01 f303 	mul.w	r3, r1, r3
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	3332      	adds	r3, #50	; 0x32
 80030b6:	4a64      	ldr	r2, [pc, #400]	; (8003248 <UART_SetConfig+0x66c>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	095b      	lsrs	r3, r3, #5
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	442b      	add	r3, r5
 80030c4:	60b3      	str	r3, [r6, #8]
 80030c6:	e0c1      	b.n	800324c <UART_SetConfig+0x670>
      pclk = HAL_RCC_GetPCLK1Freq();
 80030c8:	f7ff f980 	bl	80023cc <HAL_RCC_GetPCLK1Freq>
 80030cc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80030d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030da:	4619      	mov	r1, r3
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4614      	mov	r4, r2
 80030e4:	18db      	adds	r3, r3, r3
 80030e6:	eb44 0404 	adc.w	r4, r4, r4
 80030ea:	185b      	adds	r3, r3, r1
 80030ec:	eb44 0402 	adc.w	r4, r4, r2
 80030f0:	00e6      	lsls	r6, r4, #3
 80030f2:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 80030f6:	00dd      	lsls	r5, r3, #3
 80030f8:	462b      	mov	r3, r5
 80030fa:	4634      	mov	r4, r6
 80030fc:	185d      	adds	r5, r3, r1
 80030fe:	eb44 0602 	adc.w	r6, r4, r2
 8003102:	4628      	mov	r0, r5
 8003104:	4631      	mov	r1, r6
 8003106:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f04f 0400 	mov.w	r4, #0
 800310e:	00a5      	lsls	r5, r4, #2
 8003110:	677d      	str	r5, [r7, #116]	; 0x74
 8003112:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 8003114:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8003118:	677d      	str	r5, [r7, #116]	; 0x74
 800311a:	009c      	lsls	r4, r3, #2
 800311c:	673c      	str	r4, [r7, #112]	; 0x70
 800311e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003122:	f7fd fcf3 	bl	8000b0c <__aeabi_uldivmod>
 8003126:	4603      	mov	r3, r0
 8003128:	460c      	mov	r4, r1
 800312a:	461a      	mov	r2, r3
 800312c:	4b46      	ldr	r3, [pc, #280]	; (8003248 <UART_SetConfig+0x66c>)
 800312e:	fba3 1302 	umull	r1, r3, r3, r2
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	011d      	lsls	r5, r3, #4
 8003136:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800313a:	4619      	mov	r1, r3
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	460b      	mov	r3, r1
 8003142:	4614      	mov	r4, r2
 8003144:	18db      	adds	r3, r3, r3
 8003146:	eb44 0404 	adc.w	r4, r4, r4
 800314a:	185b      	adds	r3, r3, r1
 800314c:	eb44 0402 	adc.w	r4, r4, r2
 8003150:	00e0      	lsls	r0, r4, #3
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	00d8      	lsls	r0, r3, #3
 800315e:	60b8      	str	r0, [r7, #8]
 8003160:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003164:	eb13 0801 	adds.w	r8, r3, r1
 8003168:	eb44 0902 	adc.w	r9, r4, r2
 800316c:	4640      	mov	r0, r8
 800316e:	4649      	mov	r1, r9
 8003170:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f04f 0400 	mov.w	r4, #0
 8003178:	00a6      	lsls	r6, r4, #2
 800317a:	66fe      	str	r6, [r7, #108]	; 0x6c
 800317c:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 800317e:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8003182:	66fe      	str	r6, [r7, #108]	; 0x6c
 8003184:	009c      	lsls	r4, r3, #2
 8003186:	66bc      	str	r4, [r7, #104]	; 0x68
 8003188:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800318c:	f7fd fcbe 	bl	8000b0c <__aeabi_uldivmod>
 8003190:	4603      	mov	r3, r0
 8003192:	460c      	mov	r4, r1
 8003194:	461a      	mov	r2, r3
 8003196:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <UART_SetConfig+0x66c>)
 8003198:	fba3 1302 	umull	r1, r3, r3, r2
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	2164      	movs	r1, #100	; 0x64
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	3332      	adds	r3, #50	; 0x32
 80031aa:	4a27      	ldr	r2, [pc, #156]	; (8003248 <UART_SetConfig+0x66c>)
 80031ac:	fba2 1303 	umull	r1, r3, r2, r3
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b6:	441d      	add	r5, r3
 80031b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031bc:	4619      	mov	r1, r3
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4614      	mov	r4, r2
 80031c6:	18db      	adds	r3, r3, r3
 80031c8:	eb44 0404 	adc.w	r4, r4, r4
 80031cc:	185b      	adds	r3, r3, r1
 80031ce:	eb44 0402 	adc.w	r4, r4, r2
 80031d2:	00e0      	lsls	r0, r4, #3
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	00d8      	lsls	r0, r3, #3
 80031e0:	6038      	str	r0, [r7, #0]
 80031e2:	e897 0018 	ldmia.w	r7, {r3, r4}
 80031e6:	eb13 0801 	adds.w	r8, r3, r1
 80031ea:	eb44 0902 	adc.w	r9, r4, r2
 80031ee:	4640      	mov	r0, r8
 80031f0:	4649      	mov	r1, r9
 80031f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f04f 0400 	mov.w	r4, #0
 80031fa:	00a6      	lsls	r6, r4, #2
 80031fc:	667e      	str	r6, [r7, #100]	; 0x64
 80031fe:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 8003200:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8003204:	667e      	str	r6, [r7, #100]	; 0x64
 8003206:	009c      	lsls	r4, r3, #2
 8003208:	663c      	str	r4, [r7, #96]	; 0x60
 800320a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800320e:	f7fd fc7d 	bl	8000b0c <__aeabi_uldivmod>
 8003212:	4603      	mov	r3, r0
 8003214:	460c      	mov	r4, r1
 8003216:	461a      	mov	r2, r3
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <UART_SetConfig+0x66c>)
 800321a:	fba3 1302 	umull	r1, r3, r3, r2
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	2164      	movs	r1, #100	; 0x64
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	3332      	adds	r3, #50	; 0x32
 800322c:	4a06      	ldr	r2, [pc, #24]	; (8003248 <UART_SetConfig+0x66c>)
 800322e:	fba2 1303 	umull	r1, r3, r2, r3
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	f003 030f 	and.w	r3, r3, #15
 8003238:	442b      	add	r3, r5
 800323a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800323c:	6093      	str	r3, [r2, #8]
}
 800323e:	e005      	b.n	800324c <UART_SetConfig+0x670>
 8003240:	40011000 	.word	0x40011000
 8003244:	40011400 	.word	0x40011400
 8003248:	51eb851f 	.word	0x51eb851f
 800324c:	bf00      	nop
 800324e:	378c      	adds	r7, #140	; 0x8c
 8003250:	46bd      	mov	sp, r7
 8003252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003256:	bf00      	nop

08003258 <PCF2123_init>:

static uint8_t _to_bcd(uint8_t data);
static uint8_t _from_bcd(uint8_t bcd);

int PCF2123_init(pcf2123_t *pcf, spi_xfer spi_xfer, control_ce control_ce)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
	pcf->control_ce_cb = control_ce;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	605a      	str	r2, [r3, #4]
	pcf->spi_xfer_cb = spi_xfer;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	601a      	str	r2, [r3, #0]

	pcf2123_disable(pcf);
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f9a0 	bl	80035b6 <pcf2123_disable>

	return PCF2123_ENONE;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <PCF2123_set_rtcc_data>:

int PCF2123_set_rtcc_data(pcf2123_t *pcf, pcf2123_time_t *time, pcf2123_date_t *date)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
	PCF2123_ASSERT(pcf);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d102      	bne.n	8003298 <PCF2123_set_rtcc_data+0x18>
 8003292:	f7fd ff89 	bl	80011a8 <PCF2123_on_assertion>
 8003296:	e7fe      	b.n	8003296 <PCF2123_set_rtcc_data+0x16>
	PCF2123_ASSERT(time);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <PCF2123_set_rtcc_data+0x24>
 800329e:	f7fd ff83 	bl	80011a8 <PCF2123_on_assertion>
 80032a2:	e7fe      	b.n	80032a2 <PCF2123_set_rtcc_data+0x22>
	PCF2123_ASSERT(date);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d102      	bne.n	80032b0 <PCF2123_set_rtcc_data+0x30>
 80032aa:	f7fd ff7d 	bl	80011a8 <PCF2123_on_assertion>
 80032ae:	e7fe      	b.n	80032ae <PCF2123_set_rtcc_data+0x2e>

	uint8_t data[] = {
		_to_bcd(time->sec), _to_bcd(time->min), _to_bcd(time->hour),
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fb01 	bl	80038bc <_to_bcd>
 80032ba:	4603      	mov	r3, r0
	uint8_t data[] = {
 80032bc:	743b      	strb	r3, [r7, #16]
		_to_bcd(time->sec), _to_bcd(time->min), _to_bcd(time->hour),
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	785b      	ldrb	r3, [r3, #1]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fafa 	bl	80038bc <_to_bcd>
 80032c8:	4603      	mov	r3, r0
	uint8_t data[] = {
 80032ca:	747b      	strb	r3, [r7, #17]
		_to_bcd(time->sec), _to_bcd(time->min), _to_bcd(time->hour),
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	789b      	ldrb	r3, [r3, #2]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 faf3 	bl	80038bc <_to_bcd>
 80032d6:	4603      	mov	r3, r0
	uint8_t data[] = {
 80032d8:	74bb      	strb	r3, [r7, #18]
		_to_bcd(date->day), _to_bcd(date->weekday), _to_bcd(date->month), _to_bcd(date->year)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 faec 	bl	80038bc <_to_bcd>
 80032e4:	4603      	mov	r3, r0
	uint8_t data[] = {
 80032e6:	74fb      	strb	r3, [r7, #19]
		_to_bcd(date->day), _to_bcd(date->weekday), _to_bcd(date->month), _to_bcd(date->year)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fae3 	bl	80038bc <_to_bcd>
 80032f6:	4603      	mov	r3, r0
	uint8_t data[] = {
 80032f8:	753b      	strb	r3, [r7, #20]
		_to_bcd(date->day), _to_bcd(date->weekday), _to_bcd(date->month), _to_bcd(date->year)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fada 	bl	80038bc <_to_bcd>
 8003308:	4603      	mov	r3, r0
	uint8_t data[] = {
 800330a:	757b      	strb	r3, [r7, #21]
		_to_bcd(date->day), _to_bcd(date->weekday), _to_bcd(date->month), _to_bcd(date->year)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	78db      	ldrb	r3, [r3, #3]
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fad3 	bl	80038bc <_to_bcd>
 8003316:	4603      	mov	r3, r0
	uint8_t data[] = {
 8003318:	75bb      	strb	r3, [r7, #22]
	};

	PCF2123_write_register(pcf, PCF2123_REG_SECONDS,
 800331a:	f107 0210 	add.w	r2, r7, #16
 800331e:	2307      	movs	r3, #7
 8003320:	2102      	movs	r1, #2
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f9e4 	bl	80036f0 <PCF2123_write_register>
			data, sizeof data);

	return PCF2123_ENONE;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <PCF2123_get_rtcc_data>:

int PCF2123_get_rtcc_data(pcf2123_t *pcf, pcf2123_time_t *time, pcf2123_date_t *date)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b086      	sub	sp, #24
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
	PCF2123_ASSERT(pcf);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d102      	bne.n	800334a <PCF2123_get_rtcc_data+0x18>
 8003344:	f7fd ff30 	bl	80011a8 <PCF2123_on_assertion>
 8003348:	e7fe      	b.n	8003348 <PCF2123_get_rtcc_data+0x16>
	PCF2123_ASSERT(time);
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d102      	bne.n	8003356 <PCF2123_get_rtcc_data+0x24>
 8003350:	f7fd ff2a 	bl	80011a8 <PCF2123_on_assertion>
 8003354:	e7fe      	b.n	8003354 <PCF2123_get_rtcc_data+0x22>
	PCF2123_ASSERT(date);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <PCF2123_get_rtcc_data+0x30>
 800335c:	f7fd ff24 	bl	80011a8 <PCF2123_on_assertion>
 8003360:	e7fe      	b.n	8003360 <PCF2123_get_rtcc_data+0x2e>

	uint8_t clear = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	75fb      	strb	r3, [r7, #23]
	PCF2123_read_register(pcf, PCF2123_REG_SECONDS, &clear, sizeof clear);
 8003366:	f107 0217 	add.w	r2, r7, #23
 800336a:	2301      	movs	r3, #1
 800336c:	2102      	movs	r1, #2
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f933 	bl	80035da <PCF2123_read_register>

	/* Clear OS flag if it is set. */
	if (PCF2123_OS_INTEGRITY_NOT_GUARANTEED & clear) {
 8003374:	7dfb      	ldrb	r3, [r7, #23]
 8003376:	b25b      	sxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	da0b      	bge.n	8003394 <PCF2123_get_rtcc_data+0x62>
		clear |= PCF2123_OS_INTEGRITY_NOT_GUARANTEED;
 800337c:	7dfb      	ldrb	r3, [r7, #23]
 800337e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003382:	b2db      	uxtb	r3, r3
 8003384:	75fb      	strb	r3, [r7, #23]
		PCF2123_write_register(pcf, PCF2123_REG_SECONDS, &clear, sizeof clear);
 8003386:	f107 0217 	add.w	r2, r7, #23
 800338a:	2301      	movs	r3, #1
 800338c:	2102      	movs	r1, #2
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f9ae 	bl	80036f0 <PCF2123_write_register>
	}

	/* NOTE: See datasheet 8.4.8 */
	uint8_t data[7] = {0};
 8003394:	f107 0310 	add.w	r3, r7, #16
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	f8c3 2003 	str.w	r2, [r3, #3]

	PCF2123_read_register(pcf, PCF2123_REG_SECONDS, data, sizeof data);
 80033a0:	f107 0210 	add.w	r2, r7, #16
 80033a4:	2307      	movs	r3, #7
 80033a6:	2102      	movs	r1, #2
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f916 	bl	80035da <PCF2123_read_register>

	time->sec = _from_bcd(data[0]);
 80033ae:	7c3b      	ldrb	r3, [r7, #16]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 faa7 	bl	8003904 <_from_bcd>
 80033b6:	4603      	mov	r3, r0
 80033b8:	461a      	mov	r2, r3
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	701a      	strb	r2, [r3, #0]
	time->min = _from_bcd(data[1]);
 80033be:	7c7b      	ldrb	r3, [r7, #17]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fa9f 	bl	8003904 <_from_bcd>
 80033c6:	4603      	mov	r3, r0
 80033c8:	461a      	mov	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	705a      	strb	r2, [r3, #1]
	time->hour = _from_bcd(data[2]);
 80033ce:	7cbb      	ldrb	r3, [r7, #18]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fa97 	bl	8003904 <_from_bcd>
 80033d6:	4603      	mov	r3, r0
 80033d8:	461a      	mov	r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	709a      	strb	r2, [r3, #2]

	date->day = _from_bcd(data[3]);
 80033de:	7cfb      	ldrb	r3, [r7, #19]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fa8f 	bl	8003904 <_from_bcd>
 80033e6:	4603      	mov	r3, r0
 80033e8:	461a      	mov	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	701a      	strb	r2, [r3, #0]
	date->weekday = _from_bcd(data[4]);
 80033ee:	7d3b      	ldrb	r3, [r7, #20]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fa87 	bl	8003904 <_from_bcd>
 80033f6:	4603      	mov	r3, r0
 80033f8:	b25a      	sxtb	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	705a      	strb	r2, [r3, #1]
	date->month = _from_bcd(data[5]);
 80033fe:	7d7b      	ldrb	r3, [r7, #21]
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fa7f 	bl	8003904 <_from_bcd>
 8003406:	4603      	mov	r3, r0
 8003408:	b25a      	sxtb	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	709a      	strb	r2, [r3, #2]
	date->year = _from_bcd(data[6]);
 800340e:	7dbb      	ldrb	r3, [r7, #22]
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fa77 	bl	8003904 <_from_bcd>
 8003416:	4603      	mov	r3, r0
 8003418:	461a      	mov	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	70da      	strb	r2, [r3, #3]

	return PCF2123_ENONE;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <PCF2123_set_alarm_interrupt>:

	return PCF2123_ENONE;
}

int PCF2123_set_alarm_interrupt(pcf2123_t *pcf, pcf2123_alarm_conf_t *alarm_conf)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
	PCF2123_ASSERT(pcf);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d102      	bne.n	800343e <PCF2123_set_alarm_interrupt+0x16>
 8003438:	f7fd feb6 	bl	80011a8 <PCF2123_on_assertion>
 800343c:	e7fe      	b.n	800343c <PCF2123_set_alarm_interrupt+0x14>
	PCF2123_ASSERT(alarm_conf);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <PCF2123_set_alarm_interrupt+0x22>
 8003444:	f7fd feb0 	bl	80011a8 <PCF2123_on_assertion>
 8003448:	e7fe      	b.n	8003448 <PCF2123_set_alarm_interrupt+0x20>

	uint8_t min_alarm 		= alarm_conf->alarm_enable & PCF2123_ALARM_MIN_ENABLE ? _to_bcd(alarm_conf->min) : PCF2123_ALARM_DISABLE;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d006      	beq.n	8003464 <PCF2123_set_alarm_interrupt+0x3c>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	785b      	ldrb	r3, [r3, #1]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fa2e 	bl	80038bc <_to_bcd>
 8003460:	4603      	mov	r3, r0
 8003462:	e000      	b.n	8003466 <PCF2123_set_alarm_interrupt+0x3e>
 8003464:	2380      	movs	r3, #128	; 0x80
 8003466:	73fb      	strb	r3, [r7, #15]
	uint8_t hour_alarm 		= alarm_conf->alarm_enable & PCF2123_ALARM_HOUR_ENABLE ? _to_bcd(alarm_conf->hour) : PCF2123_ALARM_DISABLE;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d006      	beq.n	8003482 <PCF2123_set_alarm_interrupt+0x5a>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	789b      	ldrb	r3, [r3, #2]
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fa1f 	bl	80038bc <_to_bcd>
 800347e:	4603      	mov	r3, r0
 8003480:	e000      	b.n	8003484 <PCF2123_set_alarm_interrupt+0x5c>
 8003482:	2380      	movs	r3, #128	; 0x80
 8003484:	73bb      	strb	r3, [r7, #14]
	uint8_t day_alarm 		= alarm_conf->alarm_enable & PCF2123_ALARM_DAY_ENABLE ? _to_bcd(alarm_conf->day) : PCF2123_ALARM_DISABLE;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d006      	beq.n	80034a0 <PCF2123_set_alarm_interrupt+0x78>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	78db      	ldrb	r3, [r3, #3]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fa10 	bl	80038bc <_to_bcd>
 800349c:	4603      	mov	r3, r0
 800349e:	e000      	b.n	80034a2 <PCF2123_set_alarm_interrupt+0x7a>
 80034a0:	2380      	movs	r3, #128	; 0x80
 80034a2:	737b      	strb	r3, [r7, #13]
	uint8_t weekday_alarm	= alarm_conf->alarm_enable & PCF2123_ALARM_WEEKDAY_ENABLE ? _to_bcd(alarm_conf->weekday) : PCF2123_ALARM_DISABLE;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <PCF2123_set_alarm_interrupt+0x9a>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 f9ff 	bl	80038bc <_to_bcd>
 80034be:	4603      	mov	r3, r0
 80034c0:	e000      	b.n	80034c4 <PCF2123_set_alarm_interrupt+0x9c>
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	733b      	strb	r3, [r7, #12]

	uint8_t cntl_2 = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	72fb      	strb	r3, [r7, #11]
	PCF2123_read_register(pcf, PCF2123_REG_CONTROL_2, &cntl_2, sizeof cntl_2);
 80034ca:	f107 020b 	add.w	r2, r7, #11
 80034ce:	2301      	movs	r3, #1
 80034d0:	2101      	movs	r1, #1
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f881 	bl	80035da <PCF2123_read_register>

	/* Clear AF bit */
	if (cntl_2 & PCF2123_AF_INT_GENERATED) {
 80034d8:	7afb      	ldrb	r3, [r7, #11]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00b      	beq.n	80034fa <PCF2123_set_alarm_interrupt+0xd2>
		cntl_2 &= ~(PCF2123_AF_INT_GENERATED);
 80034e2:	7afb      	ldrb	r3, [r7, #11]
 80034e4:	f023 0308 	bic.w	r3, r3, #8
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	72fb      	strb	r3, [r7, #11]
		PCF2123_write_register(pcf, PCF2123_REG_CONTROL_2, &cntl_2, sizeof cntl_2);
 80034ec:	f107 020b 	add.w	r2, r7, #11
 80034f0:	2301      	movs	r3, #1
 80034f2:	2101      	movs	r1, #1
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f8fb 	bl	80036f0 <PCF2123_write_register>
	}

	PCF2123_read_register(pcf, PCF2123_REG_CONTROL_2, &cntl_2, sizeof cntl_2);
 80034fa:	f107 020b 	add.w	r2, r7, #11
 80034fe:	2301      	movs	r3, #1
 8003500:	2101      	movs	r1, #1
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f869 	bl	80035da <PCF2123_read_register>

	/* if AIF is not set */
	if (~(cntl_2 & PCF2123_AIF_INT_ENABLE)) {
		/* Set AIF bit in Control Register 1 */
		cntl_2 |= PCF2123_AIF_INT_ENABLE;
 8003508:	7afb      	ldrb	r3, [r7, #11]
 800350a:	f043 0302 	orr.w	r3, r3, #2
 800350e:	b2db      	uxtb	r3, r3
 8003510:	72fb      	strb	r3, [r7, #11]
		PCF2123_write_register(pcf, PCF2123_REG_CONTROL_2, &cntl_2, sizeof cntl_2);
 8003512:	f107 020b 	add.w	r2, r7, #11
 8003516:	2301      	movs	r3, #1
 8003518:	2101      	movs	r1, #1
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f8e8 	bl	80036f0 <PCF2123_write_register>
	}

	PCF2123_write_register(pcf, PCF2123_REG_MINUTE_ALARM,
 8003520:	f107 020f 	add.w	r2, r7, #15
 8003524:	2301      	movs	r3, #1
 8003526:	2109      	movs	r1, #9
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f8e1 	bl	80036f0 <PCF2123_write_register>
			&min_alarm, sizeof min_alarm);
	PCF2123_write_register(pcf, PCF2123_REG_HOUR_ALARM,
 800352e:	f107 020e 	add.w	r2, r7, #14
 8003532:	2301      	movs	r3, #1
 8003534:	210a      	movs	r1, #10
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f8da 	bl	80036f0 <PCF2123_write_register>
			&hour_alarm, sizeof hour_alarm);
	PCF2123_write_register(pcf, PCF2123_REG_DAY_ALARM,
 800353c:	f107 020d 	add.w	r2, r7, #13
 8003540:	2301      	movs	r3, #1
 8003542:	210b      	movs	r1, #11
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f8d3 	bl	80036f0 <PCF2123_write_register>
			&day_alarm, sizeof day_alarm);
	PCF2123_write_register(pcf, PCF2123_REG_WEEKDAY_ALARM,
 800354a:	f107 020c 	add.w	r2, r7, #12
 800354e:	2301      	movs	r3, #1
 8003550:	210c      	movs	r1, #12
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f8cc 	bl	80036f0 <PCF2123_write_register>
			&weekday_alarm, sizeof weekday_alarm);

	return PCF2123_ENONE;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <PCF2123_sw_reset>:

	return PCF2123_ENONE;
}

int PCF2123_sw_reset(pcf2123_t *pcf)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
	PCF2123_ASSERT(pcf);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d102      	bne.n	8003576 <PCF2123_sw_reset+0x14>
 8003570:	f7fd fe1a 	bl	80011a8 <PCF2123_on_assertion>
 8003574:	e7fe      	b.n	8003574 <PCF2123_sw_reset+0x12>

	uint8_t magic_number = PCF2123_SW_RESET_MAGIC;
 8003576:	2358      	movs	r3, #88	; 0x58
 8003578:	73fb      	strb	r3, [r7, #15]
	PCF2123_write_register(pcf, PCF2123_REG_CONTROL_1,
 800357a:	f107 020f 	add.w	r2, r7, #15
 800357e:	2301      	movs	r3, #1
 8003580:	2100      	movs	r1, #0
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f8b4 	bl	80036f0 <PCF2123_write_register>
			&magic_number, sizeof magic_number);

	return PCF2123_ENONE;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <pcf2123_enable>:

void pcf2123_enable(pcf2123_t *pcf)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
	PCF2123_ASSERT(pcf);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <pcf2123_enable+0x14>
 80035a0:	f7fd fe02 	bl	80011a8 <PCF2123_on_assertion>
 80035a4:	e7fe      	b.n	80035a4 <pcf2123_enable+0x12>

	pcf->control_ce_cb(PCF2123_CE_ENABLE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2001      	movs	r0, #1
 80035ac:	4798      	blx	r3
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <pcf2123_disable>:

void pcf2123_disable(pcf2123_t *pcf)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
	PCF2123_ASSERT(pcf);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d102      	bne.n	80035ca <pcf2123_disable+0x14>
 80035c4:	f7fd fdf0 	bl	80011a8 <PCF2123_on_assertion>
 80035c8:	e7fe      	b.n	80035c8 <pcf2123_disable+0x12>

	pcf->control_ce_cb(PCF2123_CE_DISABLE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2000      	movs	r0, #0
 80035d0:	4798      	blx	r3
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <PCF2123_read_register>:

void PCF2123_read_register(pcf2123_t *pcf, pcf2123_reg_t reg, uint8_t *data, size_t data_len)
{
 80035da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035de:	b08d      	sub	sp, #52	; 0x34
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6178      	str	r0, [r7, #20]
 80035e4:	60fa      	str	r2, [r7, #12]
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	460b      	mov	r3, r1
 80035ea:	74fb      	strb	r3, [r7, #19]
	PCF2123_ASSERT(pcf);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d102      	bne.n	80035f8 <PCF2123_read_register+0x1e>
 80035f2:	f7fd fdd9 	bl	80011a8 <PCF2123_on_assertion>
 80035f6:	e7fe      	b.n	80035f6 <PCF2123_read_register+0x1c>
	PCF2123_ASSERT(data);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <PCF2123_read_register+0x2a>
 80035fe:	f7fd fdd3 	bl	80011a8 <PCF2123_on_assertion>
 8003602:	e7fe      	b.n	8003602 <PCF2123_read_register+0x28>
	PCF2123_ASSERT(0 < data_len);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d102      	bne.n	8003610 <PCF2123_read_register+0x36>
 800360a:	f7fd fdcd 	bl	80011a8 <PCF2123_on_assertion>
 800360e:	e7fe      	b.n	800360e <PCF2123_read_register+0x34>

	uint8_t cmd = PCF2123_READ_DATA | PCF2123_SUBADDRESS | (uint8_t) reg;
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8003616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t write_buf[data_len + 1];
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	1c59      	adds	r1, r3, #1
 800361e:	466b      	mov	r3, sp
 8003620:	461e      	mov	r6, r3
 8003622:	460b      	mov	r3, r1
 8003624:	3b01      	subs	r3, #1
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
 8003628:	460a      	mov	r2, r1
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	00d8      	lsls	r0, r3, #3
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	00d3      	lsls	r3, r2, #3
 800363c:	603b      	str	r3, [r7, #0]
 800363e:	460a      	mov	r2, r1
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 8003648:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
 800364c:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 8003650:	1dcb      	adds	r3, r1, #7
 8003652:	08db      	lsrs	r3, r3, #3
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	ebad 0d03 	sub.w	sp, sp, r3
 800365a:	466b      	mov	r3, sp
 800365c:	3300      	adds	r3, #0
 800365e:	623b      	str	r3, [r7, #32]
	uint8_t read_buf[data_len + 1];
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	1c59      	adds	r1, r3, #1
 8003664:	460b      	mov	r3, r1
 8003666:	3b01      	subs	r3, #1
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	460a      	mov	r2, r1
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8003674:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8003678:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800367c:	460a      	mov	r2, r1
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	00dd      	lsls	r5, r3, #3
 8003684:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003688:	00d4      	lsls	r4, r2, #3
 800368a:	1dcb      	adds	r3, r1, #7
 800368c:	08db      	lsrs	r3, r3, #3
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	ebad 0d03 	sub.w	sp, sp, r3
 8003694:	466b      	mov	r3, sp
 8003696:	3300      	adds	r3, #0
 8003698:	61bb      	str	r3, [r7, #24]

	write_buf[0] = cmd;
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80036a0:	701a      	strb	r2, [r3, #0]

	pcf2123_enable(pcf);
 80036a2:	6978      	ldr	r0, [r7, #20]
 80036a4:	f7ff ff75 	bl	8003592 <pcf2123_enable>
	pcf->spi_xfer_cb(write_buf, read_buf, data_len + 1, PCF2123_TIMEOUT_MS);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	681c      	ldr	r4, [r3, #0]
 80036ac:	6a38      	ldr	r0, [r7, #32]
 80036ae:	69b9      	ldr	r1, [r7, #24]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80036b8:	47a0      	blx	r4
	pcf2123_disable(pcf);
 80036ba:	6978      	ldr	r0, [r7, #20]
 80036bc:	f7ff ff7b 	bl	80035b6 <pcf2123_disable>

	for (size_t idx = 0; idx < data_len; idx++) {
 80036c0:	2300      	movs	r3, #0
 80036c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c4:	e00a      	b.n	80036dc <PCF2123_read_register+0x102>
		data[idx] = read_buf[idx + 1];
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ca:	4413      	add	r3, r2
 80036cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ce:	3201      	adds	r2, #1
 80036d0:	69b9      	ldr	r1, [r7, #24]
 80036d2:	5c8a      	ldrb	r2, [r1, r2]
 80036d4:	701a      	strb	r2, [r3, #0]
	for (size_t idx = 0; idx < data_len; idx++) {
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	3301      	adds	r3, #1
 80036da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d3f0      	bcc.n	80036c6 <PCF2123_read_register+0xec>
 80036e4:	46b5      	mov	sp, r6
	}
}
 80036e6:	bf00      	nop
 80036e8:	3734      	adds	r7, #52	; 0x34
 80036ea:	46bd      	mov	sp, r7
 80036ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080036f0 <PCF2123_write_register>:

/* The command byte defines the address of the first register to be accessed
	 * and the read/write mode. The address counter will auto increment after every
	 * access and will rollover to zero after the last regoster is accessed. */
void PCF2123_write_register(pcf2123_t *pcf, pcf2123_reg_t reg, uint8_t *data, size_t data_len)
{
 80036f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f4:	b08d      	sub	sp, #52	; 0x34
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6178      	str	r0, [r7, #20]
 80036fa:	60fa      	str	r2, [r7, #12]
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	460b      	mov	r3, r1
 8003700:	74fb      	strb	r3, [r7, #19]
	PCF2123_ASSERT(pcf);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d102      	bne.n	800370e <PCF2123_write_register+0x1e>
 8003708:	f7fd fd4e 	bl	80011a8 <PCF2123_on_assertion>
 800370c:	e7fe      	b.n	800370c <PCF2123_write_register+0x1c>
	PCF2123_ASSERT(data);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d102      	bne.n	800371a <PCF2123_write_register+0x2a>
 8003714:	f7fd fd48 	bl	80011a8 <PCF2123_on_assertion>
 8003718:	e7fe      	b.n	8003718 <PCF2123_write_register+0x28>
	PCF2123_ASSERT(0 < data_len);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <PCF2123_write_register+0x36>
 8003720:	f7fd fd42 	bl	80011a8 <PCF2123_on_assertion>
 8003724:	e7fe      	b.n	8003724 <PCF2123_write_register+0x34>

	uint8_t cmd = PCF2123_WRITE_DATA | PCF2123_SUBADDRESS | (uint8_t) reg;
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	f043 0310 	orr.w	r3, r3, #16
 800372c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t write_buf[data_len + 1];
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	1c59      	adds	r1, r3, #1
 8003734:	466b      	mov	r3, sp
 8003736:	461e      	mov	r6, r3
 8003738:	460b      	mov	r3, r1
 800373a:	3b01      	subs	r3, #1
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
 800373e:	460a      	mov	r2, r1
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	00d8      	lsls	r0, r3, #3
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	00d3      	lsls	r3, r2, #3
 8003752:	603b      	str	r3, [r7, #0]
 8003754:	460a      	mov	r2, r1
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 800375e:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
 8003762:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 8003766:	1dcb      	adds	r3, r1, #7
 8003768:	08db      	lsrs	r3, r3, #3
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	ebad 0d03 	sub.w	sp, sp, r3
 8003770:	466b      	mov	r3, sp
 8003772:	3300      	adds	r3, #0
 8003774:	623b      	str	r3, [r7, #32]
	uint8_t read_buf[data_len + 1];
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	1c59      	adds	r1, r3, #1
 800377a:	460b      	mov	r3, r1
 800377c:	3b01      	subs	r3, #1
 800377e:	61fb      	str	r3, [r7, #28]
 8003780:	460a      	mov	r2, r1
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 800378a:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800378e:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8003792:	460a      	mov	r2, r1
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	00dd      	lsls	r5, r3, #3
 800379a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800379e:	00d4      	lsls	r4, r2, #3
 80037a0:	1dcb      	adds	r3, r1, #7
 80037a2:	08db      	lsrs	r3, r3, #3
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	ebad 0d03 	sub.w	sp, sp, r3
 80037aa:	466b      	mov	r3, sp
 80037ac:	3300      	adds	r3, #0
 80037ae:	61bb      	str	r3, [r7, #24]

	write_buf[0] = cmd;
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80037b6:	701a      	strb	r2, [r3, #0]

	for (size_t idx = 1; idx < (data_len + 1); idx++) {
 80037b8:	2301      	movs	r3, #1
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037bc:	e00c      	b.n	80037d8 <PCF2123_write_register+0xe8>
			write_buf[idx] = data[idx - 1];
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	3b01      	subs	r3, #1
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4413      	add	r3, r2
 80037c6:	7819      	ldrb	r1, [r3, #0]
 80037c8:	6a3a      	ldr	r2, [r7, #32]
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	4413      	add	r3, r2
 80037ce:	460a      	mov	r2, r1
 80037d0:	701a      	strb	r2, [r3, #0]
	for (size_t idx = 1; idx < (data_len + 1); idx++) {
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	3301      	adds	r3, #1
 80037d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037de:	429a      	cmp	r2, r3
 80037e0:	d8ed      	bhi.n	80037be <PCF2123_write_register+0xce>
	}

	pcf2123_enable(pcf);
 80037e2:	6978      	ldr	r0, [r7, #20]
 80037e4:	f7ff fed5 	bl	8003592 <pcf2123_enable>
	pcf->spi_xfer_cb(write_buf, read_buf, data_len + 1, PCF2123_TIMEOUT_MS);
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	681c      	ldr	r4, [r3, #0]
 80037ec:	6a38      	ldr	r0, [r7, #32]
 80037ee:	69b9      	ldr	r1, [r7, #24]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80037f8:	47a0      	blx	r4
	pcf2123_disable(pcf);
 80037fa:	6978      	ldr	r0, [r7, #20]
 80037fc:	f7ff fedb 	bl	80035b6 <pcf2123_disable>
 8003800:	46b5      	mov	sp, r6
}
 8003802:	bf00      	nop
 8003804:	3734      	adds	r7, #52	; 0x34
 8003806:	46bd      	mov	sp, r7
 8003808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800380c <PCF2123_clear_af>:

	return PCF2123_AF_INT_GENERATED & control_2;
}

void PCF2123_clear_af(pcf2123_t *pcf)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
	PCF2123_ASSERT(pcf);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d102      	bne.n	8003820 <PCF2123_clear_af+0x14>
 800381a:	f7fd fcc5 	bl	80011a8 <PCF2123_on_assertion>
 800381e:	e7fe      	b.n	800381e <PCF2123_clear_af+0x12>

	uint8_t control_2;
	PCF2123_read_register(pcf, PCF2123_REG_CONTROL_2,
 8003820:	f107 020f 	add.w	r2, r7, #15
 8003824:	2301      	movs	r3, #1
 8003826:	2101      	movs	r1, #1
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff fed6 	bl	80035da <PCF2123_read_register>
			&control_2, sizeof control_2);

	control_2 &= ~(PCF2123_AF_INT_GENERATED);
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	f023 0308 	bic.w	r3, r3, #8
 8003834:	b2db      	uxtb	r3, r3
 8003836:	73fb      	strb	r3, [r7, #15]

	PCF2123_write_register(pcf, PCF2123_REG_CONTROL_2,
 8003838:	f107 020f 	add.w	r2, r7, #15
 800383c:	2301      	movs	r3, #1
 800383e:	2101      	movs	r1, #1
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff ff55 	bl	80036f0 <PCF2123_write_register>
			&control_2, sizeof control_2);
}
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <PCF2123_clear_tf>:

	return PCF2123_TF_INTERRUPT_GENERTED & control_2;
}

void PCF2123_clear_tf(pcf2123_t *pcf)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
	PCF2123_ASSERT(pcf);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d102      	bne.n	8003862 <PCF2123_clear_tf+0x14>
 800385c:	f7fd fca4 	bl	80011a8 <PCF2123_on_assertion>
 8003860:	e7fe      	b.n	8003860 <PCF2123_clear_tf+0x12>

	uint8_t control_2;
	PCF2123_read_register(pcf, PCF2123_REG_CONTROL_2,
 8003862:	f107 020f 	add.w	r2, r7, #15
 8003866:	2301      	movs	r3, #1
 8003868:	2101      	movs	r1, #1
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff feb5 	bl	80035da <PCF2123_read_register>
			&control_2, sizeof control_2);

	control_2 &= ~(PCF2123_TF_INTERRUPT_GENERTED);
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	f023 0304 	bic.w	r3, r3, #4
 8003876:	b2db      	uxtb	r3, r3
 8003878:	73fb      	strb	r3, [r7, #15]

	PCF2123_write_register(pcf, PCF2123_REG_CONTROL_2,
 800387a:	f107 020f 	add.w	r2, r7, #15
 800387e:	2301      	movs	r3, #1
 8003880:	2101      	movs	r1, #1
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff ff34 	bl	80036f0 <PCF2123_write_register>
			&control_2, sizeof control_2);
}
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <PCF2123_get_interrupt_flags>:

uint8_t PCF2123_get_interrupt_flags(pcf2123_t *pcf)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	PCF2123_ASSERT(pcf);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <PCF2123_get_interrupt_flags+0x14>
 800389e:	f7fd fc83 	bl	80011a8 <PCF2123_on_assertion>
 80038a2:	e7fe      	b.n	80038a2 <PCF2123_get_interrupt_flags+0x12>

	uint8_t control_2;
	PCF2123_read_register(pcf, PCF2123_REG_CONTROL_2,
 80038a4:	f107 020f 	add.w	r2, r7, #15
 80038a8:	2301      	movs	r3, #1
 80038aa:	2101      	movs	r1, #1
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff fe94 	bl	80035da <PCF2123_read_register>
			&control_2, sizeof control_2);

	return control_2;
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <_to_bcd>:
			&control_2, sizeof control_2);
}

/* Source: http://www.mbeddedc.com/2017/03/decimal-to-binary-coded-decimal-bcd.html */
static uint8_t _to_bcd(uint8_t data)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	71fb      	strb	r3, [r7, #7]
	return ((data / 10) << 4) | (data % 10);
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	4a0d      	ldr	r2, [pc, #52]	; (8003900 <_to_bcd+0x44>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	08db      	lsrs	r3, r3, #3
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	b258      	sxtb	r0, r3
 80038d6:	79fa      	ldrb	r2, [r7, #7]
 80038d8:	4b09      	ldr	r3, [pc, #36]	; (8003900 <_to_bcd+0x44>)
 80038da:	fba3 1302 	umull	r1, r3, r3, r2
 80038de:	08d9      	lsrs	r1, r3, #3
 80038e0:	460b      	mov	r3, r1
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	b25b      	sxtb	r3, r3
 80038ee:	4303      	orrs	r3, r0
 80038f0:	b25b      	sxtb	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	cccccccd 	.word	0xcccccccd

08003904 <_from_bcd>:

/* Source: http://www.mbeddedc.com/2017/03/decimal-to-binary-coded-decimal-bcd.html */
static uint8_t _from_bcd(uint8_t bcd)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	71fb      	strb	r3, [r7, #7]
	return ((bcd >> 4) * 10) + (bcd & 0x0F);
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	b2db      	uxtb	r3, r3
 8003914:	461a      	mov	r2, r3
 8003916:	0092      	lsls	r2, r2, #2
 8003918:	4413      	add	r3, r2
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	b2da      	uxtb	r2, r3
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	b2db      	uxtb	r3, r3
 8003926:	4413      	add	r3, r2
 8003928:	b2db      	uxtb	r3, r3
}
 800392a:	4618      	mov	r0, r3
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
	...

08003938 <_putchar>:
#include "usart.h"

static UART_HandleTypeDef *DBG_UART_PORT = NULL;

void _putchar(char character)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(DBG_UART_PORT, (uint8_t *) &character, 1, 250);
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <_putchar+0x20>)
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	1df9      	adds	r1, r7, #7
 8003948:	23fa      	movs	r3, #250	; 0xfa
 800394a:	2201      	movs	r2, #1
 800394c:	f7ff f863 	bl	8002a16 <HAL_UART_Transmit>
}
 8003950:	bf00      	nop
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	20000028 	.word	0x20000028

0800395c <DBG_init>:

void DBG_init(void *handle)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
    DBG_UART_PORT = (UART_HandleTypeDef *) handle;
 8003964:	4a04      	ldr	r2, [pc, #16]	; (8003978 <DBG_init+0x1c>)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6013      	str	r3, [r2, #0]
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000028 	.word	0x20000028

0800397c <DBG_println>:
	uint8_t clear_page = 0x0C;
	HAL_UART_Transmit(DBG_UART_PORT, &clear_page, 1, 250);
}

void DBG_println(const char *fmt, ...)
{
 800397c:	b40f      	push	{r0, r1, r2, r3}
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, fmt);
 8003984:	f107 0314 	add.w	r3, r7, #20
 8003988:	607b      	str	r3, [r7, #4]
	vprintf(fmt, args);
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	6938      	ldr	r0, [r7, #16]
 800398e:	f001 fc31 	bl	80051f4 <vprintf_>
	va_end(args);

	HAL_UART_Transmit(DBG_UART_PORT, (uint8_t *) "\r\n", strlen("\r\n"), 250);
 8003992:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <DBG_println+0x34>)
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	23fa      	movs	r3, #250	; 0xfa
 8003998:	2202      	movs	r2, #2
 800399a:	4906      	ldr	r1, [pc, #24]	; (80039b4 <DBG_println+0x38>)
 800399c:	f7ff f83b 	bl	8002a16 <HAL_UART_Transmit>
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039aa:	b004      	add	sp, #16
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	20000028 	.word	0x20000028
 80039b4:	08005374 	.word	0x08005374

080039b8 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	4603      	mov	r3, r0
 80039c6:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	4603      	mov	r3, r0
 80039e2:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <_out_char+0x1e>
    _putchar(character);
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff ffa3 	bl	8003938 <_putchar>
  }
}
 80039f2:	bf00      	nop
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b085      	sub	sp, #20
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	e002      	b.n	8003a10 <_strnlen_s+0x16>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d004      	beq.n	8003a22 <_strnlen_s+0x28>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	1e5a      	subs	r2, r3, #1
 8003a1c:	603a      	str	r2, [r7, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f3      	bne.n	8003a0a <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	1ad3      	subs	r3, r2, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	2b2f      	cmp	r3, #47	; 0x2f
 8003a42:	d904      	bls.n	8003a4e <_is_digit+0x1a>
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	2b39      	cmp	r3, #57	; 0x39
 8003a48:	d801      	bhi.n	8003a4e <_is_digit+0x1a>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <_is_digit+0x1c>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	b2db      	uxtb	r3, r3
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003a6e:	e00e      	b.n	8003a8e <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	1c59      	adds	r1, r3, #1
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6011      	str	r1, [r2, #0]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	4403      	add	r3, r0
 8003a8a:	3b30      	subs	r3, #48	; 0x30
 8003a8c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ffcd 	bl	8003a34 <_is_digit>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e7      	bne.n	8003a70 <_atoi+0xe>
  }
  return i;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8003aaa:	b590      	push	{r4, r7, lr}
 8003aac:	b087      	sub	sp, #28
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
 8003ab6:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d125      	bne.n	8003b12 <_out_rev+0x68>
 8003ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d120      	bne.n	8003b12 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8003ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	e00a      	b.n	8003aec <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	1c53      	adds	r3, r2, #1
 8003ada:	607b      	str	r3, [r7, #4]
 8003adc:	68fc      	ldr	r4, [r7, #12]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	2020      	movs	r0, #32
 8003ae4:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d3f0      	bcc.n	8003ad6 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8003af4:	e00d      	b.n	8003b12 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8003af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af8:	3b01      	subs	r3, #1
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b00:	4413      	add	r3, r2
 8003b02:	7818      	ldrb	r0, [r3, #0]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	1c53      	adds	r3, r2, #1
 8003b08:	607b      	str	r3, [r7, #4]
 8003b0a:	68fc      	ldr	r4, [r7, #12]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	47a0      	blx	r4
  while (len) {
 8003b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1ee      	bne.n	8003af6 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8003b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00e      	beq.n	8003b40 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8003b22:	e007      	b.n	8003b34 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	1c53      	adds	r3, r2, #1
 8003b28:	607b      	str	r3, [r7, #4]
 8003b2a:	68fc      	ldr	r4, [r7, #12]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	2020      	movs	r0, #32
 8003b32:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad2      	subs	r2, r2, r3
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d3f1      	bcc.n	8003b24 <_out_rev+0x7a>
    }
  }

  return idx;
 8003b40:	687b      	ldr	r3, [r7, #4]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd90      	pop	{r4, r7, pc}

08003b4a <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b088      	sub	sp, #32
 8003b4e:	af04      	add	r7, sp, #16
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d136      	bne.n	8003bd0 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d018      	beq.n	8003b9a <_ntoa_format+0x50>
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d013      	beq.n	8003b9a <_ntoa_format+0x50>
 8003b72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d104      	bne.n	8003b84 <_ntoa_format+0x3a>
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	f003 030c 	and.w	r3, r3, #12
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <_ntoa_format+0x50>
      width--;
 8003b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b86:	3b01      	subs	r3, #1
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003b8a:	e006      	b.n	8003b9a <_ntoa_format+0x50>
      buf[len++] = '0';
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	61fa      	str	r2, [r7, #28]
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4413      	add	r3, r2
 8003b96:	2230      	movs	r2, #48	; 0x30
 8003b98:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d20a      	bcs.n	8003bb8 <_ntoa_format+0x6e>
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	2b1f      	cmp	r3, #31
 8003ba6:	d9f1      	bls.n	8003b8c <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003ba8:	e006      	b.n	8003bb8 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	61fa      	str	r2, [r7, #28]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	2230      	movs	r2, #48	; 0x30
 8003bb6:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d006      	beq.n	8003bd0 <_ntoa_format+0x86>
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d202      	bcs.n	8003bd0 <_ntoa_format+0x86>
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	2b1f      	cmp	r3, #31
 8003bce:	d9ec      	bls.n	8003baa <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d058      	beq.n	8003c8c <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8003bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d116      	bne.n	8003c12 <_ntoa_format+0xc8>
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d013      	beq.n	8003c12 <_ntoa_format+0xc8>
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d003      	beq.n	8003bfa <_ntoa_format+0xb0>
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d10b      	bne.n	8003c12 <_ntoa_format+0xc8>
      len--;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <_ntoa_format+0xc8>
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d102      	bne.n	8003c12 <_ntoa_format+0xc8>
        len--;
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d10f      	bne.n	8003c38 <_ntoa_format+0xee>
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10a      	bne.n	8003c38 <_ntoa_format+0xee>
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	2b1f      	cmp	r3, #31
 8003c26:	d807      	bhi.n	8003c38 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	61fa      	str	r2, [r7, #28]
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4413      	add	r3, r2
 8003c32:	2278      	movs	r2, #120	; 0x78
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	e01f      	b.n	8003c78 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	2b10      	cmp	r3, #16
 8003c3c:	d10f      	bne.n	8003c5e <_ntoa_format+0x114>
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <_ntoa_format+0x114>
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	2b1f      	cmp	r3, #31
 8003c4c:	d807      	bhi.n	8003c5e <_ntoa_format+0x114>
      buf[len++] = 'X';
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	61fa      	str	r2, [r7, #28]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4413      	add	r3, r2
 8003c58:	2258      	movs	r2, #88	; 0x58
 8003c5a:	701a      	strb	r2, [r3, #0]
 8003c5c:	e00c      	b.n	8003c78 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d109      	bne.n	8003c78 <_ntoa_format+0x12e>
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	2b1f      	cmp	r3, #31
 8003c68:	d806      	bhi.n	8003c78 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	61fa      	str	r2, [r7, #28]
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4413      	add	r3, r2
 8003c74:	2262      	movs	r2, #98	; 0x62
 8003c76:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	2b1f      	cmp	r3, #31
 8003c7c:	d806      	bhi.n	8003c8c <_ntoa_format+0x142>
      buf[len++] = '0';
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	61fa      	str	r2, [r7, #28]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4413      	add	r3, r2
 8003c88:	2230      	movs	r2, #48	; 0x30
 8003c8a:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	2b1f      	cmp	r3, #31
 8003c90:	d824      	bhi.n	8003cdc <_ntoa_format+0x192>
    if (negative) {
 8003c92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <_ntoa_format+0x160>
      buf[len++] = '-';
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	61fa      	str	r2, [r7, #28]
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	222d      	movs	r2, #45	; 0x2d
 8003ca6:	701a      	strb	r2, [r3, #0]
 8003ca8:	e018      	b.n	8003cdc <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d007      	beq.n	8003cc4 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	61fa      	str	r2, [r7, #28]
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	222b      	movs	r2, #43	; 0x2b
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	e00b      	b.n	8003cdc <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d006      	beq.n	8003cdc <_ntoa_format+0x192>
      buf[len++] = ' ';
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	61fa      	str	r2, [r7, #28]
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	2220      	movs	r2, #32
 8003cda:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	9303      	str	r3, [sp, #12]
 8003ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce2:	9302      	str	r3, [sp, #8]
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	9301      	str	r3, [sp, #4]
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f7ff fed9 	bl	8003aaa <_out_rev>
 8003cf8:	4603      	mov	r3, r0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b096      	sub	sp, #88	; 0x58
 8003d06:	af08      	add	r7, sp, #32
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d103      	bne.n	8003d22 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8003d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d1c:	f023 0310 	bic.w	r3, r3, #16
 8003d20:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <_ntoa_long+0x30>
 8003d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d033      	beq.n	8003d9a <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8003d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d36:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d3a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003d3c:	fb01 f202 	mul.w	r2, r1, r2
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	637a      	str	r2, [r7, #52]	; 0x34
 8003d4c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003d50:	2a09      	cmp	r2, #9
 8003d52:	d804      	bhi.n	8003d5e <_ntoa_long+0x5c>
 8003d54:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003d58:	3230      	adds	r2, #48	; 0x30
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	e00d      	b.n	8003d7a <_ntoa_long+0x78>
 8003d5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d60:	f002 0220 	and.w	r2, r2, #32
 8003d64:	2a00      	cmp	r2, #0
 8003d66:	d001      	beq.n	8003d6c <_ntoa_long+0x6a>
 8003d68:	2141      	movs	r1, #65	; 0x41
 8003d6a:	e000      	b.n	8003d6e <_ntoa_long+0x6c>
 8003d6c:	2161      	movs	r1, #97	; 0x61
 8003d6e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003d72:	440a      	add	r2, r1
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	3a0a      	subs	r2, #10
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003d7e:	440b      	add	r3, r1
 8003d80:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8003d84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <_ntoa_long+0x98>
 8003d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d96:	2b1f      	cmp	r3, #31
 8003d98:	d9cb      	bls.n	8003d32 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d9c:	9306      	str	r3, [sp, #24]
 8003d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da0:	9305      	str	r3, [sp, #20]
 8003da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da4:	9304      	str	r3, [sp, #16]
 8003da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da8:	9303      	str	r3, [sp, #12]
 8003daa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003dae:	9302      	str	r3, [sp, #8]
 8003db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db2:	9301      	str	r3, [sp, #4]
 8003db4:	f107 0310 	add.w	r3, r7, #16
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f7ff fec2 	bl	8003b4a <_ntoa_format>
 8003dc6:	4603      	mov	r3, r0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3738      	adds	r7, #56	; 0x38
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003dd0:	b590      	push	{r4, r7, lr}
 8003dd2:	b097      	sub	sp, #92	; 0x5c
 8003dd4:	af08      	add	r7, sp, #32
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003de2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8003de6:	4323      	orrs	r3, r4
 8003de8:	d103      	bne.n	8003df2 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8003dea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dec:	f023 0310 	bic.w	r3, r3, #16
 8003df0:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003df2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <_ntoa_long_long+0x34>
 8003dfc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8003e00:	4323      	orrs	r3, r4
 8003e02:	d039      	beq.n	8003e78 <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 8003e04:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003e08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e0c:	f7fc fe7e 	bl	8000b0c <__aeabi_uldivmod>
 8003e10:	461c      	mov	r4, r3
 8003e12:	4613      	mov	r3, r2
 8003e14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	637a      	str	r2, [r7, #52]	; 0x34
 8003e1e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003e22:	2a09      	cmp	r2, #9
 8003e24:	d804      	bhi.n	8003e30 <_ntoa_long_long+0x60>
 8003e26:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003e2a:	3230      	adds	r2, #48	; 0x30
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	e00d      	b.n	8003e4c <_ntoa_long_long+0x7c>
 8003e30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e32:	f002 0220 	and.w	r2, r2, #32
 8003e36:	2a00      	cmp	r2, #0
 8003e38:	d001      	beq.n	8003e3e <_ntoa_long_long+0x6e>
 8003e3a:	2141      	movs	r1, #65	; 0x41
 8003e3c:	e000      	b.n	8003e40 <_ntoa_long_long+0x70>
 8003e3e:	2161      	movs	r1, #97	; 0x61
 8003e40:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003e44:	440a      	add	r2, r1
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	3a0a      	subs	r2, #10
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003e50:	440b      	add	r3, r1
 8003e52:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8003e56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e5a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003e5e:	f7fc fe55 	bl	8000b0c <__aeabi_uldivmod>
 8003e62:	4603      	mov	r3, r0
 8003e64:	460c      	mov	r4, r1
 8003e66:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003e6a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8003e6e:	4323      	orrs	r3, r4
 8003e70:	d002      	beq.n	8003e78 <_ntoa_long_long+0xa8>
 8003e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e74:	2b1f      	cmp	r3, #31
 8003e76:	d9c5      	bls.n	8003e04 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003e78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e7c:	9206      	str	r2, [sp, #24]
 8003e7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003e80:	9205      	str	r2, [sp, #20]
 8003e82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e84:	9204      	str	r2, [sp, #16]
 8003e86:	9303      	str	r3, [sp, #12]
 8003e88:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003e8c:	9302      	str	r3, [sp, #8]
 8003e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	f107 0310 	add.w	r3, r7, #16
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f7ff fe53 	bl	8003b4a <_ntoa_format>
 8003ea4:	4603      	mov	r3, r0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	373c      	adds	r7, #60	; 0x3c
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd90      	pop	{r4, r7, pc}
	...

08003eb0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003eb0:	b590      	push	{r4, r7, lr}
 8003eb2:	b09d      	sub	sp, #116	; 0x74
 8003eb4:	af04      	add	r7, sp, #16
 8003eb6:	6178      	str	r0, [r7, #20]
 8003eb8:	6139      	str	r1, [r7, #16]
 8003eba:	60fa      	str	r2, [r7, #12]
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	f04f 0400 	mov.w	r4, #0
 8003ece:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8003ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ed6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003eda:	f7fc fd9d 	bl	8000a18 <__aeabi_dcmpeq>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10f      	bne.n	8003f04 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8003ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ee6:	9303      	str	r3, [sp, #12]
 8003ee8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eea:	9302      	str	r3, [sp, #8]
 8003eec:	2303      	movs	r3, #3
 8003eee:	9301      	str	r3, [sp, #4]
 8003ef0:	4bad      	ldr	r3, [pc, #692]	; (80041a8 <_ftoa+0x2f8>)
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	6939      	ldr	r1, [r7, #16]
 8003efa:	6978      	ldr	r0, [r7, #20]
 8003efc:	f7ff fdd5 	bl	8003aaa <_out_rev>
 8003f00:	4603      	mov	r3, r0
 8003f02:	e233      	b.n	800436c <_ftoa+0x4bc>
  if (value < -DBL_MAX)
 8003f04:	f04f 32ff 	mov.w	r2, #4294967295
 8003f08:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003f0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f10:	f7fc fd8c 	bl	8000a2c <__aeabi_dcmplt>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00f      	beq.n	8003f3a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8003f1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f1c:	9303      	str	r3, [sp, #12]
 8003f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f20:	9302      	str	r3, [sp, #8]
 8003f22:	2304      	movs	r3, #4
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	4ba1      	ldr	r3, [pc, #644]	; (80041ac <_ftoa+0x2fc>)
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	6939      	ldr	r1, [r7, #16]
 8003f30:	6978      	ldr	r0, [r7, #20]
 8003f32:	f7ff fdba 	bl	8003aaa <_out_rev>
 8003f36:	4603      	mov	r3, r0
 8003f38:	e218      	b.n	800436c <_ftoa+0x4bc>
  if (value > DBL_MAX)
 8003f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3e:	4b9c      	ldr	r3, [pc, #624]	; (80041b0 <_ftoa+0x300>)
 8003f40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f44:	f7fc fd90 	bl	8000a68 <__aeabi_dcmpgt>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d01d      	beq.n	8003f8a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <_ftoa+0xac>
 8003f58:	4b96      	ldr	r3, [pc, #600]	; (80041b4 <_ftoa+0x304>)
 8003f5a:	e000      	b.n	8003f5e <_ftoa+0xae>
 8003f5c:	4b96      	ldr	r3, [pc, #600]	; (80041b8 <_ftoa+0x308>)
 8003f5e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f60:	f002 0204 	and.w	r2, r2, #4
 8003f64:	2a00      	cmp	r2, #0
 8003f66:	d001      	beq.n	8003f6c <_ftoa+0xbc>
 8003f68:	2204      	movs	r2, #4
 8003f6a:	e000      	b.n	8003f6e <_ftoa+0xbe>
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003f70:	9103      	str	r1, [sp, #12]
 8003f72:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003f74:	9102      	str	r1, [sp, #8]
 8003f76:	9201      	str	r2, [sp, #4]
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	6939      	ldr	r1, [r7, #16]
 8003f80:	6978      	ldr	r0, [r7, #20]
 8003f82:	f7ff fd92 	bl	8003aaa <_out_rev>
 8003f86:	4603      	mov	r3, r0
 8003f88:	e1f0      	b.n	800436c <_ftoa+0x4bc>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8003f8a:	a383      	add	r3, pc, #524	; (adr r3, 8004198 <_ftoa+0x2e8>)
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f94:	f7fc fd68 	bl	8000a68 <__aeabi_dcmpgt>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <_ftoa+0x102>
 8003f9e:	a380      	add	r3, pc, #512	; (adr r3, 80041a0 <_ftoa+0x2f0>)
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fa8:	f7fc fd40 	bl	8000a2c <__aeabi_dcmplt>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00f      	beq.n	8003fd2 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fb4:	9302      	str	r3, [sp, #8]
 8003fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb8:	9301      	str	r3, [sp, #4]
 8003fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	ed97 0b00 	vldr	d0, [r7]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	6939      	ldr	r1, [r7, #16]
 8003fc8:	6978      	ldr	r0, [r7, #20]
 8003fca:	f000 f9d9 	bl	8004380 <_etoa>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	e1cc      	b.n	800436c <_ftoa+0x4bc>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fe4:	f7fc fd22 	bl	8000a2c <__aeabi_dcmplt>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00e      	beq.n	800400c <_ftoa+0x15c>
    negative = true;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8003ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ff8:	f04f 0000 	mov.w	r0, #0
 8003ffc:	f04f 0100 	mov.w	r1, #0
 8004000:	f7fc f8ee 	bl	80001e0 <__aeabi_dsub>
 8004004:	4603      	mov	r3, r0
 8004006:	460c      	mov	r4, r1
 8004008:	e887 0018 	stmia.w	r7, {r3, r4}
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800400c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800400e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10e      	bne.n	8004034 <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004016:	2306      	movs	r3, #6
 8004018:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800401a:	e00b      	b.n	8004034 <_ftoa+0x184>
    buf[len++] = '0';
 800401c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004022:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004026:	4413      	add	r3, r2
 8004028:	2230      	movs	r2, #48	; 0x30
 800402a:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800402e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004030:	3b01      	subs	r3, #1
 8004032:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8004034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004036:	2b1f      	cmp	r3, #31
 8004038:	d802      	bhi.n	8004040 <_ftoa+0x190>
 800403a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800403c:	2b09      	cmp	r3, #9
 800403e:	d8ed      	bhi.n	800401c <_ftoa+0x16c>
  }

  int whole = (int)value;
 8004040:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004044:	f7fc fd1a 	bl	8000a7c <__aeabi_d2iz>
 8004048:	4603      	mov	r3, r0
 800404a:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800404c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800404e:	f7fc fa15 	bl	800047c <__aeabi_i2d>
 8004052:	4603      	mov	r3, r0
 8004054:	460c      	mov	r4, r1
 8004056:	461a      	mov	r2, r3
 8004058:	4623      	mov	r3, r4
 800405a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800405e:	f7fc f8bf 	bl	80001e0 <__aeabi_dsub>
 8004062:	4603      	mov	r3, r0
 8004064:	460c      	mov	r4, r1
 8004066:	4618      	mov	r0, r3
 8004068:	4621      	mov	r1, r4
 800406a:	4a54      	ldr	r2, [pc, #336]	; (80041bc <_ftoa+0x30c>)
 800406c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4413      	add	r3, r2
 8004072:	cb18      	ldmia	r3, {r3, r4}
 8004074:	461a      	mov	r2, r3
 8004076:	4623      	mov	r3, r4
 8004078:	f7fc fa66 	bl	8000548 <__aeabi_dmul>
 800407c:	4603      	mov	r3, r0
 800407e:	460c      	mov	r4, r1
 8004080:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8004084:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004088:	f7fc fd20 	bl	8000acc <__aeabi_d2uiz>
 800408c:	4603      	mov	r3, r0
 800408e:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8004090:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004092:	f7fc f9e3 	bl	800045c <__aeabi_ui2d>
 8004096:	4603      	mov	r3, r0
 8004098:	460c      	mov	r4, r1
 800409a:	461a      	mov	r2, r3
 800409c:	4623      	mov	r3, r4
 800409e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80040a2:	f7fc f89d 	bl	80001e0 <__aeabi_dsub>
 80040a6:	4603      	mov	r3, r0
 80040a8:	460c      	mov	r4, r1
 80040aa:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  if (diff > 0.5) {
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	4b43      	ldr	r3, [pc, #268]	; (80041c0 <_ftoa+0x310>)
 80040b4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80040b8:	f7fc fcd6 	bl	8000a68 <__aeabi_dcmpgt>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d017      	beq.n	80040f2 <_ftoa+0x242>
    ++frac;
 80040c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c4:	3301      	adds	r3, #1
 80040c6:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80040c8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80040ca:	f7fc f9c7 	bl	800045c <__aeabi_ui2d>
 80040ce:	4a3b      	ldr	r2, [pc, #236]	; (80041bc <_ftoa+0x30c>)
 80040d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4413      	add	r3, r2
 80040d6:	cb18      	ldmia	r3, {r3, r4}
 80040d8:	461a      	mov	r2, r3
 80040da:	4623      	mov	r3, r4
 80040dc:	f7fc fcba 	bl	8000a54 <__aeabi_dcmpge>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d01a      	beq.n	800411c <_ftoa+0x26c>
      frac = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 80040ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ec:	3301      	adds	r3, #1
 80040ee:	657b      	str	r3, [r7, #84]	; 0x54
 80040f0:	e014      	b.n	800411c <_ftoa+0x26c>
    }
  }
  else if (diff < 0.5) {
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	4b32      	ldr	r3, [pc, #200]	; (80041c0 <_ftoa+0x310>)
 80040f8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80040fc:	f7fc fc96 	bl	8000a2c <__aeabi_dcmplt>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <_ftoa+0x26c>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8004106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004108:	2b00      	cmp	r3, #0
 800410a:	d004      	beq.n	8004116 <_ftoa+0x266>
 800410c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <_ftoa+0x26c>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8004116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004118:	3301      	adds	r3, #1
 800411a:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800411c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800411e:	2b00      	cmp	r3, #0
 8004120:	d136      	bne.n	8004190 <_ftoa+0x2e0>
    diff = value - (double)whole;
 8004122:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004124:	f7fc f9aa 	bl	800047c <__aeabi_i2d>
 8004128:	4603      	mov	r3, r0
 800412a:	460c      	mov	r4, r1
 800412c:	461a      	mov	r2, r3
 800412e:	4623      	mov	r3, r4
 8004130:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004134:	f7fc f854 	bl	80001e0 <__aeabi_dsub>
 8004138:	4603      	mov	r3, r0
 800413a:	460c      	mov	r4, r1
 800413c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8004140:	2301      	movs	r3, #1
 8004142:	461c      	mov	r4, r3
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <_ftoa+0x310>)
 800414a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800414e:	f7fc fc6d 	bl	8000a2c <__aeabi_dcmplt>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <_ftoa+0x2ac>
 8004158:	2300      	movs	r3, #0
 800415a:	461c      	mov	r4, r3
 800415c:	b2e3      	uxtb	r3, r4
 800415e:	f083 0301 	eor.w	r3, r3, #1
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d109      	bne.n	800417c <_ftoa+0x2cc>
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <_ftoa+0x310>)
 800416e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004172:	f7fc fc79 	bl	8000a68 <__aeabi_dcmpgt>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d067      	beq.n	800424c <_ftoa+0x39c>
 800417c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 8085 	beq.w	8004292 <_ftoa+0x3e2>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8004188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800418a:	3301      	adds	r3, #1
 800418c:	657b      	str	r3, [r7, #84]	; 0x54
 800418e:	e080      	b.n	8004292 <_ftoa+0x3e2>
    }
  }
  else {
    unsigned int count = prec;
 8004190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004192:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004194:	e037      	b.n	8004206 <_ftoa+0x356>
 8004196:	bf00      	nop
 8004198:	00000000 	.word	0x00000000
 800419c:	41cdcd65 	.word	0x41cdcd65
 80041a0:	00000000 	.word	0x00000000
 80041a4:	c1cdcd65 	.word	0xc1cdcd65
 80041a8:	080053ec 	.word	0x080053ec
 80041ac:	080053f0 	.word	0x080053f0
 80041b0:	7fefffff 	.word	0x7fefffff
 80041b4:	080053f8 	.word	0x080053f8
 80041b8:	08005400 	.word	0x08005400
 80041bc:	08005420 	.word	0x08005420
 80041c0:	3fe00000 	.word	0x3fe00000
      --count;
 80041c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c6:	3b01      	subs	r3, #1
 80041c8:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80041ca:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80041cc:	1c4b      	adds	r3, r1, #1
 80041ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041d0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80041d2:	4b68      	ldr	r3, [pc, #416]	; (8004374 <_ftoa+0x4c4>)
 80041d4:	fba3 2300 	umull	r2, r3, r3, r0
 80041d8:	08da      	lsrs	r2, r3, #3
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	1ac2      	subs	r2, r0, r3
 80041e4:	b2d3      	uxtb	r3, r2
 80041e6:	3330      	adds	r3, #48	; 0x30
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80041ee:	440b      	add	r3, r1
 80041f0:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80041f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f6:	4a5f      	ldr	r2, [pc, #380]	; (8004374 <_ftoa+0x4c4>)
 80041f8:	fba2 2303 	umull	r2, r3, r2, r3
 80041fc:	08db      	lsrs	r3, r3, #3
 80041fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <_ftoa+0x35e>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004208:	2b1f      	cmp	r3, #31
 800420a:	d9db      	bls.n	80041c4 <_ftoa+0x314>
 800420c:	e00a      	b.n	8004224 <_ftoa+0x374>
        break;
 800420e:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8004210:	e008      	b.n	8004224 <_ftoa+0x374>
      buf[len++] = '0';
 8004212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004218:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800421c:	4413      	add	r3, r2
 800421e:	2230      	movs	r2, #48	; 0x30
 8004220:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8004224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004226:	2b1f      	cmp	r3, #31
 8004228:	d804      	bhi.n	8004234 <_ftoa+0x384>
 800422a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800422c:	1e5a      	subs	r2, r3, #1
 800422e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1ee      	bne.n	8004212 <_ftoa+0x362>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004236:	2b1f      	cmp	r3, #31
 8004238:	d82b      	bhi.n	8004292 <_ftoa+0x3e2>
      // add decimal
      buf[len++] = '.';
 800423a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004240:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004244:	4413      	add	r3, r2
 8004246:	222e      	movs	r2, #46	; 0x2e
 8004248:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800424c:	e021      	b.n	8004292 <_ftoa+0x3e2>
    buf[len++] = (char)(48 + (whole % 10));
 800424e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004250:	1c43      	adds	r3, r0, #1
 8004252:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004254:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004256:	4b48      	ldr	r3, [pc, #288]	; (8004378 <_ftoa+0x4c8>)
 8004258:	fb83 1302 	smull	r1, r3, r3, r2
 800425c:	1099      	asrs	r1, r3, #2
 800425e:	17d3      	asrs	r3, r2, #31
 8004260:	1ac9      	subs	r1, r1, r3
 8004262:	460b      	mov	r3, r1
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	1ad1      	subs	r1, r2, r3
 800426c:	b2cb      	uxtb	r3, r1
 800426e:	3330      	adds	r3, #48	; 0x30
 8004270:	b2da      	uxtb	r2, r3
 8004272:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004276:	4403      	add	r3, r0
 8004278:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800427c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800427e:	4a3e      	ldr	r2, [pc, #248]	; (8004378 <_ftoa+0x4c8>)
 8004280:	fb82 1203 	smull	r1, r2, r2, r3
 8004284:	1092      	asrs	r2, r2, #2
 8004286:	17db      	asrs	r3, r3, #31
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	657b      	str	r3, [r7, #84]	; 0x54
 800428c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <_ftoa+0x3ea>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004294:	2b1f      	cmp	r3, #31
 8004296:	d9da      	bls.n	800424e <_ftoa+0x39e>
 8004298:	e000      	b.n	800429c <_ftoa+0x3ec>
      break;
 800429a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800429c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d124      	bne.n	80042f0 <_ftoa+0x440>
 80042a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01f      	beq.n	80042f0 <_ftoa+0x440>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80042b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d015      	beq.n	80042e2 <_ftoa+0x432>
 80042b6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d104      	bne.n	80042c8 <_ftoa+0x418>
 80042be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042c0:	f003 030c 	and.w	r3, r3, #12
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00c      	beq.n	80042e2 <_ftoa+0x432>
      width--;
 80042c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042ca:	3b01      	subs	r3, #1
 80042cc:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80042ce:	e008      	b.n	80042e2 <_ftoa+0x432>
      buf[len++] = '0';
 80042d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80042d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80042da:	4413      	add	r3, r2
 80042dc:	2230      	movs	r2, #48	; 0x30
 80042de:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80042e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d202      	bcs.n	80042f0 <_ftoa+0x440>
 80042ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ec:	2b1f      	cmp	r3, #31
 80042ee:	d9ef      	bls.n	80042d0 <_ftoa+0x420>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80042f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042f2:	2b1f      	cmp	r3, #31
 80042f4:	d82a      	bhi.n	800434c <_ftoa+0x49c>
    if (negative) {
 80042f6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d009      	beq.n	8004312 <_ftoa+0x462>
      buf[len++] = '-';
 80042fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004304:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004308:	4413      	add	r3, r2
 800430a:	222d      	movs	r2, #45	; 0x2d
 800430c:	f803 2c48 	strb.w	r2, [r3, #-72]
 8004310:	e01c      	b.n	800434c <_ftoa+0x49c>
    }
    else if (flags & FLAGS_PLUS) {
 8004312:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d009      	beq.n	8004330 <_ftoa+0x480>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800431c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004322:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004326:	4413      	add	r3, r2
 8004328:	222b      	movs	r2, #43	; 0x2b
 800432a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800432e:	e00d      	b.n	800434c <_ftoa+0x49c>
    }
    else if (flags & FLAGS_SPACE) {
 8004330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d008      	beq.n	800434c <_ftoa+0x49c>
      buf[len++] = ' ';
 800433a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004340:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004344:	4413      	add	r3, r2
 8004346:	2220      	movs	r2, #32
 8004348:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800434c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800434e:	9303      	str	r3, [sp, #12]
 8004350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004352:	9302      	str	r3, [sp, #8]
 8004354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004356:	9301      	str	r3, [sp, #4]
 8004358:	f107 0318 	add.w	r3, r7, #24
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	6939      	ldr	r1, [r7, #16]
 8004364:	6978      	ldr	r0, [r7, #20]
 8004366:	f7ff fba0 	bl	8003aaa <_out_rev>
 800436a:	4603      	mov	r3, r0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3764      	adds	r7, #100	; 0x64
 8004370:	46bd      	mov	sp, r7
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	cccccccd 	.word	0xcccccccd
 8004378:	66666667 	.word	0x66666667
 800437c:	00000000 	.word	0x00000000

08004380 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004384:	b09d      	sub	sp, #116	; 0x74
 8004386:	af06      	add	r7, sp, #24
 8004388:	61f8      	str	r0, [r7, #28]
 800438a:	61b9      	str	r1, [r7, #24]
 800438c:	617a      	str	r2, [r7, #20]
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8004394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004398:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800439c:	f7fc fb3c 	bl	8000a18 <__aeabi_dcmpeq>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d014      	beq.n	80043d0 <_etoa+0x50>
 80043a6:	f04f 32ff 	mov.w	r2, #4294967295
 80043aa:	4bbf      	ldr	r3, [pc, #764]	; (80046a8 <_etoa+0x328>)
 80043ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043b0:	f7fc fb5a 	bl	8000a68 <__aeabi_dcmpgt>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10a      	bne.n	80043d0 <_etoa+0x50>
 80043ba:	f04f 32ff 	mov.w	r2, #4294967295
 80043be:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80043c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043c6:	f7fc fb31 	bl	8000a2c <__aeabi_dcmplt>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d012      	beq.n	80043f6 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80043d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043d4:	9302      	str	r3, [sp, #8]
 80043d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043da:	9301      	str	r3, [sp, #4]
 80043dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	ed97 0b02 	vldr	d0, [r7, #8]
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	69b9      	ldr	r1, [r7, #24]
 80043ec:	69f8      	ldr	r0, [r7, #28]
 80043ee:	f7ff fd5f 	bl	8003eb0 <_ftoa>
 80043f2:	4603      	mov	r3, r0
 80043f4:	e23f      	b.n	8004876 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 80043f6:	2301      	movs	r3, #1
 80043f8:	461e      	mov	r6, r3
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	f04f 0300 	mov.w	r3, #0
 8004402:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004406:	f7fc fb11 	bl	8000a2c <__aeabi_dcmplt>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <_etoa+0x94>
 8004410:	2300      	movs	r3, #0
 8004412:	461e      	mov	r6, r3
 8004414:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8004418:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <_etoa+0xac>
    value = -value;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	60bb      	str	r3, [r7, #8]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800442a:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800442c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004434:	2b00      	cmp	r3, #0
 8004436:	d102      	bne.n	800443e <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004438:	2306      	movs	r3, #6
 800443a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800443e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004442:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8004446:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800444a:	ea4f 5813 	mov.w	r8, r3, lsr #20
 800444e:	f04f 0900 	mov.w	r9, #0
 8004452:	4643      	mov	r3, r8
 8004454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004458:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800445c:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800445e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004462:	f04f 30ff 	mov.w	r0, #4294967295
 8004466:	4991      	ldr	r1, [pc, #580]	; (80046ac <_etoa+0x32c>)
 8004468:	ea02 0200 	and.w	r2, r2, r0
 800446c:	ea03 0301 	and.w	r3, r3, r1
 8004470:	f04f 0000 	mov.w	r0, #0
 8004474:	498e      	ldr	r1, [pc, #568]	; (80046b0 <_etoa+0x330>)
 8004476:	ea42 0200 	orr.w	r2, r2, r0
 800447a:	ea43 0301 	orr.w	r3, r3, r1
 800447e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8004482:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004484:	f7fb fffa 	bl	800047c <__aeabi_i2d>
 8004488:	a37b      	add	r3, pc, #492	; (adr r3, 8004678 <_etoa+0x2f8>)
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	f7fc f85b 	bl	8000548 <__aeabi_dmul>
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	4610      	mov	r0, r2
 8004498:	4619      	mov	r1, r3
 800449a:	a379      	add	r3, pc, #484	; (adr r3, 8004680 <_etoa+0x300>)
 800449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a0:	f7fb fea0 	bl	80001e4 <__adddf3>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4690      	mov	r8, r2
 80044aa:	4699      	mov	r9, r3
 80044ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	4b7f      	ldr	r3, [pc, #508]	; (80046b4 <_etoa+0x334>)
 80044b6:	f7fb fe93 	bl	80001e0 <__aeabi_dsub>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	4610      	mov	r0, r2
 80044c0:	4619      	mov	r1, r3
 80044c2:	a371      	add	r3, pc, #452	; (adr r3, 8004688 <_etoa+0x308>)
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	f7fc f83e 	bl	8000548 <__aeabi_dmul>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4640      	mov	r0, r8
 80044d2:	4649      	mov	r1, r9
 80044d4:	f7fb fe86 	bl	80001e4 <__adddf3>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4610      	mov	r0, r2
 80044de:	4619      	mov	r1, r3
 80044e0:	f7fc facc 	bl	8000a7c <__aeabi_d2iz>
 80044e4:	4603      	mov	r3, r0
 80044e6:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80044e8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80044ea:	f7fb ffc7 	bl	800047c <__aeabi_i2d>
 80044ee:	a368      	add	r3, pc, #416	; (adr r3, 8004690 <_etoa+0x310>)
 80044f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f4:	f7fc f828 	bl	8000548 <__aeabi_dmul>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4610      	mov	r0, r2
 80044fe:	4619      	mov	r1, r3
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	4b6c      	ldr	r3, [pc, #432]	; (80046b8 <_etoa+0x338>)
 8004506:	f7fb fe6d 	bl	80001e4 <__adddf3>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4610      	mov	r0, r2
 8004510:	4619      	mov	r1, r3
 8004512:	f7fc fab3 	bl	8000a7c <__aeabi_d2iz>
 8004516:	4603      	mov	r3, r0
 8004518:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800451a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800451c:	f7fb ffae 	bl	800047c <__aeabi_i2d>
 8004520:	a35d      	add	r3, pc, #372	; (adr r3, 8004698 <_etoa+0x318>)
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	f7fc f80f 	bl	8000548 <__aeabi_dmul>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4690      	mov	r8, r2
 8004530:	4699      	mov	r9, r3
 8004532:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004534:	f7fb ffa2 	bl	800047c <__aeabi_i2d>
 8004538:	a359      	add	r3, pc, #356	; (adr r3, 80046a0 <_etoa+0x320>)
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	f7fc f803 	bl	8000548 <__aeabi_dmul>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4640      	mov	r0, r8
 8004548:	4649      	mov	r1, r9
 800454a:	f7fb fe49 	bl	80001e0 <__aeabi_dsub>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 8004556:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800455a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800455e:	f7fb fff3 	bl	8000548 <__aeabi_dmul>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800456a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800456c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8004570:	461a      	mov	r2, r3
 8004572:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8004576:	0515      	lsls	r5, r2, #20
 8004578:	2400      	movs	r4, #0
 800457a:	e9c7 4508 	strd	r4, r5, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800457e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004582:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	f7fb fe2b 	bl	80001e4 <__adddf3>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4690      	mov	r8, r2
 8004594:	4699      	mov	r9, r3
 8004596:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800459a:	f04f 0000 	mov.w	r0, #0
 800459e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80045a2:	f7fb fe1d 	bl	80001e0 <__aeabi_dsub>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4692      	mov	sl, r2
 80045ac:	469b      	mov	fp, r3
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	4b42      	ldr	r3, [pc, #264]	; (80046bc <_etoa+0x33c>)
 80045b4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80045b8:	f7fc f8f0 	bl	800079c <__aeabi_ddiv>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4610      	mov	r0, r2
 80045c2:	4619      	mov	r1, r3
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	4b3d      	ldr	r3, [pc, #244]	; (80046c0 <_etoa+0x340>)
 80045ca:	f7fb fe0b 	bl	80001e4 <__adddf3>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80045d6:	f7fc f8e1 	bl	800079c <__aeabi_ddiv>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4610      	mov	r0, r2
 80045e0:	4619      	mov	r1, r3
 80045e2:	f04f 0200 	mov.w	r2, #0
 80045e6:	4b37      	ldr	r3, [pc, #220]	; (80046c4 <_etoa+0x344>)
 80045e8:	f7fb fdfc 	bl	80001e4 <__adddf3>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80045f4:	f7fc f8d2 	bl	800079c <__aeabi_ddiv>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4650      	mov	r0, sl
 80045fe:	4659      	mov	r1, fp
 8004600:	f7fb fdf0 	bl	80001e4 <__adddf3>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4640      	mov	r0, r8
 800460a:	4649      	mov	r1, r9
 800460c:	f7fc f8c6 	bl	800079c <__aeabi_ddiv>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4610      	mov	r0, r2
 8004616:	4619      	mov	r1, r3
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <_etoa+0x330>)
 800461e:	f7fb fde1 	bl	80001e4 <__adddf3>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4620      	mov	r0, r4
 8004628:	4629      	mov	r1, r5
 800462a:	f7fb ff8d 	bl	8000548 <__aeabi_dmul>
 800462e:	4603      	mov	r3, r0
 8004630:	460c      	mov	r4, r1
 8004632:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8004636:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800463a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800463e:	f7fc fa13 	bl	8000a68 <__aeabi_dcmpgt>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00d      	beq.n	8004664 <_etoa+0x2e4>
    expval--;
 8004648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800464a:	3b01      	subs	r3, #1
 800464c:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 800464e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <_etoa+0x340>)
 8004658:	f7fc f8a0 	bl	800079c <__aeabi_ddiv>
 800465c:	4603      	mov	r3, r0
 800465e:	460c      	mov	r4, r1
 8004660:	e9c7 3408 	strd	r3, r4, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8004664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004666:	2b63      	cmp	r3, #99	; 0x63
 8004668:	dc2e      	bgt.n	80046c8 <_etoa+0x348>
 800466a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800466c:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8004670:	db2a      	blt.n	80046c8 <_etoa+0x348>
 8004672:	2304      	movs	r3, #4
 8004674:	e029      	b.n	80046ca <_etoa+0x34a>
 8004676:	bf00      	nop
 8004678:	509f79fb 	.word	0x509f79fb
 800467c:	3fd34413 	.word	0x3fd34413
 8004680:	8b60c8b3 	.word	0x8b60c8b3
 8004684:	3fc68a28 	.word	0x3fc68a28
 8004688:	636f4361 	.word	0x636f4361
 800468c:	3fd287a7 	.word	0x3fd287a7
 8004690:	0979a371 	.word	0x0979a371
 8004694:	400a934f 	.word	0x400a934f
 8004698:	bbb55516 	.word	0xbbb55516
 800469c:	40026bb1 	.word	0x40026bb1
 80046a0:	fefa39ef 	.word	0xfefa39ef
 80046a4:	3fe62e42 	.word	0x3fe62e42
 80046a8:	7fefffff 	.word	0x7fefffff
 80046ac:	000fffff 	.word	0x000fffff
 80046b0:	3ff00000 	.word	0x3ff00000
 80046b4:	3ff80000 	.word	0x3ff80000
 80046b8:	3fe00000 	.word	0x3fe00000
 80046bc:	402c0000 	.word	0x402c0000
 80046c0:	40240000 	.word	0x40240000
 80046c4:	40180000 	.word	0x40180000
 80046c8:	2305      	movs	r3, #5
 80046ca:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80046cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d03d      	beq.n	8004754 <_etoa+0x3d4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80046d8:	a369      	add	r3, pc, #420	; (adr r3, 8004880 <_etoa+0x500>)
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046e2:	f7fc f9b7 	bl	8000a54 <__aeabi_dcmpge>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d024      	beq.n	8004736 <_etoa+0x3b6>
 80046ec:	a366      	add	r3, pc, #408	; (adr r3, 8004888 <_etoa+0x508>)
 80046ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046f6:	f7fc f999 	bl	8000a2c <__aeabi_dcmplt>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01a      	beq.n	8004736 <_etoa+0x3b6>
      if ((int)prec > expval) {
 8004700:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004706:	429a      	cmp	r2, r3
 8004708:	dd07      	ble.n	800471a <_etoa+0x39a>
        prec = (unsigned)((int)prec - expval - 1);
 800470a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800470e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004718:	e002      	b.n	8004720 <_etoa+0x3a0>
      }
      else {
        prec = 0;
 800471a:	2300      	movs	r3, #0
 800471c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8004720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004724:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8004730:	2300      	movs	r3, #0
 8004732:	657b      	str	r3, [r7, #84]	; 0x54
 8004734:	e00e      	b.n	8004754 <_etoa+0x3d4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8004736:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <_etoa+0x3d4>
 800473e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004746:	2b00      	cmp	r3, #0
 8004748:	d004      	beq.n	8004754 <_etoa+0x3d4>
        --prec;
 800474a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800474e:	3b01      	subs	r3, #1
 8004750:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004758:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 800475a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800475e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004760:	429a      	cmp	r2, r3
 8004762:	d904      	bls.n	800476e <_etoa+0x3ee>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8004764:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800476c:	e001      	b.n	8004772 <_etoa+0x3f2>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8004772:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d004      	beq.n	8004788 <_etoa+0x408>
 800477e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <_etoa+0x408>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8004788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <_etoa+0x426>
    value /= conv.F;
 800478e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004792:	461a      	mov	r2, r3
 8004794:	4623      	mov	r3, r4
 8004796:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800479a:	f7fb ffff 	bl	800079c <__aeabi_ddiv>
 800479e:	4603      	mov	r3, r0
 80047a0:	460c      	mov	r4, r1
 80047a2:	e9c7 3402 	strd	r3, r4, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80047aa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d006      	beq.n	80047c0 <_etoa+0x440>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80047bc:	607b      	str	r3, [r7, #4]
 80047be:	e003      	b.n	80047c8 <_etoa+0x448>
 80047c0:	ed97 7b02 	vldr	d7, [r7, #8]
 80047c4:	ed87 7b00 	vstr	d7, [r7]
 80047c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047d0:	9302      	str	r3, [sp, #8]
 80047d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d4:	9301      	str	r3, [sp, #4]
 80047d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	ed97 0b00 	vldr	d0, [r7]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	69b9      	ldr	r1, [r7, #24]
 80047e6:	69f8      	ldr	r0, [r7, #28]
 80047e8:	f7ff fb62 	bl	8003eb0 <_ftoa>
 80047ec:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 80047ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d03f      	beq.n	8004874 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80047f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047f8:	f003 0320 	and.w	r3, r3, #32
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <_etoa+0x484>
 8004800:	2045      	movs	r0, #69	; 0x45
 8004802:	e000      	b.n	8004806 <_etoa+0x486>
 8004804:	2065      	movs	r0, #101	; 0x65
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	1c53      	adds	r3, r2, #1
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	69fc      	ldr	r4, [r7, #28]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	69b9      	ldr	r1, [r7, #24]
 8004812:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004816:	2b00      	cmp	r3, #0
 8004818:	bfb8      	it	lt
 800481a:	425b      	neglt	r3, r3
 800481c:	4618      	mov	r0, r3
 800481e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004820:	0fdb      	lsrs	r3, r3, #31
 8004822:	b2db      	uxtb	r3, r3
 8004824:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004826:	3a01      	subs	r2, #1
 8004828:	2105      	movs	r1, #5
 800482a:	9105      	str	r1, [sp, #20]
 800482c:	9204      	str	r2, [sp, #16]
 800482e:	2200      	movs	r2, #0
 8004830:	9203      	str	r2, [sp, #12]
 8004832:	220a      	movs	r2, #10
 8004834:	9202      	str	r2, [sp, #8]
 8004836:	9301      	str	r3, [sp, #4]
 8004838:	9000      	str	r0, [sp, #0]
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	69b9      	ldr	r1, [r7, #24]
 8004840:	69f8      	ldr	r0, [r7, #28]
 8004842:	f7ff fa5e 	bl	8003d02 <_ntoa_long>
 8004846:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004848:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00f      	beq.n	8004874 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8004854:	e007      	b.n	8004866 <_etoa+0x4e6>
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	1c53      	adds	r3, r2, #1
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	69fc      	ldr	r4, [r7, #28]
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	69b9      	ldr	r1, [r7, #24]
 8004862:	2020      	movs	r0, #32
 8004864:	47a0      	blx	r4
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486a:	1ad2      	subs	r2, r2, r3
 800486c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004870:	429a      	cmp	r2, r3
 8004872:	d3f0      	bcc.n	8004856 <_etoa+0x4d6>
    }
  }
  return idx;
 8004874:	697b      	ldr	r3, [r7, #20]
}
 8004876:	4618      	mov	r0, r3
 8004878:	375c      	adds	r7, #92	; 0x5c
 800487a:	46bd      	mov	sp, r7
 800487c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004880:	eb1c432d 	.word	0xeb1c432d
 8004884:	3f1a36e2 	.word	0x3f1a36e2
 8004888:	00000000 	.word	0x00000000
 800488c:	412e8480 	.word	0x412e8480

08004890 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8004890:	b5b0      	push	{r4, r5, r7, lr}
 8004892:	b0a0      	sub	sp, #128	; 0x80
 8004894:	af0a      	add	r7, sp, #40	; 0x28
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f040 848e 	bne.w	80051c6 <_vsnprintf+0x936>
    // use null output function
    out = _out_null;
 80048aa:	4ba0      	ldr	r3, [pc, #640]	; (8004b2c <_vsnprintf+0x29c>)
 80048ac:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 80048ae:	f000 bc8a 	b.w	80051c6 <_vsnprintf+0x936>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b25      	cmp	r3, #37	; 0x25
 80048b8:	d00d      	beq.n	80048d6 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	7818      	ldrb	r0, [r3, #0]
 80048be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048c0:	1c53      	adds	r3, r2, #1
 80048c2:	647b      	str	r3, [r7, #68]	; 0x44
 80048c4:	68fc      	ldr	r4, [r7, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	47a0      	blx	r4
      format++;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	3301      	adds	r3, #1
 80048d0:	603b      	str	r3, [r7, #0]
      continue;
 80048d2:	f000 bc78 	b.w	80051c6 <_vsnprintf+0x936>
    }
    else {
      // yes, evaluate it
      format++;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	3301      	adds	r3, #1
 80048da:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	3b20      	subs	r3, #32
 80048e6:	2b10      	cmp	r3, #16
 80048e8:	d856      	bhi.n	8004998 <_vsnprintf+0x108>
 80048ea:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <_vsnprintf+0x60>)
 80048ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f0:	08004971 	.word	0x08004971
 80048f4:	08004999 	.word	0x08004999
 80048f8:	08004999 	.word	0x08004999
 80048fc:	08004985 	.word	0x08004985
 8004900:	08004999 	.word	0x08004999
 8004904:	08004999 	.word	0x08004999
 8004908:	08004999 	.word	0x08004999
 800490c:	08004999 	.word	0x08004999
 8004910:	08004999 	.word	0x08004999
 8004914:	08004999 	.word	0x08004999
 8004918:	08004999 	.word	0x08004999
 800491c:	0800495d 	.word	0x0800495d
 8004920:	08004999 	.word	0x08004999
 8004924:	08004949 	.word	0x08004949
 8004928:	08004999 	.word	0x08004999
 800492c:	08004999 	.word	0x08004999
 8004930:	08004935 	.word	0x08004935
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8004934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004936:	f043 0301 	orr.w	r3, r3, #1
 800493a:	657b      	str	r3, [r7, #84]	; 0x54
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	3301      	adds	r3, #1
 8004940:	603b      	str	r3, [r7, #0]
 8004942:	2301      	movs	r3, #1
 8004944:	64bb      	str	r3, [r7, #72]	; 0x48
 8004946:	e02a      	b.n	800499e <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8004948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800494a:	f043 0302 	orr.w	r3, r3, #2
 800494e:	657b      	str	r3, [r7, #84]	; 0x54
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	3301      	adds	r3, #1
 8004954:	603b      	str	r3, [r7, #0]
 8004956:	2301      	movs	r3, #1
 8004958:	64bb      	str	r3, [r7, #72]	; 0x48
 800495a:	e020      	b.n	800499e <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800495c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800495e:	f043 0304 	orr.w	r3, r3, #4
 8004962:	657b      	str	r3, [r7, #84]	; 0x54
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	3301      	adds	r3, #1
 8004968:	603b      	str	r3, [r7, #0]
 800496a:	2301      	movs	r3, #1
 800496c:	64bb      	str	r3, [r7, #72]	; 0x48
 800496e:	e016      	b.n	800499e <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8004970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004972:	f043 0308 	orr.w	r3, r3, #8
 8004976:	657b      	str	r3, [r7, #84]	; 0x54
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	3301      	adds	r3, #1
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	2301      	movs	r3, #1
 8004980:	64bb      	str	r3, [r7, #72]	; 0x48
 8004982:	e00c      	b.n	800499e <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8004984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004986:	f043 0310 	orr.w	r3, r3, #16
 800498a:	657b      	str	r3, [r7, #84]	; 0x54
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	3301      	adds	r3, #1
 8004990:	603b      	str	r3, [r7, #0]
 8004992:	2301      	movs	r3, #1
 8004994:	64bb      	str	r3, [r7, #72]	; 0x48
 8004996:	e002      	b.n	800499e <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8004998:	2300      	movs	r3, #0
 800499a:	64bb      	str	r3, [r7, #72]	; 0x48
 800499c:	bf00      	nop
      }
    } while (n);
 800499e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d19d      	bne.n	80048e0 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff f841 	bl	8003a34 <_is_digit>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <_vsnprintf+0x134>
      width = _atoi(&format);
 80049b8:	463b      	mov	r3, r7
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff f851 	bl	8003a62 <_atoi>
 80049c0:	6538      	str	r0, [r7, #80]	; 0x50
 80049c2:	e018      	b.n	80049f6 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b2a      	cmp	r3, #42	; 0x2a
 80049ca:	d114      	bne.n	80049f6 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 80049cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049ce:	1d1a      	adds	r2, r3, #4
 80049d0:	66ba      	str	r2, [r7, #104]	; 0x68
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	2b00      	cmp	r3, #0
 80049da:	da07      	bge.n	80049ec <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 80049dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049de:	f043 0302 	orr.w	r3, r3, #2
 80049e2:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	425b      	negs	r3, r3
 80049e8:	653b      	str	r3, [r7, #80]	; 0x50
 80049ea:	e001      	b.n	80049f0 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	3301      	adds	r3, #1
 80049f4:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b2e      	cmp	r3, #46	; 0x2e
 8004a00:	d124      	bne.n	8004a4c <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 8004a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a08:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff f80d 	bl	8003a34 <_is_digit>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8004a20:	463b      	mov	r3, r7
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff f81d 	bl	8003a62 <_atoi>
 8004a28:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004a2a:	e00f      	b.n	8004a4c <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b2a      	cmp	r3, #42	; 0x2a
 8004a32:	d10b      	bne.n	8004a4c <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 8004a34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a36:	1d1a      	adds	r2, r3, #4
 8004a38:	66ba      	str	r2, [r7, #104]	; 0x68
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004a44:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	3b68      	subs	r3, #104	; 0x68
 8004a52:	2b12      	cmp	r3, #18
 8004a54:	d866      	bhi.n	8004b24 <_vsnprintf+0x294>
 8004a56:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <_vsnprintf+0x1cc>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004acf 	.word	0x08004acf
 8004a60:	08004b25 	.word	0x08004b25
 8004a64:	08004b05 	.word	0x08004b05
 8004a68:	08004b25 	.word	0x08004b25
 8004a6c:	08004aa9 	.word	0x08004aa9
 8004a70:	08004b25 	.word	0x08004b25
 8004a74:	08004b25 	.word	0x08004b25
 8004a78:	08004b25 	.word	0x08004b25
 8004a7c:	08004b25 	.word	0x08004b25
 8004a80:	08004b25 	.word	0x08004b25
 8004a84:	08004b25 	.word	0x08004b25
 8004a88:	08004b25 	.word	0x08004b25
 8004a8c:	08004af5 	.word	0x08004af5
 8004a90:	08004b25 	.word	0x08004b25
 8004a94:	08004b25 	.word	0x08004b25
 8004a98:	08004b25 	.word	0x08004b25
 8004a9c:	08004b25 	.word	0x08004b25
 8004aa0:	08004b25 	.word	0x08004b25
 8004aa4:	08004b15 	.word	0x08004b15
      case 'l' :
        flags |= FLAGS_LONG;
 8004aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aae:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b6c      	cmp	r3, #108	; 0x6c
 8004abc:	d134      	bne.n	8004b28 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 8004abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ac0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ac4:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	603b      	str	r3, [r7, #0]
        }
        break;
 8004acc:	e02c      	b.n	8004b28 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 8004ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b68      	cmp	r3, #104	; 0x68
 8004ae2:	d125      	bne.n	8004b30 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8004ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aea:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	3301      	adds	r3, #1
 8004af0:	603b      	str	r3, [r7, #0]
        }
        break;
 8004af2:	e01d      	b.n	8004b30 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004afa:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	3301      	adds	r3, #1
 8004b00:	603b      	str	r3, [r7, #0]
        break;
 8004b02:	e016      	b.n	8004b32 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b0a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	603b      	str	r3, [r7, #0]
        break;
 8004b12:	e00e      	b.n	8004b32 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b1a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	603b      	str	r3, [r7, #0]
        break;
 8004b22:	e006      	b.n	8004b32 <_vsnprintf+0x2a2>
      default :
        break;
 8004b24:	bf00      	nop
 8004b26:	e004      	b.n	8004b32 <_vsnprintf+0x2a2>
        break;
 8004b28:	bf00      	nop
 8004b2a:	e002      	b.n	8004b32 <_vsnprintf+0x2a2>
 8004b2c:	080039b9 	.word	0x080039b9
        break;
 8004b30:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	3b25      	subs	r3, #37	; 0x25
 8004b38:	2b53      	cmp	r3, #83	; 0x53
 8004b3a:	f200 8337 	bhi.w	80051ac <_vsnprintf+0x91c>
 8004b3e:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <_vsnprintf+0x2b4>)
 8004b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b44:	08005195 	.word	0x08005195
 8004b48:	080051ad 	.word	0x080051ad
 8004b4c:	080051ad 	.word	0x080051ad
 8004b50:	080051ad 	.word	0x080051ad
 8004b54:	080051ad 	.word	0x080051ad
 8004b58:	080051ad 	.word	0x080051ad
 8004b5c:	080051ad 	.word	0x080051ad
 8004b60:	080051ad 	.word	0x080051ad
 8004b64:	080051ad 	.word	0x080051ad
 8004b68:	080051ad 	.word	0x080051ad
 8004b6c:	080051ad 	.word	0x080051ad
 8004b70:	080051ad 	.word	0x080051ad
 8004b74:	080051ad 	.word	0x080051ad
 8004b78:	080051ad 	.word	0x080051ad
 8004b7c:	080051ad 	.word	0x080051ad
 8004b80:	080051ad 	.word	0x080051ad
 8004b84:	080051ad 	.word	0x080051ad
 8004b88:	080051ad 	.word	0x080051ad
 8004b8c:	080051ad 	.word	0x080051ad
 8004b90:	080051ad 	.word	0x080051ad
 8004b94:	080051ad 	.word	0x080051ad
 8004b98:	080051ad 	.word	0x080051ad
 8004b9c:	080051ad 	.word	0x080051ad
 8004ba0:	080051ad 	.word	0x080051ad
 8004ba4:	080051ad 	.word	0x080051ad
 8004ba8:	080051ad 	.word	0x080051ad
 8004bac:	080051ad 	.word	0x080051ad
 8004bb0:	080051ad 	.word	0x080051ad
 8004bb4:	080051ad 	.word	0x080051ad
 8004bb8:	080051ad 	.word	0x080051ad
 8004bbc:	080051ad 	.word	0x080051ad
 8004bc0:	080051ad 	.word	0x080051ad
 8004bc4:	08004f69 	.word	0x08004f69
 8004bc8:	08004f1d 	.word	0x08004f1d
 8004bcc:	08004f69 	.word	0x08004f69
 8004bd0:	080051ad 	.word	0x080051ad
 8004bd4:	080051ad 	.word	0x080051ad
 8004bd8:	080051ad 	.word	0x080051ad
 8004bdc:	080051ad 	.word	0x080051ad
 8004be0:	080051ad 	.word	0x080051ad
 8004be4:	080051ad 	.word	0x080051ad
 8004be8:	080051ad 	.word	0x080051ad
 8004bec:	080051ad 	.word	0x080051ad
 8004bf0:	080051ad 	.word	0x080051ad
 8004bf4:	080051ad 	.word	0x080051ad
 8004bf8:	080051ad 	.word	0x080051ad
 8004bfc:	080051ad 	.word	0x080051ad
 8004c00:	080051ad 	.word	0x080051ad
 8004c04:	080051ad 	.word	0x080051ad
 8004c08:	080051ad 	.word	0x080051ad
 8004c0c:	080051ad 	.word	0x080051ad
 8004c10:	08004c95 	.word	0x08004c95
 8004c14:	080051ad 	.word	0x080051ad
 8004c18:	080051ad 	.word	0x080051ad
 8004c1c:	080051ad 	.word	0x080051ad
 8004c20:	080051ad 	.word	0x080051ad
 8004c24:	080051ad 	.word	0x080051ad
 8004c28:	080051ad 	.word	0x080051ad
 8004c2c:	080051ad 	.word	0x080051ad
 8004c30:	080051ad 	.word	0x080051ad
 8004c34:	080051ad 	.word	0x080051ad
 8004c38:	08004c95 	.word	0x08004c95
 8004c3c:	08004fd5 	.word	0x08004fd5
 8004c40:	08004c95 	.word	0x08004c95
 8004c44:	08004f69 	.word	0x08004f69
 8004c48:	08004f1d 	.word	0x08004f1d
 8004c4c:	08004f69 	.word	0x08004f69
 8004c50:	080051ad 	.word	0x080051ad
 8004c54:	08004c95 	.word	0x08004c95
 8004c58:	080051ad 	.word	0x080051ad
 8004c5c:	080051ad 	.word	0x080051ad
 8004c60:	080051ad 	.word	0x080051ad
 8004c64:	080051ad 	.word	0x080051ad
 8004c68:	080051ad 	.word	0x080051ad
 8004c6c:	08004c95 	.word	0x08004c95
 8004c70:	0800510d 	.word	0x0800510d
 8004c74:	080051ad 	.word	0x080051ad
 8004c78:	080051ad 	.word	0x080051ad
 8004c7c:	08005049 	.word	0x08005049
 8004c80:	080051ad 	.word	0x080051ad
 8004c84:	08004c95 	.word	0x08004c95
 8004c88:	080051ad 	.word	0x080051ad
 8004c8c:	080051ad 	.word	0x080051ad
 8004c90:	08004c95 	.word	0x08004c95
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b78      	cmp	r3, #120	; 0x78
 8004c9a:	d003      	beq.n	8004ca4 <_vsnprintf+0x414>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b58      	cmp	r3, #88	; 0x58
 8004ca2:	d102      	bne.n	8004caa <_vsnprintf+0x41a>
          base = 16U;
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ca8:	e013      	b.n	8004cd2 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b6f      	cmp	r3, #111	; 0x6f
 8004cb0:	d102      	bne.n	8004cb8 <_vsnprintf+0x428>
          base =  8U;
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	643b      	str	r3, [r7, #64]	; 0x40
 8004cb6:	e00c      	b.n	8004cd2 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b62      	cmp	r3, #98	; 0x62
 8004cbe:	d102      	bne.n	8004cc6 <_vsnprintf+0x436>
          base =  2U;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	643b      	str	r3, [r7, #64]	; 0x40
 8004cc4:	e005      	b.n	8004cd2 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8004cc6:	230a      	movs	r3, #10
 8004cc8:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8004cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ccc:	f023 0310 	bic.w	r3, r3, #16
 8004cd0:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b58      	cmp	r3, #88	; 0x58
 8004cd8:	d103      	bne.n	8004ce2 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8004cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cdc:	f043 0320 	orr.w	r3, r3, #32
 8004ce0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b69      	cmp	r3, #105	; 0x69
 8004ce8:	d007      	beq.n	8004cfa <_vsnprintf+0x46a>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b64      	cmp	r3, #100	; 0x64
 8004cf0:	d003      	beq.n	8004cfa <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf4:	f023 030c 	bic.w	r3, r3, #12
 8004cf8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8004cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 8004d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d06:	f023 0301 	bic.w	r3, r3, #1
 8004d0a:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b69      	cmp	r3, #105	; 0x69
 8004d12:	d004      	beq.n	8004d1e <_vsnprintf+0x48e>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b64      	cmp	r3, #100	; 0x64
 8004d1a:	f040 808c 	bne.w	8004e36 <_vsnprintf+0x5a6>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8004d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d02d      	beq.n	8004d84 <_vsnprintf+0x4f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8004d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d2a:	3307      	adds	r3, #7
 8004d2c:	f023 0307 	bic.w	r3, r3, #7
 8004d30:	f103 0208 	add.w	r2, r3, #8
 8004d34:	66ba      	str	r2, [r7, #104]	; 0x68
 8004d36:	cb18      	ldmia	r3, {r3, r4}
 8004d38:	e9c7 3408 	strd	r3, r4, [r7, #32]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004d3c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f174 0200 	sbcs.w	r2, r4, #0
 8004d46:	da02      	bge.n	8004d4e <_vsnprintf+0x4be>
 8004d48:	425b      	negs	r3, r3
 8004d4a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4622      	mov	r2, r4
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	0fdb      	lsrs	r3, r3, #31
 8004d56:	b2d8      	uxtb	r0, r3
 8004d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d5a:	f04f 0400 	mov.w	r4, #0
 8004d5e:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8004d60:	9508      	str	r5, [sp, #32]
 8004d62:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8004d64:	9507      	str	r5, [sp, #28]
 8004d66:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8004d68:	9506      	str	r5, [sp, #24]
 8004d6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004d6e:	9002      	str	r0, [sp, #8]
 8004d70:	e88d 0006 	stmia.w	sp, {r1, r2}
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f7ff f828 	bl	8003dd0 <_ntoa_long_long>
 8004d80:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8004d82:	e0c7      	b.n	8004f14 <_vsnprintf+0x684>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d01e      	beq.n	8004dcc <_vsnprintf+0x53c>
            const long value = va_arg(va, long);
 8004d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d90:	1d1a      	adds	r2, r3, #4
 8004d92:	66ba      	str	r2, [r7, #104]	; 0x68
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bfb8      	it	lt
 8004d9e:	425b      	neglt	r3, r3
 8004da0:	4619      	mov	r1, r3
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	0fdb      	lsrs	r3, r3, #31
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004daa:	9205      	str	r2, [sp, #20]
 8004dac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004dae:	9204      	str	r2, [sp, #16]
 8004db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004db2:	9203      	str	r2, [sp, #12]
 8004db4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004db6:	9202      	str	r2, [sp, #8]
 8004db8:	9301      	str	r3, [sp, #4]
 8004dba:	9100      	str	r1, [sp, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f7fe ff9d 	bl	8003d02 <_ntoa_long>
 8004dc8:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8004dca:	e0a3      	b.n	8004f14 <_vsnprintf+0x684>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8004dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <_vsnprintf+0x552>
 8004dd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dd8:	1d1a      	adds	r2, r3, #4
 8004dda:	66ba      	str	r2, [r7, #104]	; 0x68
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	e00e      	b.n	8004e00 <_vsnprintf+0x570>
 8004de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <_vsnprintf+0x568>
 8004dec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dee:	1d1a      	adds	r2, r3, #4
 8004df0:	66ba      	str	r2, [r7, #104]	; 0x68
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	b21b      	sxth	r3, r3
 8004df6:	e003      	b.n	8004e00 <_vsnprintf+0x570>
 8004df8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dfa:	1d1a      	adds	r2, r3, #4
 8004dfc:	66ba      	str	r2, [r7, #104]	; 0x68
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	61bb      	str	r3, [r7, #24]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bfb8      	it	lt
 8004e08:	425b      	neglt	r3, r3
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	0fdb      	lsrs	r3, r3, #31
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e14:	9205      	str	r2, [sp, #20]
 8004e16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e18:	9204      	str	r2, [sp, #16]
 8004e1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e1c:	9203      	str	r2, [sp, #12]
 8004e1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e20:	9202      	str	r2, [sp, #8]
 8004e22:	9301      	str	r3, [sp, #4]
 8004e24:	9100      	str	r1, [sp, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f7fe ff68 	bl	8003d02 <_ntoa_long>
 8004e32:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8004e34:	e06e      	b.n	8004f14 <_vsnprintf+0x684>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8004e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01f      	beq.n	8004e80 <_vsnprintf+0x5f0>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8004e40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e42:	3307      	adds	r3, #7
 8004e44:	f023 0307 	bic.w	r3, r3, #7
 8004e48:	f103 0208 	add.w	r2, r3, #8
 8004e4c:	66ba      	str	r2, [r7, #104]	; 0x68
 8004e4e:	cb18      	ldmia	r3, {r3, r4}
 8004e50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e52:	4611      	mov	r1, r2
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004e5a:	9008      	str	r0, [sp, #32]
 8004e5c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004e5e:	9007      	str	r0, [sp, #28]
 8004e60:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004e62:	9006      	str	r0, [sp, #24]
 8004e64:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	9202      	str	r2, [sp, #8]
 8004e6c:	e88d 0018 	stmia.w	sp, {r3, r4}
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f7fe ffaa 	bl	8003dd0 <_ntoa_long_long>
 8004e7c:	6478      	str	r0, [r7, #68]	; 0x44
 8004e7e:	e049      	b.n	8004f14 <_vsnprintf+0x684>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d016      	beq.n	8004eb8 <_vsnprintf+0x628>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8004e8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e8c:	1d1a      	adds	r2, r3, #4
 8004e8e:	66ba      	str	r2, [r7, #104]	; 0x68
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e94:	9205      	str	r2, [sp, #20]
 8004e96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e98:	9204      	str	r2, [sp, #16]
 8004e9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e9c:	9203      	str	r2, [sp, #12]
 8004e9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ea0:	9202      	str	r2, [sp, #8]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	9201      	str	r2, [sp, #4]
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eac:	68b9      	ldr	r1, [r7, #8]
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f7fe ff27 	bl	8003d02 <_ntoa_long>
 8004eb4:	6478      	str	r0, [r7, #68]	; 0x44
 8004eb6:	e02d      	b.n	8004f14 <_vsnprintf+0x684>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <_vsnprintf+0x63e>
 8004ec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ec4:	1d1a      	adds	r2, r3, #4
 8004ec6:	66ba      	str	r2, [r7, #104]	; 0x68
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	e00e      	b.n	8004eec <_vsnprintf+0x65c>
 8004ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <_vsnprintf+0x654>
 8004ed8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eda:	1d1a      	adds	r2, r3, #4
 8004edc:	66ba      	str	r2, [r7, #104]	; 0x68
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	e003      	b.n	8004eec <_vsnprintf+0x65c>
 8004ee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ee6:	1d1a      	adds	r2, r3, #4
 8004ee8:	66ba      	str	r2, [r7, #104]	; 0x68
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8004eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ef0:	9305      	str	r3, [sp, #20]
 8004ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef4:	9304      	str	r3, [sp, #16]
 8004ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef8:	9303      	str	r3, [sp, #12]
 8004efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004efc:	9302      	str	r3, [sp, #8]
 8004efe:	2300      	movs	r3, #0
 8004f00:	9301      	str	r3, [sp, #4]
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f7fe fef8 	bl	8003d02 <_ntoa_long>
 8004f12:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	3301      	adds	r3, #1
 8004f18:	603b      	str	r3, [r7, #0]
        break;
 8004f1a:	e154      	b.n	80051c6 <_vsnprintf+0x936>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b46      	cmp	r3, #70	; 0x46
 8004f22:	d103      	bne.n	8004f2c <_vsnprintf+0x69c>
 8004f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f26:	f043 0320 	orr.w	r3, r3, #32
 8004f2a:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004f2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f2e:	3307      	adds	r3, #7
 8004f30:	f023 0307 	bic.w	r3, r3, #7
 8004f34:	f103 0208 	add.w	r2, r3, #8
 8004f38:	66ba      	str	r2, [r7, #104]	; 0x68
 8004f3a:	ed93 7b00 	vldr	d7, [r3]
 8004f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f40:	9302      	str	r3, [sp, #8]
 8004f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	eeb0 0a47 	vmov.f32	s0, s14
 8004f4e:	eef0 0a67 	vmov.f32	s1, s15
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7fe ffa9 	bl	8003eb0 <_ftoa>
 8004f5e:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	603b      	str	r3, [r7, #0]
        break;
 8004f66:	e12e      	b.n	80051c6 <_vsnprintf+0x936>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b67      	cmp	r3, #103	; 0x67
 8004f6e:	d003      	beq.n	8004f78 <_vsnprintf+0x6e8>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b47      	cmp	r3, #71	; 0x47
 8004f76:	d103      	bne.n	8004f80 <_vsnprintf+0x6f0>
 8004f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f7e:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b45      	cmp	r3, #69	; 0x45
 8004f86:	d003      	beq.n	8004f90 <_vsnprintf+0x700>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b47      	cmp	r3, #71	; 0x47
 8004f8e:	d103      	bne.n	8004f98 <_vsnprintf+0x708>
 8004f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f92:	f043 0320 	orr.w	r3, r3, #32
 8004f96:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f9a:	3307      	adds	r3, #7
 8004f9c:	f023 0307 	bic.w	r3, r3, #7
 8004fa0:	f103 0208 	add.w	r2, r3, #8
 8004fa4:	66ba      	str	r2, [r7, #104]	; 0x68
 8004fa6:	ed93 7b00 	vldr	d7, [r3]
 8004faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fac:	9302      	str	r3, [sp, #8]
 8004fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb0:	9301      	str	r3, [sp, #4]
 8004fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	eeb0 0a47 	vmov.f32	s0, s14
 8004fba:	eef0 0a67 	vmov.f32	s1, s15
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f7ff f9db 	bl	8004380 <_etoa>
 8004fca:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	603b      	str	r3, [r7, #0]
        break;
 8004fd2:	e0f8      	b.n	80051c6 <_vsnprintf+0x936>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8004fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10e      	bne.n	8005000 <_vsnprintf+0x770>
          while (l++ < width) {
 8004fe2:	e007      	b.n	8004ff4 <_vsnprintf+0x764>
            out(' ', buffer, idx++, maxlen);
 8004fe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fe6:	1c53      	adds	r3, r2, #1
 8004fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8004fea:	68fc      	ldr	r4, [r7, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68b9      	ldr	r1, [r7, #8]
 8004ff0:	2020      	movs	r0, #32
 8004ff2:	47a0      	blx	r4
          while (l++ < width) {
 8004ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ffa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d3f1      	bcc.n	8004fe4 <_vsnprintf+0x754>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8005000:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005002:	1d1a      	adds	r2, r3, #4
 8005004:	66ba      	str	r2, [r7, #104]	; 0x68
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	b2d8      	uxtb	r0, r3
 800500a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800500c:	1c53      	adds	r3, r2, #1
 800500e:	647b      	str	r3, [r7, #68]	; 0x44
 8005010:	68fc      	ldr	r4, [r7, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8005018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00e      	beq.n	8005040 <_vsnprintf+0x7b0>
          while (l++ < width) {
 8005022:	e007      	b.n	8005034 <_vsnprintf+0x7a4>
            out(' ', buffer, idx++, maxlen);
 8005024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005026:	1c53      	adds	r3, r2, #1
 8005028:	647b      	str	r3, [r7, #68]	; 0x44
 800502a:	68fc      	ldr	r4, [r7, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	2020      	movs	r0, #32
 8005032:	47a0      	blx	r4
          while (l++ < width) {
 8005034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	63fa      	str	r2, [r7, #60]	; 0x3c
 800503a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800503c:	4293      	cmp	r3, r2
 800503e:	d3f1      	bcc.n	8005024 <_vsnprintf+0x794>
          }
        }
        format++;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	3301      	adds	r3, #1
 8005044:	603b      	str	r3, [r7, #0]
        break;
 8005046:	e0be      	b.n	80051c6 <_vsnprintf+0x936>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8005048:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800504a:	1d1a      	adds	r2, r3, #4
 800504c:	66ba      	str	r2, [r7, #104]	; 0x68
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8005052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <_vsnprintf+0x7cc>
 8005058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800505a:	e001      	b.n	8005060 <_vsnprintf+0x7d0>
 800505c:	f04f 33ff 	mov.w	r3, #4294967295
 8005060:	4619      	mov	r1, r3
 8005062:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005064:	f7fe fcc9 	bl	80039fa <_strnlen_s>
 8005068:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800506a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800506c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005070:	2b00      	cmp	r3, #0
 8005072:	d005      	beq.n	8005080 <_vsnprintf+0x7f0>
          l = (l < precision ? l : precision);
 8005074:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005078:	4293      	cmp	r3, r2
 800507a:	bf28      	it	cs
 800507c:	4613      	movcs	r3, r2
 800507e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8005080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d11a      	bne.n	80050c0 <_vsnprintf+0x830>
          while (l++ < width) {
 800508a:	e007      	b.n	800509c <_vsnprintf+0x80c>
            out(' ', buffer, idx++, maxlen);
 800508c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800508e:	1c53      	adds	r3, r2, #1
 8005090:	647b      	str	r3, [r7, #68]	; 0x44
 8005092:	68fc      	ldr	r4, [r7, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	2020      	movs	r0, #32
 800509a:	47a0      	blx	r4
          while (l++ < width) {
 800509c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	637a      	str	r2, [r7, #52]	; 0x34
 80050a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d3f1      	bcc.n	800508c <_vsnprintf+0x7fc>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80050a8:	e00a      	b.n	80050c0 <_vsnprintf+0x830>
          out(*(p++), buffer, idx++, maxlen);
 80050aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	63ba      	str	r2, [r7, #56]	; 0x38
 80050b0:	7818      	ldrb	r0, [r3, #0]
 80050b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050b4:	1c53      	adds	r3, r2, #1
 80050b6:	647b      	str	r3, [r7, #68]	; 0x44
 80050b8:	68fc      	ldr	r4, [r7, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68b9      	ldr	r1, [r7, #8]
 80050be:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80050c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d009      	beq.n	80050dc <_vsnprintf+0x84c>
 80050c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0eb      	beq.n	80050aa <_vsnprintf+0x81a>
 80050d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d4:	1e5a      	subs	r2, r3, #1
 80050d6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e6      	bne.n	80050aa <_vsnprintf+0x81a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80050dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00e      	beq.n	8005104 <_vsnprintf+0x874>
          while (l++ < width) {
 80050e6:	e007      	b.n	80050f8 <_vsnprintf+0x868>
            out(' ', buffer, idx++, maxlen);
 80050e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050ea:	1c53      	adds	r3, r2, #1
 80050ec:	647b      	str	r3, [r7, #68]	; 0x44
 80050ee:	68fc      	ldr	r4, [r7, #12]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68b9      	ldr	r1, [r7, #8]
 80050f4:	2020      	movs	r0, #32
 80050f6:	47a0      	blx	r4
          while (l++ < width) {
 80050f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	637a      	str	r2, [r7, #52]	; 0x34
 80050fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005100:	4293      	cmp	r3, r2
 8005102:	d3f1      	bcc.n	80050e8 <_vsnprintf+0x858>
          }
        }
        format++;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	3301      	adds	r3, #1
 8005108:	603b      	str	r3, [r7, #0]
        break;
 800510a:	e05c      	b.n	80051c6 <_vsnprintf+0x936>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800510c:	2308      	movs	r3, #8
 800510e:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8005110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005112:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8005116:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8005118:	2300      	movs	r3, #0
 800511a:	75fb      	strb	r3, [r7, #23]
        if (is_ll) {
 800511c:	7dfb      	ldrb	r3, [r7, #23]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01d      	beq.n	800515e <_vsnprintf+0x8ce>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8005122:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005124:	1d1a      	adds	r2, r3, #4
 8005126:	66ba      	str	r2, [r7, #104]	; 0x68
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f04f 0400 	mov.w	r4, #0
 800512e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005130:	9208      	str	r2, [sp, #32]
 8005132:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005134:	9207      	str	r2, [sp, #28]
 8005136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005138:	9206      	str	r2, [sp, #24]
 800513a:	f04f 0110 	mov.w	r1, #16
 800513e:	f04f 0200 	mov.w	r2, #0
 8005142:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8005146:	2200      	movs	r2, #0
 8005148:	9202      	str	r2, [sp, #8]
 800514a:	e88d 0018 	stmia.w	sp, {r3, r4}
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f7fe fe3b 	bl	8003dd0 <_ntoa_long_long>
 800515a:	6478      	str	r0, [r7, #68]	; 0x44
 800515c:	e016      	b.n	800518c <_vsnprintf+0x8fc>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800515e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005160:	1d1a      	adds	r2, r3, #4
 8005162:	66ba      	str	r2, [r7, #104]	; 0x68
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800516a:	9305      	str	r3, [sp, #20]
 800516c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800516e:	9304      	str	r3, [sp, #16]
 8005170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005172:	9303      	str	r3, [sp, #12]
 8005174:	2310      	movs	r3, #16
 8005176:	9302      	str	r3, [sp, #8]
 8005178:	2300      	movs	r3, #0
 800517a:	9301      	str	r3, [sp, #4]
 800517c:	9200      	str	r2, [sp, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f7fe fdbc 	bl	8003d02 <_ntoa_long>
 800518a:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	3301      	adds	r3, #1
 8005190:	603b      	str	r3, [r7, #0]
        break;
 8005192:	e018      	b.n	80051c6 <_vsnprintf+0x936>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8005194:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005196:	1c53      	adds	r3, r2, #1
 8005198:	647b      	str	r3, [r7, #68]	; 0x44
 800519a:	68fc      	ldr	r4, [r7, #12]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	2025      	movs	r0, #37	; 0x25
 80051a2:	47a0      	blx	r4
        format++;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	3301      	adds	r3, #1
 80051a8:	603b      	str	r3, [r7, #0]
        break;
 80051aa:	e00c      	b.n	80051c6 <_vsnprintf+0x936>

      default :
        out(*format, buffer, idx++, maxlen);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	7818      	ldrb	r0, [r3, #0]
 80051b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051b2:	1c53      	adds	r3, r2, #1
 80051b4:	647b      	str	r3, [r7, #68]	; 0x44
 80051b6:	68fc      	ldr	r4, [r7, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68b9      	ldr	r1, [r7, #8]
 80051bc:	47a0      	blx	r4
        format++;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	603b      	str	r3, [r7, #0]
        break;
 80051c4:	bf00      	nop
  while (*format)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f47f ab71 	bne.w	80048b2 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80051d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d302      	bcc.n	80051de <_vsnprintf+0x94e>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	1e5a      	subs	r2, r3, #1
 80051dc:	e000      	b.n	80051e0 <_vsnprintf+0x950>
 80051de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051e0:	68fc      	ldr	r4, [r7, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68b9      	ldr	r1, [r7, #8]
 80051e6:	2000      	movs	r0, #0
 80051e8:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80051ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3758      	adds	r7, #88	; 0x58
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bdb0      	pop	{r4, r5, r7, pc}

080051f4 <vprintf_>:
  return ret;
}


int vprintf_(const char* format, va_list va)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80051fe:	f107 010c 	add.w	r1, r7, #12
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f04f 32ff 	mov.w	r2, #4294967295
 800520c:	4803      	ldr	r0, [pc, #12]	; (800521c <vprintf_+0x28>)
 800520e:	f7ff fb3f 	bl	8004890 <_vsnprintf>
 8005212:	4603      	mov	r3, r0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	080039d5 	.word	0x080039d5

08005220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005258 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005224:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005226:	e003      	b.n	8005230 <LoopCopyDataInit>

08005228 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005228:	4b0c      	ldr	r3, [pc, #48]	; (800525c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800522a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800522c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800522e:	3104      	adds	r1, #4

08005230 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005230:	480b      	ldr	r0, [pc, #44]	; (8005260 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005232:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005234:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005236:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005238:	d3f6      	bcc.n	8005228 <CopyDataInit>
  ldr  r2, =_sbss
 800523a:	4a0b      	ldr	r2, [pc, #44]	; (8005268 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800523c:	e002      	b.n	8005244 <LoopFillZerobss>

0800523e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800523e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005240:	f842 3b04 	str.w	r3, [r2], #4

08005244 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005244:	4b09      	ldr	r3, [pc, #36]	; (800526c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005246:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005248:	d3f9      	bcc.n	800523e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800524a:	f7fc f8f1 	bl	8001430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800524e:	f000 f811 	bl	8005274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005252:	f7fb fe3d 	bl	8000ed0 <main>
  bx  lr    
 8005256:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005258:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800525c:	08005480 	.word	0x08005480
  ldr  r0, =_sdata
 8005260:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005264:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8005268:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800526c:	200000d0 	.word	0x200000d0

08005270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005270:	e7fe      	b.n	8005270 <ADC_IRQHandler>
	...

08005274 <__libc_init_array>:
 8005274:	b570      	push	{r4, r5, r6, lr}
 8005276:	4e0d      	ldr	r6, [pc, #52]	; (80052ac <__libc_init_array+0x38>)
 8005278:	4c0d      	ldr	r4, [pc, #52]	; (80052b0 <__libc_init_array+0x3c>)
 800527a:	1ba4      	subs	r4, r4, r6
 800527c:	10a4      	asrs	r4, r4, #2
 800527e:	2500      	movs	r5, #0
 8005280:	42a5      	cmp	r5, r4
 8005282:	d109      	bne.n	8005298 <__libc_init_array+0x24>
 8005284:	4e0b      	ldr	r6, [pc, #44]	; (80052b4 <__libc_init_array+0x40>)
 8005286:	4c0c      	ldr	r4, [pc, #48]	; (80052b8 <__libc_init_array+0x44>)
 8005288:	f000 f820 	bl	80052cc <_init>
 800528c:	1ba4      	subs	r4, r4, r6
 800528e:	10a4      	asrs	r4, r4, #2
 8005290:	2500      	movs	r5, #0
 8005292:	42a5      	cmp	r5, r4
 8005294:	d105      	bne.n	80052a2 <__libc_init_array+0x2e>
 8005296:	bd70      	pop	{r4, r5, r6, pc}
 8005298:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800529c:	4798      	blx	r3
 800529e:	3501      	adds	r5, #1
 80052a0:	e7ee      	b.n	8005280 <__libc_init_array+0xc>
 80052a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052a6:	4798      	blx	r3
 80052a8:	3501      	adds	r5, #1
 80052aa:	e7f2      	b.n	8005292 <__libc_init_array+0x1e>
 80052ac:	08005478 	.word	0x08005478
 80052b0:	08005478 	.word	0x08005478
 80052b4:	08005478 	.word	0x08005478
 80052b8:	0800547c 	.word	0x0800547c

080052bc <memset>:
 80052bc:	4402      	add	r2, r0
 80052be:	4603      	mov	r3, r0
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d100      	bne.n	80052c6 <memset+0xa>
 80052c4:	4770      	bx	lr
 80052c6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ca:	e7f9      	b.n	80052c0 <memset+0x4>

080052cc <_init>:
 80052cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ce:	bf00      	nop
 80052d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d2:	bc08      	pop	{r3}
 80052d4:	469e      	mov	lr, r3
 80052d6:	4770      	bx	lr

080052d8 <_fini>:
 80052d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052da:	bf00      	nop
 80052dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052de:	bc08      	pop	{r3}
 80052e0:	469e      	mov	lr, r3
 80052e2:	4770      	bx	lr
