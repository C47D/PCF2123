
pcf_401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005194  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08005330  08005330  00015330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080054c8  080054c8  000154c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080054d0  080054d0  000154d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080054d4  080054d4  000154d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080054d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c4  2000000c  080054e4  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000d0  080054e4  000200d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000aa28  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001cc2  00000000  00000000  0002aa64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009d8  00000000  00000000  0002c728  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008d0  00000000  00000000  0002d100  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004af7  00000000  00000000  0002d9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000031cd  00000000  00000000  000324c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00035694  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000299c  00000000  00000000  00035710  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005314 	.word	0x08005314

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005314 	.word	0x08005314

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b97a 	b.w	8000e18 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	468c      	mov	ip, r1
 8000b42:	460d      	mov	r5, r1
 8000b44:	4604      	mov	r4, r0
 8000b46:	9e08      	ldr	r6, [sp, #32]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d151      	bne.n	8000bf0 <__udivmoddi4+0xb4>
 8000b4c:	428a      	cmp	r2, r1
 8000b4e:	4617      	mov	r7, r2
 8000b50:	d96d      	bls.n	8000c2e <__udivmoddi4+0xf2>
 8000b52:	fab2 fe82 	clz	lr, r2
 8000b56:	f1be 0f00 	cmp.w	lr, #0
 8000b5a:	d00b      	beq.n	8000b74 <__udivmoddi4+0x38>
 8000b5c:	f1ce 0c20 	rsb	ip, lr, #32
 8000b60:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b64:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b68:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b6c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b70:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b74:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b78:	0c25      	lsrs	r5, r4, #16
 8000b7a:	fbbc f8fa 	udiv	r8, ip, sl
 8000b7e:	fa1f f987 	uxth.w	r9, r7
 8000b82:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b86:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b8a:	fb08 f309 	mul.w	r3, r8, r9
 8000b8e:	42ab      	cmp	r3, r5
 8000b90:	d90a      	bls.n	8000ba8 <__udivmoddi4+0x6c>
 8000b92:	19ed      	adds	r5, r5, r7
 8000b94:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b98:	f080 8123 	bcs.w	8000de2 <__udivmoddi4+0x2a6>
 8000b9c:	42ab      	cmp	r3, r5
 8000b9e:	f240 8120 	bls.w	8000de2 <__udivmoddi4+0x2a6>
 8000ba2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba6:	443d      	add	r5, r7
 8000ba8:	1aed      	subs	r5, r5, r3
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb5 f0fa 	udiv	r0, r5, sl
 8000bb0:	fb0a 5510 	mls	r5, sl, r0, r5
 8000bb4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bb8:	fb00 f909 	mul.w	r9, r0, r9
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x98>
 8000bc0:	19e4      	adds	r4, r4, r7
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc6:	f080 810a 	bcs.w	8000dde <__udivmoddi4+0x2a2>
 8000bca:	45a1      	cmp	r9, r4
 8000bcc:	f240 8107 	bls.w	8000dde <__udivmoddi4+0x2a2>
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	443c      	add	r4, r7
 8000bd4:	eba4 0409 	sub.w	r4, r4, r9
 8000bd8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d061      	beq.n	8000ca6 <__udivmoddi4+0x16a>
 8000be2:	fa24 f40e 	lsr.w	r4, r4, lr
 8000be6:	2300      	movs	r3, #0
 8000be8:	6034      	str	r4, [r6, #0]
 8000bea:	6073      	str	r3, [r6, #4]
 8000bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d907      	bls.n	8000c04 <__udivmoddi4+0xc8>
 8000bf4:	2e00      	cmp	r6, #0
 8000bf6:	d054      	beq.n	8000ca2 <__udivmoddi4+0x166>
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	e886 0021 	stmia.w	r6, {r0, r5}
 8000bfe:	4608      	mov	r0, r1
 8000c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c04:	fab3 f183 	clz	r1, r3
 8000c08:	2900      	cmp	r1, #0
 8000c0a:	f040 808e 	bne.w	8000d2a <__udivmoddi4+0x1ee>
 8000c0e:	42ab      	cmp	r3, r5
 8000c10:	d302      	bcc.n	8000c18 <__udivmoddi4+0xdc>
 8000c12:	4282      	cmp	r2, r0
 8000c14:	f200 80fa 	bhi.w	8000e0c <__udivmoddi4+0x2d0>
 8000c18:	1a84      	subs	r4, r0, r2
 8000c1a:	eb65 0503 	sbc.w	r5, r5, r3
 8000c1e:	2001      	movs	r0, #1
 8000c20:	46ac      	mov	ip, r5
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	d03f      	beq.n	8000ca6 <__udivmoddi4+0x16a>
 8000c26:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	b912      	cbnz	r2, 8000c36 <__udivmoddi4+0xfa>
 8000c30:	2701      	movs	r7, #1
 8000c32:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c36:	fab7 fe87 	clz	lr, r7
 8000c3a:	f1be 0f00 	cmp.w	lr, #0
 8000c3e:	d134      	bne.n	8000caa <__udivmoddi4+0x16e>
 8000c40:	1beb      	subs	r3, r5, r7
 8000c42:	0c3a      	lsrs	r2, r7, #16
 8000c44:	fa1f fc87 	uxth.w	ip, r7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c4e:	0c25      	lsrs	r5, r4, #16
 8000c50:	fb02 3318 	mls	r3, r2, r8, r3
 8000c54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c58:	fb0c f308 	mul.w	r3, ip, r8
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x134>
 8000c60:	19ed      	adds	r5, r5, r7
 8000c62:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x132>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f200 80d1 	bhi.w	8000e10 <__udivmoddi4+0x2d4>
 8000c6e:	4680      	mov	r8, r0
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c78:	fb02 5510 	mls	r5, r2, r0, r5
 8000c7c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c80:	fb0c fc00 	mul.w	ip, ip, r0
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x15c>
 8000c88:	19e4      	adds	r4, r4, r7
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x15a>
 8000c90:	45a4      	cmp	ip, r4
 8000c92:	f200 80b8 	bhi.w	8000e06 <__udivmoddi4+0x2ca>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 040c 	sub.w	r4, r4, ip
 8000c9c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca0:	e79d      	b.n	8000bde <__udivmoddi4+0xa2>
 8000ca2:	4631      	mov	r1, r6
 8000ca4:	4630      	mov	r0, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	f1ce 0420 	rsb	r4, lr, #32
 8000cae:	fa05 f30e 	lsl.w	r3, r5, lr
 8000cb2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000cb6:	fa20 f804 	lsr.w	r8, r0, r4
 8000cba:	0c3a      	lsrs	r2, r7, #16
 8000cbc:	fa25 f404 	lsr.w	r4, r5, r4
 8000cc0:	ea48 0803 	orr.w	r8, r8, r3
 8000cc4:	fbb4 f1f2 	udiv	r1, r4, r2
 8000cc8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000ccc:	fb02 4411 	mls	r4, r2, r1, r4
 8000cd0:	fa1f fc87 	uxth.w	ip, r7
 8000cd4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000cd8:	fb01 f30c 	mul.w	r3, r1, ip
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x1bc>
 8000ce4:	19ed      	adds	r5, r5, r7
 8000ce6:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cea:	f080 808a 	bcs.w	8000e02 <__udivmoddi4+0x2c6>
 8000cee:	42ab      	cmp	r3, r5
 8000cf0:	f240 8087 	bls.w	8000e02 <__udivmoddi4+0x2c6>
 8000cf4:	3902      	subs	r1, #2
 8000cf6:	443d      	add	r5, r7
 8000cf8:	1aeb      	subs	r3, r5, r3
 8000cfa:	fa1f f588 	uxth.w	r5, r8
 8000cfe:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d02:	fb02 3310 	mls	r3, r2, r0, r3
 8000d06:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d0a:	fb00 f30c 	mul.w	r3, r0, ip
 8000d0e:	42ab      	cmp	r3, r5
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x1e6>
 8000d12:	19ed      	adds	r5, r5, r7
 8000d14:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d18:	d26f      	bcs.n	8000dfa <__udivmoddi4+0x2be>
 8000d1a:	42ab      	cmp	r3, r5
 8000d1c:	d96d      	bls.n	8000dfa <__udivmoddi4+0x2be>
 8000d1e:	3802      	subs	r0, #2
 8000d20:	443d      	add	r5, r7
 8000d22:	1aeb      	subs	r3, r5, r3
 8000d24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d28:	e78f      	b.n	8000c4a <__udivmoddi4+0x10e>
 8000d2a:	f1c1 0720 	rsb	r7, r1, #32
 8000d2e:	fa22 f807 	lsr.w	r8, r2, r7
 8000d32:	408b      	lsls	r3, r1
 8000d34:	fa05 f401 	lsl.w	r4, r5, r1
 8000d38:	ea48 0303 	orr.w	r3, r8, r3
 8000d3c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d40:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d44:	40fd      	lsrs	r5, r7
 8000d46:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d4a:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d4e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d52:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d56:	fa1f f883 	uxth.w	r8, r3
 8000d5a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d5e:	fb09 f408 	mul.w	r4, r9, r8
 8000d62:	42ac      	cmp	r4, r5
 8000d64:	fa02 f201 	lsl.w	r2, r2, r1
 8000d68:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x244>
 8000d6e:	18ed      	adds	r5, r5, r3
 8000d70:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d74:	d243      	bcs.n	8000dfe <__udivmoddi4+0x2c2>
 8000d76:	42ac      	cmp	r4, r5
 8000d78:	d941      	bls.n	8000dfe <__udivmoddi4+0x2c2>
 8000d7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7e:	441d      	add	r5, r3
 8000d80:	1b2d      	subs	r5, r5, r4
 8000d82:	fa1f fe8e 	uxth.w	lr, lr
 8000d86:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d8a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d8e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d92:	fb00 f808 	mul.w	r8, r0, r8
 8000d96:	45a0      	cmp	r8, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x26e>
 8000d9a:	18e4      	adds	r4, r4, r3
 8000d9c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000da0:	d229      	bcs.n	8000df6 <__udivmoddi4+0x2ba>
 8000da2:	45a0      	cmp	r8, r4
 8000da4:	d927      	bls.n	8000df6 <__udivmoddi4+0x2ba>
 8000da6:	3802      	subs	r0, #2
 8000da8:	441c      	add	r4, r3
 8000daa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dae:	eba4 0408 	sub.w	r4, r4, r8
 8000db2:	fba0 8902 	umull	r8, r9, r0, r2
 8000db6:	454c      	cmp	r4, r9
 8000db8:	46c6      	mov	lr, r8
 8000dba:	464d      	mov	r5, r9
 8000dbc:	d315      	bcc.n	8000dea <__udivmoddi4+0x2ae>
 8000dbe:	d012      	beq.n	8000de6 <__udivmoddi4+0x2aa>
 8000dc0:	b156      	cbz	r6, 8000dd8 <__udivmoddi4+0x29c>
 8000dc2:	ebba 030e 	subs.w	r3, sl, lr
 8000dc6:	eb64 0405 	sbc.w	r4, r4, r5
 8000dca:	fa04 f707 	lsl.w	r7, r4, r7
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431f      	orrs	r7, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	6037      	str	r7, [r6, #0]
 8000dd6:	6074      	str	r4, [r6, #4]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	4618      	mov	r0, r3
 8000de0:	e6f8      	b.n	8000bd4 <__udivmoddi4+0x98>
 8000de2:	4690      	mov	r8, r2
 8000de4:	e6e0      	b.n	8000ba8 <__udivmoddi4+0x6c>
 8000de6:	45c2      	cmp	sl, r8
 8000de8:	d2ea      	bcs.n	8000dc0 <__udivmoddi4+0x284>
 8000dea:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dee:	eb69 0503 	sbc.w	r5, r9, r3
 8000df2:	3801      	subs	r0, #1
 8000df4:	e7e4      	b.n	8000dc0 <__udivmoddi4+0x284>
 8000df6:	4628      	mov	r0, r5
 8000df8:	e7d7      	b.n	8000daa <__udivmoddi4+0x26e>
 8000dfa:	4640      	mov	r0, r8
 8000dfc:	e791      	b.n	8000d22 <__udivmoddi4+0x1e6>
 8000dfe:	4681      	mov	r9, r0
 8000e00:	e7be      	b.n	8000d80 <__udivmoddi4+0x244>
 8000e02:	4601      	mov	r1, r0
 8000e04:	e778      	b.n	8000cf8 <__udivmoddi4+0x1bc>
 8000e06:	3802      	subs	r0, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	e745      	b.n	8000c98 <__udivmoddi4+0x15c>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e708      	b.n	8000c22 <__udivmoddi4+0xe6>
 8000e10:	f1a8 0802 	sub.w	r8, r8, #2
 8000e14:	443d      	add	r5, r7
 8000e16:	e72b      	b.n	8000c70 <__udivmoddi4+0x134>

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	4a23      	ldr	r2, [pc, #140]	; (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	4a1c      	ldr	r2, [pc, #112]	; (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2110      	movs	r1, #16
 8000e6e:	4816      	ldr	r0, [pc, #88]	; (8000ec8 <MX_GPIO_Init+0xac>)
 8000e70:	f000 fe82 	bl	8001b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEART_GPIO_Port, HEART_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e7a:	4814      	ldr	r0, [pc, #80]	; (8000ecc <MX_GPIO_Init+0xb0>)
 8000e7c:	f000 fe7c 	bl	8001b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000e80:	2310      	movs	r3, #16
 8000e82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	4619      	mov	r1, r3
 8000e96:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <MX_GPIO_Init+0xac>)
 8000e98:	f000 fcec 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEART_Pin;
 8000e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HEART_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_GPIO_Init+0xb0>)
 8000eb6:	f000 fcdd 	bl	8001874 <HAL_GPIO_Init>

}
 8000eba:	bf00      	nop
 8000ebc:	3720      	adds	r7, #32
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed6:	f000 fb55 	bl	8001584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eda:	f000 f927 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ede:	f7ff ff9d 	bl	8000e1c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ee2:	f000 f9f3 	bl	80012cc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000ee6:	f000 fadb 	bl	80014a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  DBG_init(&huart2);
 8000eea:	4882      	ldr	r0, [pc, #520]	; (80010f4 <main+0x224>)
 8000eec:	f002 fd58 	bl	80039a0 <DBG_init>
  DBG_println("PCF2123 demo project");
 8000ef0:	4881      	ldr	r0, [pc, #516]	; (80010f8 <main+0x228>)
 8000ef2:	f002 fd65 	bl	80039c0 <DBG_println>

  /* Wait for Oscilator to become stable */
  HAL_Delay(1000 * 2);
 8000ef6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000efa:	f000 fbb5 	bl	8001668 <HAL_Delay>

  /* Register HAL callbacks */
  PCF2123_init(&my_pcf, my_spi_xfer, my_control_ce);
 8000efe:	4a7f      	ldr	r2, [pc, #508]	; (80010fc <main+0x22c>)
 8000f00:	497f      	ldr	r1, [pc, #508]	; (8001100 <main+0x230>)
 8000f02:	4880      	ldr	r0, [pc, #512]	; (8001104 <main+0x234>)
 8000f04:	f002 f9ca 	bl	800329c <PCF2123_init>

  PCF2123_sw_reset(&my_pcf);
 8000f08:	487e      	ldr	r0, [pc, #504]	; (8001104 <main+0x234>)
 8000f0a:	f002 fb4c 	bl	80035a6 <PCF2123_sw_reset>

  /* Wait for Oscilator to become stable */
  HAL_Delay(1000 * 2);
 8000f0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f12:	f000 fba9 	bl	8001668 <HAL_Delay>

  uint8_t control_1 = 0xff;
 8000f16:	23ff      	movs	r3, #255	; 0xff
 8000f18:	77bb      	strb	r3, [r7, #30]
  uint8_t control_2 = 0xff;
 8000f1a:	23ff      	movs	r3, #255	; 0xff
 8000f1c:	777b      	strb	r3, [r7, #29]
  uint8_t osc_status = 0xff;
 8000f1e:	23ff      	movs	r3, #255	; 0xff
 8000f20:	773b      	strb	r3, [r7, #28]

  PCF2123_read_register(&my_pcf, PCF2123_REG_CONTROL_1,
 8000f22:	f107 021e 	add.w	r2, r7, #30
 8000f26:	2301      	movs	r3, #1
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4876      	ldr	r0, [pc, #472]	; (8001104 <main+0x234>)
 8000f2c:	f002 fb77 	bl	800361e <PCF2123_read_register>
	&control_1, 1);
  PCF2123_read_register(&my_pcf, PCF2123_REG_CONTROL_2,
 8000f30:	f107 021d 	add.w	r2, r7, #29
 8000f34:	2301      	movs	r3, #1
 8000f36:	2101      	movs	r1, #1
 8000f38:	4872      	ldr	r0, [pc, #456]	; (8001104 <main+0x234>)
 8000f3a:	f002 fb70 	bl	800361e <PCF2123_read_register>
	&control_2, 1);
  PCF2123_read_register(&my_pcf, PCF2123_REG_SECONDS,
 8000f3e:	f107 021c 	add.w	r2, r7, #28
 8000f42:	2301      	movs	r3, #1
 8000f44:	2102      	movs	r1, #2
 8000f46:	486f      	ldr	r0, [pc, #444]	; (8001104 <main+0x234>)
 8000f48:	f002 fb69 	bl	800361e <PCF2123_read_register>
  	&osc_status, 1);

  DBG_println("C1: %x, C2: %x", control_1, control_2);
 8000f4c:	7fbb      	ldrb	r3, [r7, #30]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	7f7b      	ldrb	r3, [r7, #29]
 8000f52:	461a      	mov	r2, r3
 8000f54:	486c      	ldr	r0, [pc, #432]	; (8001108 <main+0x238>)
 8000f56:	f002 fd33 	bl	80039c0 <DBG_println>
  DBG_println("Osc sts: %x", osc_status);
 8000f5a:	7f3b      	ldrb	r3, [r7, #28]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	486b      	ldr	r0, [pc, #428]	; (800110c <main+0x23c>)
 8000f60:	f002 fd2e 	bl	80039c0 <DBG_println>

  if (PCF2123_AF_INT_GENERATED & control_2) {
 8000f64:	7f7b      	ldrb	r3, [r7, #29]
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d01c      	beq.n	8000faa <main+0xda>
	  control_2 &= ~(PCF2123_AF_INT_GENERATED);
 8000f70:	7f7b      	ldrb	r3, [r7, #29]
 8000f72:	f023 0308 	bic.w	r3, r3, #8
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	777b      	strb	r3, [r7, #29]
	  DBG_println("C2: %x", control_2);
 8000f7a:	7f7b      	ldrb	r3, [r7, #29]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4864      	ldr	r0, [pc, #400]	; (8001110 <main+0x240>)
 8000f80:	f002 fd1e 	bl	80039c0 <DBG_println>
	  PCF2123_write_register(&my_pcf, PCF2123_REG_CONTROL_2,
 8000f84:	f107 021d 	add.w	r2, r7, #29
 8000f88:	2301      	movs	r3, #1
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	485d      	ldr	r0, [pc, #372]	; (8001104 <main+0x234>)
 8000f8e:	f002 fbd1 	bl	8003734 <PCF2123_write_register>
		&control_2, 1);

	  PCF2123_read_register(&my_pcf, PCF2123_REG_CONTROL_2,
 8000f92:	f107 021d 	add.w	r2, r7, #29
 8000f96:	2301      	movs	r3, #1
 8000f98:	2101      	movs	r1, #1
 8000f9a:	485a      	ldr	r0, [pc, #360]	; (8001104 <main+0x234>)
 8000f9c:	f002 fb3f 	bl	800361e <PCF2123_read_register>
		&control_2, 1);

	  DBG_println("C2: %x", control_2);
 8000fa0:	7f7b      	ldrb	r3, [r7, #29]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	485a      	ldr	r0, [pc, #360]	; (8001110 <main+0x240>)
 8000fa6:	f002 fd0b 	bl	80039c0 <DBG_println>
  }

  if (PCF2123_OS_INTEGRITY_NOT_GUARANTEED & osc_status) {
 8000faa:	7f3b      	ldrb	r3, [r7, #28]
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	da10      	bge.n	8000fd4 <main+0x104>
	  osc_status &= ~(PCF2123_OS_INTEGRITY_NOT_GUARANTEED);
 8000fb2:	7f3b      	ldrb	r3, [r7, #28]
 8000fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	773b      	strb	r3, [r7, #28]
	  DBG_println("Osc sts: %x", osc_status);
 8000fbc:	7f3b      	ldrb	r3, [r7, #28]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4852      	ldr	r0, [pc, #328]	; (800110c <main+0x23c>)
 8000fc2:	f002 fcfd 	bl	80039c0 <DBG_println>
	  PCF2123_write_register(&my_pcf, PCF2123_REG_SECONDS,
 8000fc6:	f107 021c 	add.w	r2, r7, #28
 8000fca:	2301      	movs	r3, #1
 8000fcc:	2102      	movs	r1, #2
 8000fce:	484d      	ldr	r0, [pc, #308]	; (8001104 <main+0x234>)
 8000fd0:	f002 fbb0 	bl	8003734 <PCF2123_write_register>
		&osc_status, 1);
  }

  osc_status = 0xff;
 8000fd4:	23ff      	movs	r3, #255	; 0xff
 8000fd6:	773b      	strb	r3, [r7, #28]
  PCF2123_read_register(&my_pcf, PCF2123_REG_SECONDS,
 8000fd8:	f107 021c 	add.w	r2, r7, #28
 8000fdc:	2301      	movs	r3, #1
 8000fde:	2102      	movs	r1, #2
 8000fe0:	4848      	ldr	r0, [pc, #288]	; (8001104 <main+0x234>)
 8000fe2:	f002 fb1c 	bl	800361e <PCF2123_read_register>
  	&osc_status, 1);

  /* Setting TI_TP to 1 */
  DBG_println("Setting TI_TP");
 8000fe6:	484b      	ldr	r0, [pc, #300]	; (8001114 <main+0x244>)
 8000fe8:	f002 fcea 	bl	80039c0 <DBG_println>
  PCF2123_read_register(&my_pcf, PCF2123_REG_CONTROL_2,
 8000fec:	f107 021d 	add.w	r2, r7, #29
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	4843      	ldr	r0, [pc, #268]	; (8001104 <main+0x234>)
 8000ff6:	f002 fb12 	bl	800361e <PCF2123_read_register>
	&control_2, 1);
  DBG_println("C2: %x", control_2);
 8000ffa:	7f7b      	ldrb	r3, [r7, #29]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4844      	ldr	r0, [pc, #272]	; (8001110 <main+0x240>)
 8001000:	f002 fcde 	bl	80039c0 <DBG_println>
  control_2 |= PCF2123_TI_TP_INT_PIN_GENERATES_PULSE;
 8001004:	7f7b      	ldrb	r3, [r7, #29]
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	b2db      	uxtb	r3, r3
 800100c:	777b      	strb	r3, [r7, #29]
  DBG_println("C2: %x", control_2);
 800100e:	7f7b      	ldrb	r3, [r7, #29]
 8001010:	4619      	mov	r1, r3
 8001012:	483f      	ldr	r0, [pc, #252]	; (8001110 <main+0x240>)
 8001014:	f002 fcd4 	bl	80039c0 <DBG_println>
  PCF2123_write_register(&my_pcf, PCF2123_REG_CONTROL_2,
 8001018:	f107 021d 	add.w	r2, r7, #29
 800101c:	2301      	movs	r3, #1
 800101e:	2101      	movs	r1, #1
 8001020:	4838      	ldr	r0, [pc, #224]	; (8001104 <main+0x234>)
 8001022:	f002 fb87 	bl	8003734 <PCF2123_write_register>
	&control_2, 1);

  DBG_println("Osc sts: %x", osc_status);
 8001026:	7f3b      	ldrb	r3, [r7, #28]
 8001028:	4619      	mov	r1, r3
 800102a:	4838      	ldr	r0, [pc, #224]	; (800110c <main+0x23c>)
 800102c:	f002 fcc8 	bl	80039c0 <DBG_println>

  pcf2123_time_t time = {
 8001030:	4a39      	ldr	r2, [pc, #228]	; (8001118 <main+0x248>)
 8001032:	f107 0318 	add.w	r3, r7, #24
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	4611      	mov	r1, r2
 800103a:	8019      	strh	r1, [r3, #0]
 800103c:	3302      	adds	r3, #2
 800103e:	0c12      	lsrs	r2, r2, #16
 8001040:	701a      	strb	r2, [r3, #0]
		  .sec = 56,
		  .min = 10,
		  .hour = 0
  };

  pcf2123_date_t date = {
 8001042:	4b36      	ldr	r3, [pc, #216]	; (800111c <main+0x24c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	617b      	str	r3, [r7, #20]
		  .weekday = PCF2123_WEEKDAY_SUNDAY,
		  .month = PCF2123_MONTH_OCTOBER,
		  .year = 20
  };

  PCF2123_set_rtcc_data(&my_pcf, &time, &date);
 8001048:	f107 0214 	add.w	r2, r7, #20
 800104c:	f107 0318 	add.w	r3, r7, #24
 8001050:	4619      	mov	r1, r3
 8001052:	482c      	ldr	r0, [pc, #176]	; (8001104 <main+0x234>)
 8001054:	f002 f936 	bl	80032c4 <PCF2123_set_rtcc_data>

  pcf2123_alarm_conf_t alarm = {
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	711a      	strb	r2, [r3, #4]
 8001062:	2301      	movs	r3, #1
 8001064:	733b      	strb	r3, [r7, #12]
 8001066:	230b      	movs	r3, #11
 8001068:	737b      	strb	r3, [r7, #13]
		  .alarm_enable = PCF2123_ALARM_MIN_ENABLE,
		  .min = 11,
  };

  PCF2123_set_alarm_interrupt(&my_pcf, &alarm);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4619      	mov	r1, r3
 8001070:	4824      	ldr	r0, [pc, #144]	; (8001104 <main+0x234>)
 8001072:	f002 f9fb 	bl	800346c <PCF2123_set_alarm_interrupt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(HEART_GPIO_Port, HEART_Pin);
 8001076:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107a:	4829      	ldr	r0, [pc, #164]	; (8001120 <main+0x250>)
 800107c:	f000 fd95 	bl	8001baa <HAL_GPIO_TogglePin>

	  uint8_t flags = PCF2123_get_interrupt_flags(&my_pcf);
 8001080:	4820      	ldr	r0, [pc, #128]	; (8001104 <main+0x234>)
 8001082:	f002 fc27 	bl	80038d4 <PCF2123_get_interrupt_flags>
 8001086:	4603      	mov	r3, r0
 8001088:	77fb      	strb	r3, [r7, #31]

	  /* AF */
	  if (PCF2123_AF_INT_GENERATED & flags) {
 800108a:	7ffb      	ldrb	r3, [r7, #31]
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d002      	beq.n	800109c <main+0x1cc>
		  PCF2123_clear_af(&my_pcf);
 8001096:	481b      	ldr	r0, [pc, #108]	; (8001104 <main+0x234>)
 8001098:	f002 fbda 	bl	8003850 <PCF2123_clear_af>
	  }

	  /* TF */
	  if (PCF2123_TF_INTERRUPT_GENERTED & flags) {
 800109c:	7ffb      	ldrb	r3, [r7, #31]
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <main+0x1de>
		  PCF2123_clear_tf(&my_pcf);
 80010a8:	4816      	ldr	r0, [pc, #88]	; (8001104 <main+0x234>)
 80010aa:	f002 fbf2 	bl	8003892 <PCF2123_clear_tf>
	  }

	  pcf2123_time_t current_time;
	  pcf2123_date_t current_date;

	  PCF2123_get_rtcc_data(&my_pcf, &current_time, &current_date);
 80010ae:	1d3a      	adds	r2, r7, #4
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	4619      	mov	r1, r3
 80010b6:	4813      	ldr	r0, [pc, #76]	; (8001104 <main+0x234>)
 80010b8:	f002 f95d 	bl	8003376 <PCF2123_get_rtcc_data>

	  DBG_println("Hour: %d, Min: %d, Sec: %d",
			  current_time.hour, current_time.min, current_time.sec);
 80010bc:	7abb      	ldrb	r3, [r7, #10]
	  DBG_println("Hour: %d, Min: %d, Sec: %d",
 80010be:	4619      	mov	r1, r3
			  current_time.hour, current_time.min, current_time.sec);
 80010c0:	7a7b      	ldrb	r3, [r7, #9]
	  DBG_println("Hour: %d, Min: %d, Sec: %d",
 80010c2:	461a      	mov	r2, r3
			  current_time.hour, current_time.min, current_time.sec);
 80010c4:	7a3b      	ldrb	r3, [r7, #8]
	  DBG_println("Hour: %d, Min: %d, Sec: %d",
 80010c6:	4817      	ldr	r0, [pc, #92]	; (8001124 <main+0x254>)
 80010c8:	f002 fc7a 	bl	80039c0 <DBG_println>
	  DBG_println("Day: %d, Weekday: %d, month: %d, year: %d",
			  current_date.day, current_date.weekday, current_date.month, current_date.year);
 80010cc:	793b      	ldrb	r3, [r7, #4]
	  DBG_println("Day: %d, Weekday: %d, month: %d, year: %d",
 80010ce:	4619      	mov	r1, r3
			  current_date.day, current_date.weekday, current_date.month, current_date.year);
 80010d0:	f997 3005 	ldrsb.w	r3, [r7, #5]
	  DBG_println("Day: %d, Weekday: %d, month: %d, year: %d",
 80010d4:	461a      	mov	r2, r3
			  current_date.day, current_date.weekday, current_date.month, current_date.year);
 80010d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
	  DBG_println("Day: %d, Weekday: %d, month: %d, year: %d",
 80010da:	4618      	mov	r0, r3
			  current_date.day, current_date.weekday, current_date.month, current_date.year);
 80010dc:	79fb      	ldrb	r3, [r7, #7]
	  DBG_println("Day: %d, Weekday: %d, month: %d, year: %d",
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	4603      	mov	r3, r0
 80010e2:	4811      	ldr	r0, [pc, #68]	; (8001128 <main+0x258>)
 80010e4:	f002 fc6c 	bl	80039c0 <DBG_println>

	  HAL_Delay(1000);
 80010e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ec:	f000 fabc 	bl	8001668 <HAL_Delay>
  {
 80010f0:	e7c1      	b.n	8001076 <main+0x1a6>
 80010f2:	bf00      	nop
 80010f4:	2000008c 	.word	0x2000008c
 80010f8:	08005330 	.word	0x08005330
 80010fc:	0800127d 	.word	0x0800127d
 8001100:	080011fd 	.word	0x080011fd
 8001104:	2000002c 	.word	0x2000002c
 8001108:	08005348 	.word	0x08005348
 800110c:	08005358 	.word	0x08005358
 8001110:	08005364 	.word	0x08005364
 8001114:	0800536c 	.word	0x0800536c
 8001118:	080053c4 	.word	0x080053c4
 800111c:	080053c8 	.word	0x080053c8
 8001120:	40020000 	.word	0x40020000
 8001124:	0800537c 	.word	0x0800537c
 8001128:	08005398 	.word	0x08005398

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	; 0x50
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	2230      	movs	r2, #48	; 0x30
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f004 f8e2 	bl	8005304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	4a23      	ldr	r2, [pc, #140]	; (80011e4 <SystemClock_Config+0xb8>)
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <SystemClock_Config+0xb8>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	; 0x40
 8001160:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <SystemClock_Config+0xb8>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <SystemClock_Config+0xbc>)
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <SystemClock_Config+0xbc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800117a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <SystemClock_Config+0xbc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800118c:	2302      	movs	r3, #2
 800118e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001190:	2301      	movs	r3, #1
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001194:	2310      	movs	r3, #16
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001198:	2300      	movs	r3, #0
 800119a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119c:	f107 0320 	add.w	r3, r7, #32
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fd1d 	bl	8001be0 <HAL_RCC_OscConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011ac:	f000 f886 	bl	80012bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b0:	230f      	movs	r3, #15
 80011b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 ff78 	bl	80020c0 <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011d6:	f000 f871 	bl	80012bc <Error_Handler>
  }
}
 80011da:	bf00      	nop
 80011dc:	3750      	adds	r7, #80	; 0x50
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40007000 	.word	0x40007000

080011ec <PCF2123_on_assertion>:
	}
}
#endif

void PCF2123_on_assertion(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <my_spi_xfer>:

pcf2123_error_t my_spi_xfer(uint8_t *write, uint8_t *read, size_t xfer_len, uint32_t timeout_ms)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af02      	add	r7, sp, #8
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	603b      	str	r3, [r7, #0]
	PCF2123_ASSERT(write);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <my_spi_xfer+0x1a>
 8001210:	f7ff ffec 	bl	80011ec <PCF2123_on_assertion>
 8001214:	e7fe      	b.n	8001214 <my_spi_xfer+0x18>
	PCF2123_ASSERT(read);
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d102      	bne.n	8001222 <my_spi_xfer+0x26>
 800121c:	f7ff ffe6 	bl	80011ec <PCF2123_on_assertion>
 8001220:	e7fe      	b.n	8001220 <my_spi_xfer+0x24>

	pcf2123_error_t retval;
	HAL_StatusTypeDef xfer_sts;

	HAL_GPIO_WritePin(HEART_GPIO_Port, HEART_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001228:	4812      	ldr	r0, [pc, #72]	; (8001274 <my_spi_xfer+0x78>)
 800122a:	f000 fca5 	bl	8001b78 <HAL_GPIO_WritePin>
	xfer_sts = HAL_SPI_TransmitReceive(&hspi1, write, read, xfer_len, timeout_ms);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	b29a      	uxth	r2, r3
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	4613      	mov	r3, r2
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	68f9      	ldr	r1, [r7, #12]
 800123c:	480e      	ldr	r0, [pc, #56]	; (8001278 <my_spi_xfer+0x7c>)
 800123e:	f001 f972 	bl	8002526 <HAL_SPI_TransmitReceive>
 8001242:	4603      	mov	r3, r0
 8001244:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(HEART_GPIO_Port, HEART_Pin, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <my_spi_xfer+0x78>)
 800124e:	f000 fc93 	bl	8001b78 <HAL_GPIO_WritePin>

	if (HAL_TIMEOUT == xfer_sts) {
 8001252:	7dbb      	ldrb	r3, [r7, #22]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d102      	bne.n	800125e <my_spi_xfer+0x62>
		retval = PCF2123_ETIMEOUT;
 8001258:	23ff      	movs	r3, #255	; 0xff
 800125a:	75fb      	strb	r3, [r7, #23]
 800125c:	e004      	b.n	8001268 <my_spi_xfer+0x6c>
	} else if (HAL_OK == xfer_sts) {
 800125e:	7dbb      	ldrb	r3, [r7, #22]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <my_spi_xfer+0x6c>
		retval = PCF2123_ENONE;
 8001264:	2300      	movs	r3, #0
 8001266:	75fb      	strb	r3, [r7, #23]
	}

	return retval;
 8001268:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40020000 	.word	0x40020000
 8001278:	20000034 	.word	0x20000034

0800127c <my_control_ce>:

void my_control_ce(pcf2123_ce_t ce_state)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	if (PCF2123_CE_ENABLE == ce_state) {
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d105      	bne.n	8001298 <my_control_ce+0x1c>
		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 800128c:	2201      	movs	r2, #1
 800128e:	2110      	movs	r1, #16
 8001290:	4809      	ldr	r0, [pc, #36]	; (80012b8 <my_control_ce+0x3c>)
 8001292:	f000 fc71 	bl	8001b78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
	} else {
		/* NOTE: You should never reach this point */
		PCF2123_ASSERT(0);
	}
}
 8001296:	e00b      	b.n	80012b0 <my_control_ce+0x34>
	} else if (PCF2123_CE_DISABLE == ce_state) {
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d105      	bne.n	80012aa <my_control_ce+0x2e>
		HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	2110      	movs	r1, #16
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <my_control_ce+0x3c>)
 80012a4:	f000 fc68 	bl	8001b78 <HAL_GPIO_WritePin>
}
 80012a8:	e002      	b.n	80012b0 <my_control_ce+0x34>
		PCF2123_ASSERT(0);
 80012aa:	f7ff ff9f 	bl	80011ec <PCF2123_on_assertion>
 80012ae:	e7fe      	b.n	80012ae <my_control_ce+0x32>
}
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40020800 	.word	0x40020800

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_SPI1_Init+0x64>)
 80012d2:	4a18      	ldr	r2, [pc, #96]	; (8001334 <MX_SPI1_Init+0x68>)
 80012d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_SPI1_Init+0x64>)
 80012d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_SPI1_Init+0x64>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_SPI1_Init+0x64>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_SPI1_Init+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_SPI1_Init+0x64>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_SPI1_Init+0x64>)
 80012f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_SPI1_Init+0x64>)
 8001300:	2218      	movs	r2, #24
 8001302:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <MX_SPI1_Init+0x64>)
 8001306:	2200      	movs	r2, #0
 8001308:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_SPI1_Init+0x64>)
 800130c:	2200      	movs	r2, #0
 800130e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <MX_SPI1_Init+0x64>)
 8001312:	2200      	movs	r2, #0
 8001314:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_SPI1_Init+0x64>)
 8001318:	220a      	movs	r2, #10
 800131a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_SPI1_Init+0x64>)
 800131e:	f001 f89f 	bl	8002460 <HAL_SPI_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001328:	f7ff ffc8 	bl	80012bc <Error_Handler>
  }

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000034 	.word	0x20000034
 8001334:	40013000 	.word	0x40013000

08001338 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a19      	ldr	r2, [pc, #100]	; (80013bc <HAL_SPI_MspInit+0x84>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d12b      	bne.n	80013b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4a18      	ldr	r2, [pc, #96]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 8001360:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 8001362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001364:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001368:	6453      	str	r3, [r2, #68]	; 0x44
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4a11      	ldr	r2, [pc, #68]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001392:	23e0      	movs	r3, #224	; 0xe0
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013a2:	2305      	movs	r3, #5
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <HAL_SPI_MspInit+0x8c>)
 80013ae:	f000 fa61 	bl	8001874 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013b2:	bf00      	nop
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40013000 	.word	0x40013000
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020000 	.word	0x40020000

080013c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4a10      	ldr	r2, [pc, #64]	; (8001414 <HAL_MspInit+0x4c>)
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_MspInit+0x4c>)
 80013d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	4a09      	ldr	r2, [pc, #36]	; (8001414 <HAL_MspInit+0x4c>)
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_MspInit+0x4c>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <MemManage_Handler+0x4>

08001432 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <UsageFault_Handler+0x4>

0800143e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146c:	f000 f8dc 	bl	8001628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001478:	4a08      	ldr	r2, [pc, #32]	; (800149c <SystemInit+0x28>)
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <SystemInit+0x28>)
 800147c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <SystemInit+0x28>)
 800148a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800148e:	609a      	str	r2, [r3, #8]
#endif
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <MX_USART2_UART_Init+0x50>)
 80014a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014ac:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80014b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014c6:	220c      	movs	r2, #12
 80014c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_USART2_UART_Init+0x4c>)
 80014d8:	f001 fa72 	bl	80029c0 <HAL_UART_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014e2:	f7ff feeb 	bl	80012bc <Error_Handler>
  }

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000008c 	.word	0x2000008c
 80014f0:	40004400 	.word	0x40004400

080014f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a19      	ldr	r2, [pc, #100]	; (8001578 <HAL_UART_MspInit+0x84>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d12b      	bne.n	800156e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4a18      	ldr	r2, [pc, #96]	; (800157c <HAL_UART_MspInit+0x88>)
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_UART_MspInit+0x88>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_UART_MspInit+0x88>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4a11      	ldr	r2, [pc, #68]	; (800157c <HAL_UART_MspInit+0x88>)
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_UART_MspInit+0x88>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_UART_MspInit+0x88>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800154e:	230c      	movs	r3, #12
 8001550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800155e:	2307      	movs	r3, #7
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	; (8001580 <HAL_UART_MspInit+0x8c>)
 800156a:	f000 f983 	bl	8001874 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800156e:	bf00      	nop
 8001570:	3728      	adds	r7, #40	; 0x28
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40004400 	.word	0x40004400
 800157c:	40023800 	.word	0x40023800
 8001580:	40020000 	.word	0x40020000

08001584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001588:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <HAL_Init+0x40>)
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_Init+0x40>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001594:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <HAL_Init+0x40>)
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_Init+0x40>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a0:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <HAL_Init+0x40>)
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_Init+0x40>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f000 f92d 	bl	800180c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f000 f808 	bl	80015c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b8:	f7ff ff06 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023c00 	.word	0x40023c00

080015c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_InitTick+0x54>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_InitTick+0x58>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f937 	bl	800185a <HAL_SYSTICK_Config>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00e      	b.n	8001614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d80a      	bhi.n	8001612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f000 f90d 	bl	8001822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <HAL_InitTick+0x5c>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000000 	.word	0x20000000
 8001620:	20000008 	.word	0x20000008
 8001624:	20000004 	.word	0x20000004

08001628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x20>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x24>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_IncTick+0x24>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000008 	.word	0x20000008
 800164c:	200000cc 	.word	0x200000cc

08001650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_GetTick+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	200000cc 	.word	0x200000cc

08001668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001670:	f7ff ffee 	bl	8001650 <HAL_GetTick>
 8001674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001680:	d005      	beq.n	800168e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_Delay+0x40>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800168e:	bf00      	nop
 8001690:	f7ff ffde 	bl	8001650 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1ad2      	subs	r2, r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	429a      	cmp	r2, r3
 800169e:	d3f7      	bcc.n	8001690 <HAL_Delay+0x28>
  {
  }
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000008 	.word	0x20000008

080016ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c8:	4013      	ands	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016de:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	60d3      	str	r3, [r2, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <__NVIC_GetPriorityGrouping+0x18>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 0307 	and.w	r3, r3, #7
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	490d      	ldr	r1, [pc, #52]	; (800175c <__NVIC_SetPriority+0x4c>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	4909      	ldr	r1, [pc, #36]	; (8001760 <__NVIC_SetPriority+0x50>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	3b04      	subs	r3, #4
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	2201      	movs	r2, #1
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	1e5a      	subs	r2, r3, #1
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	401a      	ands	r2, r3
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017aa:	2101      	movs	r1, #1
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	1e59      	subs	r1, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	4313      	orrs	r3, r2
         );
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3724      	adds	r7, #36	; 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d8:	d301      	bcc.n	80017de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017da:	2301      	movs	r3, #1
 80017dc:	e00f      	b.n	80017fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <SysTick_Config+0x40>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e6:	210f      	movs	r1, #15
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f7ff ff90 	bl	8001710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <SysTick_Config+0x40>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f6:	4b04      	ldr	r3, [pc, #16]	; (8001808 <SysTick_Config+0x40>)
 80017f8:	2207      	movs	r2, #7
 80017fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	e000e010 	.word	0xe000e010

0800180c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff49 	bl	80016ac <__NVIC_SetPriorityGrouping>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001834:	f7ff ff5e 	bl	80016f4 <__NVIC_GetPriorityGrouping>
 8001838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	6978      	ldr	r0, [r7, #20]
 8001840:	f7ff ff90 	bl	8001764 <NVIC_EncodePriority>
 8001844:	4602      	mov	r2, r0
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff5f 	bl	8001710 <__NVIC_SetPriority>
}
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffb0 	bl	80017c8 <SysTick_Config>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	e159      	b.n	8001b44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001890:	2201      	movs	r2, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	f040 8148 	bne.w	8001b3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d00b      	beq.n	80018ce <HAL_GPIO_Init+0x5a>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d007      	beq.n	80018ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018c2:	2b11      	cmp	r3, #17
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b12      	cmp	r3, #18
 80018cc:	d130      	bne.n	8001930 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	2203      	movs	r2, #3
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001904:	2201      	movs	r2, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 0201 	and.w	r2, r3, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0xfc>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b12      	cmp	r3, #18
 800196e:	d123      	bne.n	80019b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	08da      	lsrs	r2, r3, #3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3208      	adds	r2, #8
 8001978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	220f      	movs	r2, #15
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	08da      	lsrs	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3208      	adds	r2, #8
 80019b2:	69b9      	ldr	r1, [r7, #24]
 80019b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0203 	and.w	r2, r3, #3
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80a2 	beq.w	8001b3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4a56      	ldr	r2, [pc, #344]	; (8001b58 <HAL_GPIO_Init+0x2e4>)
 8001a00:	4b55      	ldr	r3, [pc, #340]	; (8001b58 <HAL_GPIO_Init+0x2e4>)
 8001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a08:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0a:	4b53      	ldr	r3, [pc, #332]	; (8001b58 <HAL_GPIO_Init+0x2e4>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a16:	4a51      	ldr	r2, [pc, #324]	; (8001b5c <HAL_GPIO_Init+0x2e8>)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a48      	ldr	r2, [pc, #288]	; (8001b60 <HAL_GPIO_Init+0x2ec>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d019      	beq.n	8001a76 <HAL_GPIO_Init+0x202>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a47      	ldr	r2, [pc, #284]	; (8001b64 <HAL_GPIO_Init+0x2f0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d013      	beq.n	8001a72 <HAL_GPIO_Init+0x1fe>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a46      	ldr	r2, [pc, #280]	; (8001b68 <HAL_GPIO_Init+0x2f4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d00d      	beq.n	8001a6e <HAL_GPIO_Init+0x1fa>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a45      	ldr	r2, [pc, #276]	; (8001b6c <HAL_GPIO_Init+0x2f8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d007      	beq.n	8001a6a <HAL_GPIO_Init+0x1f6>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a44      	ldr	r2, [pc, #272]	; (8001b70 <HAL_GPIO_Init+0x2fc>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_GPIO_Init+0x1f2>
 8001a62:	2304      	movs	r3, #4
 8001a64:	e008      	b.n	8001a78 <HAL_GPIO_Init+0x204>
 8001a66:	2307      	movs	r3, #7
 8001a68:	e006      	b.n	8001a78 <HAL_GPIO_Init+0x204>
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e004      	b.n	8001a78 <HAL_GPIO_Init+0x204>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e002      	b.n	8001a78 <HAL_GPIO_Init+0x204>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <HAL_GPIO_Init+0x204>
 8001a76:	2300      	movs	r3, #0
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	f002 0203 	and.w	r2, r2, #3
 8001a7e:	0092      	lsls	r2, r2, #2
 8001a80:	4093      	lsls	r3, r2
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a88:	4934      	ldr	r1, [pc, #208]	; (8001b5c <HAL_GPIO_Init+0x2e8>)
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a96:	4b37      	ldr	r3, [pc, #220]	; (8001b74 <HAL_GPIO_Init+0x300>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aba:	4a2e      	ldr	r2, [pc, #184]	; (8001b74 <HAL_GPIO_Init+0x300>)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ac0:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <HAL_GPIO_Init+0x300>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ae4:	4a23      	ldr	r2, [pc, #140]	; (8001b74 <HAL_GPIO_Init+0x300>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <HAL_GPIO_Init+0x300>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b0e:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <HAL_GPIO_Init+0x300>)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b14:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_GPIO_Init+0x300>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b38:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <HAL_GPIO_Init+0x300>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3301      	adds	r3, #1
 8001b42:	61fb      	str	r3, [r7, #28]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	2b0f      	cmp	r3, #15
 8001b48:	f67f aea2 	bls.w	8001890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	3724      	adds	r7, #36	; 0x24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40013800 	.word	0x40013800
 8001b60:	40020000 	.word	0x40020000
 8001b64:	40020400 	.word	0x40020400
 8001b68:	40020800 	.word	0x40020800
 8001b6c:	40020c00 	.word	0x40020c00
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40013c00 	.word	0x40013c00

08001b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
 8001b84:	4613      	mov	r3, r2
 8001b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b88:	787b      	ldrb	r3, [r7, #1]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8e:	887a      	ldrh	r2, [r7, #2]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b94:	e003      	b.n	8001b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b96:	887b      	ldrh	r3, [r7, #2]
 8001b98:	041a      	lsls	r2, r3, #16
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	619a      	str	r2, [r3, #24]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	401a      	ands	r2, r3
 8001bbe:	887b      	ldrh	r3, [r7, #2]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d104      	bne.n	8001bce <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	041a      	lsls	r2, r3, #16
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001bcc:	e002      	b.n	8001bd4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001bce:	887a      	ldrh	r2, [r7, #2]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	619a      	str	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e25b      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d075      	beq.n	8001cea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bfe:	4ba3      	ldr	r3, [pc, #652]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d00c      	beq.n	8001c24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c0a:	4ba0      	ldr	r3, [pc, #640]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d112      	bne.n	8001c3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c16:	4b9d      	ldr	r3, [pc, #628]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c22:	d10b      	bne.n	8001c3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	4b99      	ldr	r3, [pc, #612]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d05b      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x108>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d157      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e236      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c44:	d106      	bne.n	8001c54 <HAL_RCC_OscConfig+0x74>
 8001c46:	4a91      	ldr	r2, [pc, #580]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c48:	4b90      	ldr	r3, [pc, #576]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e01d      	b.n	8001c90 <HAL_RCC_OscConfig+0xb0>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x98>
 8001c5e:	4a8b      	ldr	r2, [pc, #556]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	4b8a      	ldr	r3, [pc, #552]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4a88      	ldr	r2, [pc, #544]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	4b87      	ldr	r3, [pc, #540]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_OscConfig+0xb0>
 8001c78:	4a84      	ldr	r2, [pc, #528]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	4b84      	ldr	r3, [pc, #528]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4a81      	ldr	r2, [pc, #516]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c86:	4b81      	ldr	r3, [pc, #516]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d013      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff fcda 	bl	8001650 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff fcd6 	bl	8001650 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	; 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1fb      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b76      	ldr	r3, [pc, #472]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xc0>
 8001cbe:	e014      	b.n	8001cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fcc6 	bl	8001650 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fcc2 	bl	8001650 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e1e7      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	4b6c      	ldr	r3, [pc, #432]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0xe8>
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d063      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cf6:	4b65      	ldr	r3, [pc, #404]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d02:	4b62      	ldr	r3, [pc, #392]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d11c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d0e:	4b5f      	ldr	r3, [pc, #380]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d116      	bne.n	8001d48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1a:	4b5c      	ldr	r3, [pc, #368]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <HAL_RCC_OscConfig+0x152>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e1bb      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d32:	4956      	ldr	r1, [pc, #344]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001d34:	4b55      	ldr	r3, [pc, #340]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d46:	e03a      	b.n	8001dbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d50:	4b4f      	ldr	r3, [pc, #316]	; (8001e90 <HAL_RCC_OscConfig+0x2b0>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d56:	f7ff fc7b 	bl	8001650 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d5e:	f7ff fc77 	bl	8001650 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e19c      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	4b46      	ldr	r3, [pc, #280]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	4943      	ldr	r1, [pc, #268]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001d7e:	4b43      	ldr	r3, [pc, #268]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]
 8001d90:	e015      	b.n	8001dbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d92:	4b3f      	ldr	r3, [pc, #252]	; (8001e90 <HAL_RCC_OscConfig+0x2b0>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff fc5a 	bl	8001650 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da0:	f7ff fc56 	bl	8001650 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e17b      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d030      	beq.n	8001e2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d016      	beq.n	8001e00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd2:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <HAL_RCC_OscConfig+0x2b4>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd8:	f7ff fc3a 	bl	8001650 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de0:	f7ff fc36 	bl	8001650 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e15b      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x200>
 8001dfe:	e015      	b.n	8001e2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e00:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <HAL_RCC_OscConfig+0x2b4>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7ff fc23 	bl	8001650 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0e:	f7ff fc1f 	bl	8001650 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e144      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f0      	bne.n	8001e0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80a0 	beq.w	8001f7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10f      	bne.n	8001e6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e66:	2301      	movs	r3, #1
 8001e68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_RCC_OscConfig+0x2b8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d121      	bne.n	8001eba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e76:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <HAL_RCC_OscConfig+0x2b8>)
 8001e78:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <HAL_RCC_OscConfig+0x2b8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e82:	f7ff fbe5 	bl	8001650 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e88:	e011      	b.n	8001eae <HAL_RCC_OscConfig+0x2ce>
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	42470000 	.word	0x42470000
 8001e94:	42470e80 	.word	0x42470e80
 8001e98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9c:	f7ff fbd8 	bl	8001650 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e0fd      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eae:	4b81      	ldr	r3, [pc, #516]	; (80020b4 <HAL_RCC_OscConfig+0x4d4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d106      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x2f0>
 8001ec2:	4a7d      	ldr	r2, [pc, #500]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001ec4:	4b7c      	ldr	r3, [pc, #496]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ece:	e01c      	b.n	8001f0a <HAL_RCC_OscConfig+0x32a>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d10c      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x312>
 8001ed8:	4a77      	ldr	r2, [pc, #476]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001eda:	4b77      	ldr	r3, [pc, #476]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee4:	4a74      	ldr	r2, [pc, #464]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001ee6:	4b74      	ldr	r3, [pc, #464]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef0:	e00b      	b.n	8001f0a <HAL_RCC_OscConfig+0x32a>
 8001ef2:	4a71      	ldr	r2, [pc, #452]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001ef4:	4b70      	ldr	r3, [pc, #448]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	6713      	str	r3, [r2, #112]	; 0x70
 8001efe:	4a6e      	ldr	r2, [pc, #440]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001f00:	4b6d      	ldr	r3, [pc, #436]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d015      	beq.n	8001f3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f12:	f7ff fb9d 	bl	8001650 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7ff fb99 	bl	8001650 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0bc      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	4b61      	ldr	r3, [pc, #388]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ee      	beq.n	8001f1a <HAL_RCC_OscConfig+0x33a>
 8001f3c:	e014      	b.n	8001f68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff fb87 	bl	8001650 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7ff fb83 	bl	8001650 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e0a6      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5c:	4b56      	ldr	r3, [pc, #344]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1ee      	bne.n	8001f46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d105      	bne.n	8001f7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6e:	4a52      	ldr	r2, [pc, #328]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001f70:	4b51      	ldr	r3, [pc, #324]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8092 	beq.w	80020a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f84:	4b4c      	ldr	r3, [pc, #304]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d05c      	beq.n	800204a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d141      	bne.n	800201c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f98:	4b48      	ldr	r3, [pc, #288]	; (80020bc <HAL_RCC_OscConfig+0x4dc>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7ff fb57 	bl	8001650 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7ff fb53 	bl	8001650 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e078      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb8:	4b3f      	ldr	r3, [pc, #252]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fc4:	493c      	ldr	r1, [pc, #240]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69da      	ldr	r2, [r3, #28]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	019b      	lsls	r3, r3, #6
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fdc:	085b      	lsrs	r3, r3, #1
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	041b      	lsls	r3, r3, #16
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe8:	061b      	lsls	r3, r3, #24
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fee:	4b33      	ldr	r3, [pc, #204]	; (80020bc <HAL_RCC_OscConfig+0x4dc>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff fb2c 	bl	8001650 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7ff fb28 	bl	8001650 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e04d      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200e:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x41c>
 800201a:	e045      	b.n	80020a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <HAL_RCC_OscConfig+0x4dc>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7ff fb15 	bl	8001650 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202a:	f7ff fb11 	bl	8001650 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e036      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203c:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f0      	bne.n	800202a <HAL_RCC_OscConfig+0x44a>
 8002048:	e02e      	b.n	80020a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e029      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002056:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <HAL_RCC_OscConfig+0x4d8>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	429a      	cmp	r2, r3
 8002068:	d11c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002074:	429a      	cmp	r2, r3
 8002076:	d115      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800207e:	4013      	ands	r3, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002084:	4293      	cmp	r3, r2
 8002086:	d10d      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002092:	429a      	cmp	r2, r3
 8002094:	d106      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40007000 	.word	0x40007000
 80020b8:	40023800 	.word	0x40023800
 80020bc:	42470060 	.word	0x42470060

080020c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0cc      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d4:	4b68      	ldr	r3, [pc, #416]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 020f 	and.w	r2, r3, #15
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d20c      	bcs.n	80020fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b65      	ldr	r3, [pc, #404]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b63      	ldr	r3, [pc, #396]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 020f 	and.w	r2, r3, #15
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0b8      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002114:	4a59      	ldr	r2, [pc, #356]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	4b59      	ldr	r3, [pc, #356]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800211e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800212c:	4a53      	ldr	r2, [pc, #332]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	4b53      	ldr	r3, [pc, #332]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002138:	4950      	ldr	r1, [pc, #320]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	4b50      	ldr	r3, [pc, #320]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d044      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b47      	ldr	r3, [pc, #284]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d119      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e07f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d003      	beq.n	800217e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800217a:	2b03      	cmp	r3, #3
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217e:	4b3f      	ldr	r3, [pc, #252]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e06f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218e:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e067      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219e:	4937      	ldr	r1, [pc, #220]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	4b36      	ldr	r3, [pc, #216]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f023 0203 	bic.w	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b0:	f7ff fa4e 	bl	8001650 <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b8:	f7ff fa4a 	bl	8001650 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e04f      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	4b2b      	ldr	r3, [pc, #172]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 020c 	and.w	r2, r3, #12
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	429a      	cmp	r2, r3
 80021de:	d1eb      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 020f 	and.w	r2, r3, #15
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d90c      	bls.n	8002208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_RCC_ClockConfig+0x1b8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 020f 	and.w	r2, r3, #15
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e032      	b.n	800226e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002214:	4919      	ldr	r1, [pc, #100]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	4b19      	ldr	r3, [pc, #100]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002232:	4912      	ldr	r1, [pc, #72]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002246:	f000 f821 	bl	800228c <HAL_RCC_GetSysClockFreq>
 800224a:	4601      	mov	r1, r0
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	5cd3      	ldrb	r3, [r2, r3]
 800225a:	fa21 f303 	lsr.w	r3, r1, r3
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff f9ae 	bl	80015c8 <HAL_InitTick>

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023c00 	.word	0x40023c00
 800227c:	40023800 	.word	0x40023800
 8002280:	0800545c 	.word	0x0800545c
 8002284:	20000000 	.word	0x20000000
 8002288:	20000004 	.word	0x20000004

0800228c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002290:	b087      	sub	sp, #28
 8002292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002294:	2200      	movs	r2, #0
 8002296:	60fa      	str	r2, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	617a      	str	r2, [r7, #20]
 800229c:	2200      	movs	r2, #0
 800229e:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 80022a0:	2200      	movs	r2, #0
 80022a2:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022a4:	4a51      	ldr	r2, [pc, #324]	; (80023ec <HAL_RCC_GetSysClockFreq+0x160>)
 80022a6:	6892      	ldr	r2, [r2, #8]
 80022a8:	f002 020c 	and.w	r2, r2, #12
 80022ac:	2a04      	cmp	r2, #4
 80022ae:	d007      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x34>
 80022b0:	2a08      	cmp	r2, #8
 80022b2:	d008      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022b4:	2a00      	cmp	r2, #0
 80022b6:	f040 8090 	bne.w	80023da <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022ba:	4b4d      	ldr	r3, [pc, #308]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80022bc:	613b      	str	r3, [r7, #16]
       break;
 80022be:	e08f      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022c0:	4b4c      	ldr	r3, [pc, #304]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80022c2:	613b      	str	r3, [r7, #16]
      break;
 80022c4:	e08c      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c6:	4a49      	ldr	r2, [pc, #292]	; (80023ec <HAL_RCC_GetSysClockFreq+0x160>)
 80022c8:	6852      	ldr	r2, [r2, #4]
 80022ca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80022ce:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022d0:	4a46      	ldr	r2, [pc, #280]	; (80023ec <HAL_RCC_GetSysClockFreq+0x160>)
 80022d2:	6852      	ldr	r2, [r2, #4]
 80022d4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80022d8:	2a00      	cmp	r2, #0
 80022da:	d023      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022dc:	4b43      	ldr	r3, [pc, #268]	; (80023ec <HAL_RCC_GetSysClockFreq+0x160>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	099b      	lsrs	r3, r3, #6
 80022e2:	f04f 0400 	mov.w	r4, #0
 80022e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	ea03 0301 	and.w	r3, r3, r1
 80022f2:	ea04 0402 	and.w	r4, r4, r2
 80022f6:	4a3f      	ldr	r2, [pc, #252]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80022f8:	fb02 f104 	mul.w	r1, r2, r4
 80022fc:	2200      	movs	r2, #0
 80022fe:	fb02 f203 	mul.w	r2, r2, r3
 8002302:	440a      	add	r2, r1
 8002304:	493b      	ldr	r1, [pc, #236]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002306:	fba3 0101 	umull	r0, r1, r3, r1
 800230a:	1853      	adds	r3, r2, r1
 800230c:	4619      	mov	r1, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f04f 0400 	mov.w	r4, #0
 8002314:	461a      	mov	r2, r3
 8002316:	4623      	mov	r3, r4
 8002318:	f7fe fbf8 	bl	8000b0c <__aeabi_uldivmod>
 800231c:	4603      	mov	r3, r0
 800231e:	460c      	mov	r4, r1
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	e04c      	b.n	80023be <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002324:	4a31      	ldr	r2, [pc, #196]	; (80023ec <HAL_RCC_GetSysClockFreq+0x160>)
 8002326:	6852      	ldr	r2, [r2, #4]
 8002328:	0992      	lsrs	r2, r2, #6
 800232a:	4611      	mov	r1, r2
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f240 15ff 	movw	r5, #511	; 0x1ff
 8002334:	f04f 0600 	mov.w	r6, #0
 8002338:	ea05 0501 	and.w	r5, r5, r1
 800233c:	ea06 0602 	and.w	r6, r6, r2
 8002340:	4629      	mov	r1, r5
 8002342:	4632      	mov	r2, r6
 8002344:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8002348:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 800234c:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8002350:	4651      	mov	r1, sl
 8002352:	465a      	mov	r2, fp
 8002354:	46aa      	mov	sl, r5
 8002356:	46b3      	mov	fp, r6
 8002358:	4655      	mov	r5, sl
 800235a:	465e      	mov	r6, fp
 800235c:	1b4d      	subs	r5, r1, r5
 800235e:	eb62 0606 	sbc.w	r6, r2, r6
 8002362:	4629      	mov	r1, r5
 8002364:	4632      	mov	r2, r6
 8002366:	0194      	lsls	r4, r2, #6
 8002368:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800236c:	018b      	lsls	r3, r1, #6
 800236e:	1a5b      	subs	r3, r3, r1
 8002370:	eb64 0402 	sbc.w	r4, r4, r2
 8002374:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002378:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800237c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002380:	4643      	mov	r3, r8
 8002382:	464c      	mov	r4, r9
 8002384:	4655      	mov	r5, sl
 8002386:	465e      	mov	r6, fp
 8002388:	18ed      	adds	r5, r5, r3
 800238a:	eb46 0604 	adc.w	r6, r6, r4
 800238e:	462b      	mov	r3, r5
 8002390:	4634      	mov	r4, r6
 8002392:	02a2      	lsls	r2, r4, #10
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	029b      	lsls	r3, r3, #10
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	e897 0018 	ldmia.w	r7, {r3, r4}
 80023a6:	4618      	mov	r0, r3
 80023a8:	4621      	mov	r1, r4
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f04f 0400 	mov.w	r4, #0
 80023b0:	461a      	mov	r2, r3
 80023b2:	4623      	mov	r3, r4
 80023b4:	f7fe fbaa 	bl	8000b0c <__aeabi_uldivmod>
 80023b8:	4603      	mov	r3, r0
 80023ba:	460c      	mov	r4, r1
 80023bc:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_GetSysClockFreq+0x160>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	0c1b      	lsrs	r3, r3, #16
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	3301      	adds	r3, #1
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d6:	613b      	str	r3, [r7, #16]
      break;
 80023d8:	e002      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80023dc:	613b      	str	r3, [r7, #16]
      break;
 80023de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e0:	693b      	ldr	r3, [r7, #16]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	00f42400 	.word	0x00f42400
 80023f4:	017d7840 	.word	0x017d7840

080023f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <HAL_RCC_GetHCLKFreq+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000000 	.word	0x20000000

08002410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002414:	f7ff fff0 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002418:	4601      	mov	r1, r0
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	0a9b      	lsrs	r3, r3, #10
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	4a03      	ldr	r2, [pc, #12]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002426:	5cd3      	ldrb	r3, [r2, r3]
 8002428:	fa21 f303 	lsr.w	r3, r1, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40023800 	.word	0x40023800
 8002434:	0800546c 	.word	0x0800546c

08002438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800243c:	f7ff ffdc 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002440:	4601      	mov	r1, r0
 8002442:	4b05      	ldr	r3, [pc, #20]	; (8002458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	0b5b      	lsrs	r3, r3, #13
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	4a03      	ldr	r2, [pc, #12]	; (800245c <HAL_RCC_GetPCLK2Freq+0x24>)
 800244e:	5cd3      	ldrb	r3, [r2, r3]
 8002450:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	0800546c 	.word	0x0800546c

08002460 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e055      	b.n	800251e <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d106      	bne.n	8002492 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7fe ff53 	bl	8001338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2202      	movs	r2, #2
 8002496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024a8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6851      	ldr	r1, [r2, #4]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6892      	ldr	r2, [r2, #8]
 80024b6:	4311      	orrs	r1, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	68d2      	ldr	r2, [r2, #12]
 80024bc:	4311      	orrs	r1, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6912      	ldr	r2, [r2, #16]
 80024c2:	4311      	orrs	r1, r2
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6952      	ldr	r2, [r2, #20]
 80024c8:	4311      	orrs	r1, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6992      	ldr	r2, [r2, #24]
 80024ce:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80024d2:	4311      	orrs	r1, r2
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	69d2      	ldr	r2, [r2, #28]
 80024d8:	4311      	orrs	r1, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6a12      	ldr	r2, [r2, #32]
 80024de:	4311      	orrs	r1, r2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80024e4:	430a      	orrs	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6992      	ldr	r2, [r2, #24]
 80024f0:	0c12      	lsrs	r2, r2, #16
 80024f2:	f002 0104 	and.w	r1, r2, #4
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024fa:	430a      	orrs	r2, r1
 80024fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	69d2      	ldr	r2, [r2, #28]
 8002508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800250c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b08c      	sub	sp, #48	; 0x30
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002534:	2301      	movs	r3, #1
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_SPI_TransmitReceive+0x26>
 8002548:	2302      	movs	r3, #2
 800254a:	e188      	b.n	800285e <HAL_SPI_TransmitReceive+0x338>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002554:	f7ff f87c 	bl	8001650 <HAL_GetTick>
 8002558:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800256a:	887b      	ldrh	r3, [r7, #2]
 800256c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800256e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002572:	2b01      	cmp	r3, #1
 8002574:	d00f      	beq.n	8002596 <HAL_SPI_TransmitReceive+0x70>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800257c:	d107      	bne.n	800258e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d103      	bne.n	800258e <HAL_SPI_TransmitReceive+0x68>
 8002586:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800258a:	2b04      	cmp	r3, #4
 800258c:	d003      	beq.n	8002596 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800258e:	2302      	movs	r3, #2
 8002590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002594:	e159      	b.n	800284a <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_SPI_TransmitReceive+0x82>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_SPI_TransmitReceive+0x82>
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d103      	bne.n	80025b0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025ae:	e14c      	b.n	800284a <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d003      	beq.n	80025c4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2205      	movs	r2, #5
 80025c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	887a      	ldrh	r2, [r7, #2]
 80025d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	887a      	ldrh	r2, [r7, #2]
 80025da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	887a      	ldrh	r2, [r7, #2]
 80025e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	887a      	ldrh	r2, [r7, #2]
 80025ec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002604:	2b40      	cmp	r3, #64	; 0x40
 8002606:	d007      	beq.n	8002618 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002616:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002620:	d178      	bne.n	8002714 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <HAL_SPI_TransmitReceive+0x10a>
 800262a:	8b7b      	ldrh	r3, [r7, #26]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d166      	bne.n	80026fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002638:	8812      	ldrh	r2, [r2, #0]
 800263a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	1c9a      	adds	r2, r3, #2
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002654:	e053      	b.n	80026fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b02      	cmp	r3, #2
 8002662:	d11b      	bne.n	800269c <HAL_SPI_TransmitReceive+0x176>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d016      	beq.n	800269c <HAL_SPI_TransmitReceive+0x176>
 800266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002670:	2b01      	cmp	r3, #1
 8002672:	d113      	bne.n	800269c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800267c:	8812      	ldrh	r2, [r2, #0]
 800267e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	1c9a      	adds	r2, r3, #2
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d119      	bne.n	80026de <HAL_SPI_TransmitReceive+0x1b8>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d014      	beq.n	80026de <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	68d2      	ldr	r2, [r2, #12]
 80026be:	b292      	uxth	r2, r2
 80026c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	1c9a      	adds	r2, r3, #2
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026da:	2301      	movs	r3, #1
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026de:	f7fe ffb7 	bl	8001650 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	1ad2      	subs	r2, r2, r3
 80026e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d307      	bcc.n	80026fe <HAL_SPI_TransmitReceive+0x1d8>
 80026ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d003      	beq.n	80026fe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026fc:	e0a5      	b.n	800284a <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1a6      	bne.n	8002656 <HAL_SPI_TransmitReceive+0x130>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800270c:	b29b      	uxth	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1a1      	bne.n	8002656 <HAL_SPI_TransmitReceive+0x130>
 8002712:	e07c      	b.n	800280e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <HAL_SPI_TransmitReceive+0x1fc>
 800271c:	8b7b      	ldrh	r3, [r7, #26]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d16b      	bne.n	80027fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	330c      	adds	r3, #12
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800272c:	7812      	ldrb	r2, [r2, #0]
 800272e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002748:	e057      	b.n	80027fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b02      	cmp	r3, #2
 8002756:	d11c      	bne.n	8002792 <HAL_SPI_TransmitReceive+0x26c>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d017      	beq.n	8002792 <HAL_SPI_TransmitReceive+0x26c>
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	2b01      	cmp	r3, #1
 8002766:	d114      	bne.n	8002792 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	330c      	adds	r3, #12
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002772:	7812      	ldrb	r2, [r2, #0]
 8002774:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d119      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0x2ae>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d014      	beq.n	80027d4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	68d2      	ldr	r2, [r2, #12]
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027d0:	2301      	movs	r3, #1
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027d4:	f7fe ff3c 	bl	8001650 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	1ad2      	subs	r2, r2, r3
 80027de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d303      	bcc.n	80027ec <HAL_SPI_TransmitReceive+0x2c6>
 80027e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ea:	d102      	bne.n	80027f2 <HAL_SPI_TransmitReceive+0x2cc>
 80027ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d103      	bne.n	80027fa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80027f8:	e027      	b.n	800284a <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1a2      	bne.n	800274a <HAL_SPI_TransmitReceive+0x224>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d19d      	bne.n	800274a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800280e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002810:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f892 	bl	800293c <SPI_EndRxTxTransaction>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2220      	movs	r2, #32
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800282a:	e00e      	b.n	800284a <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10a      	bne.n	800284a <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800285a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800285e:	4618      	mov	r0, r3
 8002860:	3730      	adds	r7, #48	; 0x30
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	603b      	str	r3, [r7, #0]
 8002872:	4613      	mov	r3, r2
 8002874:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002876:	e04c      	b.n	8002912 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287e:	d048      	beq.n	8002912 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002880:	f7fe fee6 	bl	8001650 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	1ad2      	subs	r2, r2, r3
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d202      	bcs.n	8002896 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d13d      	bne.n	8002912 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	6852      	ldr	r2, [r2, #4]
 80028a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ae:	d111      	bne.n	80028d4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b8:	d004      	beq.n	80028c4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c2:	d107      	bne.n	80028d4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028dc:	d10f      	bne.n	80028fe <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e00f      	b.n	8002932 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	401a      	ands	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	429a      	cmp	r2, r3
 8002920:	bf0c      	ite	eq
 8002922:	2301      	moveq	r3, #1
 8002924:	2300      	movne	r3, #0
 8002926:	b2db      	uxtb	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	429a      	cmp	r2, r3
 800292e:	d1a3      	bne.n	8002878 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <SPI_EndRxTxTransaction+0x7c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1b      	ldr	r2, [pc, #108]	; (80029bc <SPI_EndRxTxTransaction+0x80>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0d5b      	lsrs	r3, r3, #21
 8002954:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002958:	fb02 f303 	mul.w	r3, r2, r3
 800295c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002966:	d112      	bne.n	800298e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2200      	movs	r2, #0
 8002970:	2180      	movs	r1, #128	; 0x80
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f7ff ff77 	bl	8002866 <SPI_WaitFlagStateUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d016      	beq.n	80029ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	f043 0220 	orr.w	r2, r3, #32
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e00f      	b.n	80029ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	3b01      	subs	r3, #1
 8002998:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a4:	2b80      	cmp	r3, #128	; 0x80
 80029a6:	d0f2      	beq.n	800298e <SPI_EndRxTxTransaction+0x52>
 80029a8:	e000      	b.n	80029ac <SPI_EndRxTxTransaction+0x70>
        break;
 80029aa:	bf00      	nop
  }

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000000 	.word	0x20000000
 80029bc:	165e9f81 	.word	0x165e9f81

080029c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e03f      	b.n	8002a52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d106      	bne.n	80029ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fe fd84 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2224      	movs	r2, #36	; 0x24
 80029f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	68d2      	ldr	r2, [r2, #12]
 80029fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f90b 	bl	8002c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	6912      	ldr	r2, [r2, #16]
 8002a14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	6952      	ldr	r2, [r2, #20]
 8002a24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	68d2      	ldr	r2, [r2, #12]
 8002a34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b088      	sub	sp, #32
 8002a5e:	af02      	add	r7, sp, #8
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	4613      	mov	r3, r2
 8002a68:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b20      	cmp	r3, #32
 8002a78:	f040 8082 	bne.w	8002b80 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <HAL_UART_Transmit+0x2e>
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e07a      	b.n	8002b82 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_UART_Transmit+0x40>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e073      	b.n	8002b82 <HAL_UART_Transmit+0x128>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2221      	movs	r2, #33	; 0x21
 8002aac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ab0:	f7fe fdce 	bl	8001650 <HAL_GetTick>
 8002ab4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	88fa      	ldrh	r2, [r7, #6]
 8002aba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	88fa      	ldrh	r2, [r7, #6]
 8002ac0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002aca:	e041      	b.n	8002b50 <HAL_UART_Transmit+0xf6>
    {
      huart->TxXferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae2:	d121      	bne.n	8002b28 <HAL_UART_Transmit+0xce>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2200      	movs	r2, #0
 8002aec:	2180      	movs	r1, #128	; 0x80
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f84b 	bl	8002b8a <UART_WaitOnFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e041      	b.n	8002b82 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	8812      	ldrh	r2, [r2, #0]
 8002b0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b0e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d103      	bne.n	8002b20 <HAL_UART_Transmit+0xc6>
        {
          pData += 2U;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	e017      	b.n	8002b50 <HAL_UART_Transmit+0xf6>
        }
        else
        {
          pData += 1U;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	3301      	adds	r3, #1
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	e013      	b.n	8002b50 <HAL_UART_Transmit+0xf6>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2180      	movs	r1, #128	; 0x80
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f829 	bl	8002b8a <UART_WaitOnFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_UART_Transmit+0xe8>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e01f      	b.n	8002b82 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	1c59      	adds	r1, r3, #1
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1b8      	bne.n	8002acc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2200      	movs	r2, #0
 8002b62:	2140      	movs	r1, #64	; 0x40
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 f810 	bl	8002b8a <UART_WaitOnFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_UART_Transmit+0x11a>
    {
      return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e006      	b.n	8002b82 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e000      	b.n	8002b82 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8002b80:	2302      	movs	r3, #2
  }
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	4613      	mov	r3, r2
 8002b98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b9a:	e02c      	b.n	8002bf6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba2:	d028      	beq.n	8002bf6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <UART_WaitOnFlagUntilTimeout+0x30>
 8002baa:	f7fe fd51 	bl	8001650 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	1ad2      	subs	r2, r2, r3
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d91d      	bls.n	8002bf6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	6812      	ldr	r2, [r2, #0]
 8002bc2:	68d2      	ldr	r2, [r2, #12]
 8002bc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bc8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	6952      	ldr	r2, [r2, #20]
 8002bd4:	f022 0201 	bic.w	r2, r2, #1
 8002bd8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e00f      	b.n	8002c16 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	401a      	ands	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	bf0c      	ite	eq
 8002c06:	2301      	moveq	r3, #1
 8002c08:	2300      	movne	r3, #0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d0c3      	beq.n	8002b9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c24:	b0a3      	sub	sp, #140	; 0x8c
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	67f8      	str	r0, [r7, #124]	; 0x7c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c2c:	6819      	ldr	r1, [r3, #0]
 8002c2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MODIFY_REG(huart->Instance->CR1,
 8002c5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c5c:	6819      	ldr	r1, [r3, #0]
 8002c5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8002c68:	f022 020c 	bic.w	r2, r2, #12
 8002c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c76:	6819      	ldr	r1, [r3, #0]
 8002c78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	614b      	str	r3, [r1, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c92:	f040 8171 	bne.w	8002f78 <UART_SetConfig+0x358>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4ab4      	ldr	r2, [pc, #720]	; (8002f6c <UART_SetConfig+0x34c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d005      	beq.n	8002cac <UART_SetConfig+0x8c>
 8002ca0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4ab2      	ldr	r2, [pc, #712]	; (8002f70 <UART_SetConfig+0x350>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	f040 80b1 	bne.w	8002e0e <UART_SetConfig+0x1ee>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cac:	f7ff fbc4 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8002cb0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cb6:	681d      	ldr	r5, [r3, #0]
 8002cb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4614      	mov	r4, r2
 8002cc6:	18db      	adds	r3, r3, r3
 8002cc8:	eb44 0404 	adc.w	r4, r4, r4
 8002ccc:	185b      	adds	r3, r3, r1
 8002cce:	eb44 0402 	adc.w	r4, r4, r2
 8002cd2:	00e0      	lsls	r0, r4, #3
 8002cd4:	6478      	str	r0, [r7, #68]	; 0x44
 8002cd6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002cd8:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002cdc:	6478      	str	r0, [r7, #68]	; 0x44
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ce2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002ce6:	eb13 0801 	adds.w	r8, r3, r1
 8002cea:	eb44 0902 	adc.w	r9, r4, r2
 8002cee:	4640      	mov	r0, r8
 8002cf0:	4649      	mov	r1, r9
 8002cf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f04f 0400 	mov.w	r4, #0
 8002cfa:	18db      	adds	r3, r3, r3
 8002cfc:	eb44 0404 	adc.w	r4, r4, r4
 8002d00:	461a      	mov	r2, r3
 8002d02:	4623      	mov	r3, r4
 8002d04:	f7fd ff02 	bl	8000b0c <__aeabi_uldivmod>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	460c      	mov	r4, r1
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4b99      	ldr	r3, [pc, #612]	; (8002f74 <UART_SetConfig+0x354>)
 8002d10:	fba3 2302 	umull	r2, r3, r3, r2
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	011e      	lsls	r6, r3, #4
 8002d18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4614      	mov	r4, r2
 8002d26:	18db      	adds	r3, r3, r3
 8002d28:	eb44 0404 	adc.w	r4, r4, r4
 8002d2c:	185b      	adds	r3, r3, r1
 8002d2e:	eb44 0402 	adc.w	r4, r4, r2
 8002d32:	00e0      	lsls	r0, r4, #3
 8002d34:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002d36:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002d38:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002d3c:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d42:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002d46:	eb13 0801 	adds.w	r8, r3, r1
 8002d4a:	eb44 0902 	adc.w	r9, r4, r2
 8002d4e:	4640      	mov	r0, r8
 8002d50:	4649      	mov	r1, r9
 8002d52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f04f 0400 	mov.w	r4, #0
 8002d5a:	18db      	adds	r3, r3, r3
 8002d5c:	eb44 0404 	adc.w	r4, r4, r4
 8002d60:	461a      	mov	r2, r3
 8002d62:	4623      	mov	r3, r4
 8002d64:	f7fd fed2 	bl	8000b0c <__aeabi_uldivmod>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4b81      	ldr	r3, [pc, #516]	; (8002f74 <UART_SetConfig+0x354>)
 8002d70:	fba3 1302 	umull	r1, r3, r3, r2
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	2164      	movs	r1, #100	; 0x64
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	3332      	adds	r3, #50	; 0x32
 8002d82:	4a7c      	ldr	r2, [pc, #496]	; (8002f74 <UART_SetConfig+0x354>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d90:	441e      	add	r6, r3
 8002d92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d96:	4619      	mov	r1, r3
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4614      	mov	r4, r2
 8002da0:	18db      	adds	r3, r3, r3
 8002da2:	eb44 0404 	adc.w	r4, r4, r4
 8002da6:	185b      	adds	r3, r3, r1
 8002da8:	eb44 0402 	adc.w	r4, r4, r2
 8002dac:	00e0      	lsls	r0, r4, #3
 8002dae:	6378      	str	r0, [r7, #52]	; 0x34
 8002db0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002db2:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002db6:	6378      	str	r0, [r7, #52]	; 0x34
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	633b      	str	r3, [r7, #48]	; 0x30
 8002dbc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002dc0:	eb13 0801 	adds.w	r8, r3, r1
 8002dc4:	eb44 0902 	adc.w	r9, r4, r2
 8002dc8:	4640      	mov	r0, r8
 8002dca:	4649      	mov	r1, r9
 8002dcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f04f 0400 	mov.w	r4, #0
 8002dd4:	18db      	adds	r3, r3, r3
 8002dd6:	eb44 0404 	adc.w	r4, r4, r4
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4623      	mov	r3, r4
 8002dde:	f7fd fe95 	bl	8000b0c <__aeabi_uldivmod>
 8002de2:	4603      	mov	r3, r0
 8002de4:	460c      	mov	r4, r1
 8002de6:	461a      	mov	r2, r3
 8002de8:	4b62      	ldr	r3, [pc, #392]	; (8002f74 <UART_SetConfig+0x354>)
 8002dea:	fba3 1302 	umull	r1, r3, r3, r2
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	2164      	movs	r1, #100	; 0x64
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	3332      	adds	r3, #50	; 0x32
 8002dfc:	4a5d      	ldr	r2, [pc, #372]	; (8002f74 <UART_SetConfig+0x354>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	4433      	add	r3, r6
 8002e0a:	60ab      	str	r3, [r5, #8]
 8002e0c:	e240      	b.n	8003290 <UART_SetConfig+0x670>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e0e:	f7ff faff 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 8002e12:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	673a      	str	r2, [r7, #112]	; 0x70
 8002e1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e20:	4619      	mov	r1, r3
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4614      	mov	r4, r2
 8002e2a:	18db      	adds	r3, r3, r3
 8002e2c:	eb44 0404 	adc.w	r4, r4, r4
 8002e30:	185b      	adds	r3, r3, r1
 8002e32:	eb44 0402 	adc.w	r4, r4, r2
 8002e36:	00e0      	lsls	r0, r4, #3
 8002e38:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002e3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e3c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002e40:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e46:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002e4a:	185d      	adds	r5, r3, r1
 8002e4c:	eb44 0602 	adc.w	r6, r4, r2
 8002e50:	4628      	mov	r0, r5
 8002e52:	4631      	mov	r1, r6
 8002e54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f04f 0400 	mov.w	r4, #0
 8002e5c:	18db      	adds	r3, r3, r3
 8002e5e:	eb44 0404 	adc.w	r4, r4, r4
 8002e62:	461a      	mov	r2, r3
 8002e64:	4623      	mov	r3, r4
 8002e66:	f7fd fe51 	bl	8000b0c <__aeabi_uldivmod>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	460c      	mov	r4, r1
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4b40      	ldr	r3, [pc, #256]	; (8002f74 <UART_SetConfig+0x354>)
 8002e72:	fba3 2302 	umull	r2, r3, r3, r2
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	011e      	lsls	r6, r3, #4
 8002e7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e7e:	4619      	mov	r1, r3
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4614      	mov	r4, r2
 8002e88:	18db      	adds	r3, r3, r3
 8002e8a:	eb44 0404 	adc.w	r4, r4, r4
 8002e8e:	185b      	adds	r3, r3, r1
 8002e90:	eb44 0402 	adc.w	r4, r4, r2
 8002e94:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8002e98:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8002e9c:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8002ea0:	4653      	mov	r3, sl
 8002ea2:	465c      	mov	r4, fp
 8002ea4:	eb13 0a01 	adds.w	sl, r3, r1
 8002ea8:	eb44 0b02 	adc.w	fp, r4, r2
 8002eac:	4650      	mov	r0, sl
 8002eae:	4659      	mov	r1, fp
 8002eb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f04f 0400 	mov.w	r4, #0
 8002eb8:	18db      	adds	r3, r3, r3
 8002eba:	eb44 0404 	adc.w	r4, r4, r4
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4623      	mov	r3, r4
 8002ec2:	f7fd fe23 	bl	8000b0c <__aeabi_uldivmod>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	460c      	mov	r4, r1
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4b29      	ldr	r3, [pc, #164]	; (8002f74 <UART_SetConfig+0x354>)
 8002ece:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	2164      	movs	r1, #100	; 0x64
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	3332      	adds	r3, #50	; 0x32
 8002ee0:	4a24      	ldr	r2, [pc, #144]	; (8002f74 <UART_SetConfig+0x354>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002eee:	441e      	add	r6, r3
 8002ef0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4614      	mov	r4, r2
 8002efe:	18db      	adds	r3, r3, r3
 8002f00:	eb44 0404 	adc.w	r4, r4, r4
 8002f04:	185b      	adds	r3, r3, r1
 8002f06:	eb44 0402 	adc.w	r4, r4, r2
 8002f0a:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002f0e:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002f12:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002f16:	4643      	mov	r3, r8
 8002f18:	464c      	mov	r4, r9
 8002f1a:	eb13 0801 	adds.w	r8, r3, r1
 8002f1e:	eb44 0902 	adc.w	r9, r4, r2
 8002f22:	4640      	mov	r0, r8
 8002f24:	4649      	mov	r1, r9
 8002f26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f04f 0400 	mov.w	r4, #0
 8002f2e:	18db      	adds	r3, r3, r3
 8002f30:	eb44 0404 	adc.w	r4, r4, r4
 8002f34:	461a      	mov	r2, r3
 8002f36:	4623      	mov	r3, r4
 8002f38:	f7fd fde8 	bl	8000b0c <__aeabi_uldivmod>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	460c      	mov	r4, r1
 8002f40:	461a      	mov	r2, r3
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <UART_SetConfig+0x354>)
 8002f44:	fba3 1302 	umull	r1, r3, r3, r2
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	2164      	movs	r1, #100	; 0x64
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	3332      	adds	r3, #50	; 0x32
 8002f56:	4a07      	ldr	r2, [pc, #28]	; (8002f74 <UART_SetConfig+0x354>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	4433      	add	r3, r6
 8002f64:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002f66:	6093      	str	r3, [r2, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002f68:	e192      	b.n	8003290 <UART_SetConfig+0x670>
 8002f6a:	bf00      	nop
 8002f6c:	40011000 	.word	0x40011000
 8002f70:	40011400 	.word	0x40011400
 8002f74:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4bc1      	ldr	r3, [pc, #772]	; (8003284 <UART_SetConfig+0x664>)
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d005      	beq.n	8002f8e <UART_SetConfig+0x36e>
 8002f82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4bc0      	ldr	r3, [pc, #768]	; (8003288 <UART_SetConfig+0x668>)
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	f040 80bf 	bne.w	800310c <UART_SetConfig+0x4ec>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f8e:	f7ff fa53 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8002f92:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f98:	681e      	ldr	r6, [r3, #0]
 8002f9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4614      	mov	r4, r2
 8002fa8:	18db      	adds	r3, r3, r3
 8002faa:	eb44 0404 	adc.w	r4, r4, r4
 8002fae:	185b      	adds	r3, r3, r1
 8002fb0:	eb44 0402 	adc.w	r4, r4, r2
 8002fb4:	00e0      	lsls	r0, r4, #3
 8002fb6:	6278      	str	r0, [r7, #36]	; 0x24
 8002fb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fba:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002fbe:	6278      	str	r0, [r7, #36]	; 0x24
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	623b      	str	r3, [r7, #32]
 8002fc4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002fc8:	eb13 0801 	adds.w	r8, r3, r1
 8002fcc:	eb44 0902 	adc.w	r9, r4, r2
 8002fd0:	4640      	mov	r0, r8
 8002fd2:	4649      	mov	r1, r9
 8002fd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f04f 0400 	mov.w	r4, #0
 8002fdc:	00a2      	lsls	r2, r4, #2
 8002fde:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002fe0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002fe2:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002fe6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ff0:	f7fd fd8c 	bl	8000b0c <__aeabi_uldivmod>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	460c      	mov	r4, r1
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4ba4      	ldr	r3, [pc, #656]	; (800328c <UART_SetConfig+0x66c>)
 8002ffc:	fba3 2302 	umull	r2, r3, r3, r2
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	011d      	lsls	r5, r3, #4
 8003004:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003008:	4619      	mov	r1, r3
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	460b      	mov	r3, r1
 8003010:	4614      	mov	r4, r2
 8003012:	18db      	adds	r3, r3, r3
 8003014:	eb44 0404 	adc.w	r4, r4, r4
 8003018:	185b      	adds	r3, r3, r1
 800301a:	eb44 0402 	adc.w	r4, r4, r2
 800301e:	00e0      	lsls	r0, r4, #3
 8003020:	61f8      	str	r0, [r7, #28]
 8003022:	69f8      	ldr	r0, [r7, #28]
 8003024:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003028:	61f8      	str	r0, [r7, #28]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003032:	eb13 0801 	adds.w	r8, r3, r1
 8003036:	eb44 0902 	adc.w	r9, r4, r2
 800303a:	4640      	mov	r0, r8
 800303c:	4649      	mov	r1, r9
 800303e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f04f 0400 	mov.w	r4, #0
 8003046:	00a2      	lsls	r2, r4, #2
 8003048:	657a      	str	r2, [r7, #84]	; 0x54
 800304a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800304c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003050:	657a      	str	r2, [r7, #84]	; 0x54
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	653b      	str	r3, [r7, #80]	; 0x50
 8003056:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800305a:	f7fd fd57 	bl	8000b0c <__aeabi_uldivmod>
 800305e:	4603      	mov	r3, r0
 8003060:	460c      	mov	r4, r1
 8003062:	461a      	mov	r2, r3
 8003064:	4b89      	ldr	r3, [pc, #548]	; (800328c <UART_SetConfig+0x66c>)
 8003066:	fba3 1302 	umull	r1, r3, r3, r2
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2164      	movs	r1, #100	; 0x64
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	3332      	adds	r3, #50	; 0x32
 8003078:	4a84      	ldr	r2, [pc, #528]	; (800328c <UART_SetConfig+0x66c>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003084:	441d      	add	r5, r3
 8003086:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800308a:	4619      	mov	r1, r3
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	460b      	mov	r3, r1
 8003092:	4614      	mov	r4, r2
 8003094:	18db      	adds	r3, r3, r3
 8003096:	eb44 0404 	adc.w	r4, r4, r4
 800309a:	185b      	adds	r3, r3, r1
 800309c:	eb44 0402 	adc.w	r4, r4, r2
 80030a0:	00e0      	lsls	r0, r4, #3
 80030a2:	6178      	str	r0, [r7, #20]
 80030a4:	6978      	ldr	r0, [r7, #20]
 80030a6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80030aa:	6178      	str	r0, [r7, #20]
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80030b4:	eb13 0801 	adds.w	r8, r3, r1
 80030b8:	eb44 0902 	adc.w	r9, r4, r2
 80030bc:	4640      	mov	r0, r8
 80030be:	4649      	mov	r1, r9
 80030c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f04f 0400 	mov.w	r4, #0
 80030c8:	00a2      	lsls	r2, r4, #2
 80030ca:	64fa      	str	r2, [r7, #76]	; 0x4c
 80030cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030ce:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80030d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80030d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030dc:	f7fd fd16 	bl	8000b0c <__aeabi_uldivmod>
 80030e0:	4603      	mov	r3, r0
 80030e2:	460c      	mov	r4, r1
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b69      	ldr	r3, [pc, #420]	; (800328c <UART_SetConfig+0x66c>)
 80030e8:	fba3 1302 	umull	r1, r3, r3, r2
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	2164      	movs	r1, #100	; 0x64
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	3332      	adds	r3, #50	; 0x32
 80030fa:	4a64      	ldr	r2, [pc, #400]	; (800328c <UART_SetConfig+0x66c>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	442b      	add	r3, r5
 8003108:	60b3      	str	r3, [r6, #8]
 800310a:	e0c1      	b.n	8003290 <UART_SetConfig+0x670>
      pclk = HAL_RCC_GetPCLK1Freq();
 800310c:	f7ff f980 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 8003110:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003114:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	65bb      	str	r3, [r7, #88]	; 0x58
 800311a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800311e:	4619      	mov	r1, r3
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	460b      	mov	r3, r1
 8003126:	4614      	mov	r4, r2
 8003128:	18db      	adds	r3, r3, r3
 800312a:	eb44 0404 	adc.w	r4, r4, r4
 800312e:	185b      	adds	r3, r3, r1
 8003130:	eb44 0402 	adc.w	r4, r4, r2
 8003134:	00e6      	lsls	r6, r4, #3
 8003136:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 800313a:	00dd      	lsls	r5, r3, #3
 800313c:	462b      	mov	r3, r5
 800313e:	4634      	mov	r4, r6
 8003140:	185d      	adds	r5, r3, r1
 8003142:	eb44 0602 	adc.w	r6, r4, r2
 8003146:	4628      	mov	r0, r5
 8003148:	4631      	mov	r1, r6
 800314a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f04f 0400 	mov.w	r4, #0
 8003152:	00a5      	lsls	r5, r4, #2
 8003154:	677d      	str	r5, [r7, #116]	; 0x74
 8003156:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 8003158:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 800315c:	677d      	str	r5, [r7, #116]	; 0x74
 800315e:	009c      	lsls	r4, r3, #2
 8003160:	673c      	str	r4, [r7, #112]	; 0x70
 8003162:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003166:	f7fd fcd1 	bl	8000b0c <__aeabi_uldivmod>
 800316a:	4603      	mov	r3, r0
 800316c:	460c      	mov	r4, r1
 800316e:	461a      	mov	r2, r3
 8003170:	4b46      	ldr	r3, [pc, #280]	; (800328c <UART_SetConfig+0x66c>)
 8003172:	fba3 1302 	umull	r1, r3, r3, r2
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	011d      	lsls	r5, r3, #4
 800317a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800317e:	4619      	mov	r1, r3
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	460b      	mov	r3, r1
 8003186:	4614      	mov	r4, r2
 8003188:	18db      	adds	r3, r3, r3
 800318a:	eb44 0404 	adc.w	r4, r4, r4
 800318e:	185b      	adds	r3, r3, r1
 8003190:	eb44 0402 	adc.w	r4, r4, r2
 8003194:	00e0      	lsls	r0, r4, #3
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	00d8      	lsls	r0, r3, #3
 80031a2:	60b8      	str	r0, [r7, #8]
 80031a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80031a8:	eb13 0801 	adds.w	r8, r3, r1
 80031ac:	eb44 0902 	adc.w	r9, r4, r2
 80031b0:	4640      	mov	r0, r8
 80031b2:	4649      	mov	r1, r9
 80031b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f04f 0400 	mov.w	r4, #0
 80031bc:	00a6      	lsls	r6, r4, #2
 80031be:	66fe      	str	r6, [r7, #108]	; 0x6c
 80031c0:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 80031c2:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80031c6:	66fe      	str	r6, [r7, #108]	; 0x6c
 80031c8:	009c      	lsls	r4, r3, #2
 80031ca:	66bc      	str	r4, [r7, #104]	; 0x68
 80031cc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80031d0:	f7fd fc9c 	bl	8000b0c <__aeabi_uldivmod>
 80031d4:	4603      	mov	r3, r0
 80031d6:	460c      	mov	r4, r1
 80031d8:	461a      	mov	r2, r3
 80031da:	4b2c      	ldr	r3, [pc, #176]	; (800328c <UART_SetConfig+0x66c>)
 80031dc:	fba3 1302 	umull	r1, r3, r3, r2
 80031e0:	095b      	lsrs	r3, r3, #5
 80031e2:	2164      	movs	r1, #100	; 0x64
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	3332      	adds	r3, #50	; 0x32
 80031ee:	4a27      	ldr	r2, [pc, #156]	; (800328c <UART_SetConfig+0x66c>)
 80031f0:	fba2 1303 	umull	r1, r3, r2, r3
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031fa:	441d      	add	r5, r3
 80031fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003200:	4619      	mov	r1, r3
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	460b      	mov	r3, r1
 8003208:	4614      	mov	r4, r2
 800320a:	18db      	adds	r3, r3, r3
 800320c:	eb44 0404 	adc.w	r4, r4, r4
 8003210:	185b      	adds	r3, r3, r1
 8003212:	eb44 0402 	adc.w	r4, r4, r2
 8003216:	00e0      	lsls	r0, r4, #3
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	00d8      	lsls	r0, r3, #3
 8003224:	6038      	str	r0, [r7, #0]
 8003226:	e897 0018 	ldmia.w	r7, {r3, r4}
 800322a:	eb13 0801 	adds.w	r8, r3, r1
 800322e:	eb44 0902 	adc.w	r9, r4, r2
 8003232:	4640      	mov	r0, r8
 8003234:	4649      	mov	r1, r9
 8003236:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f04f 0400 	mov.w	r4, #0
 800323e:	00a6      	lsls	r6, r4, #2
 8003240:	667e      	str	r6, [r7, #100]	; 0x64
 8003242:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 8003244:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8003248:	667e      	str	r6, [r7, #100]	; 0x64
 800324a:	009c      	lsls	r4, r3, #2
 800324c:	663c      	str	r4, [r7, #96]	; 0x60
 800324e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003252:	f7fd fc5b 	bl	8000b0c <__aeabi_uldivmod>
 8003256:	4603      	mov	r3, r0
 8003258:	460c      	mov	r4, r1
 800325a:	461a      	mov	r2, r3
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <UART_SetConfig+0x66c>)
 800325e:	fba3 1302 	umull	r1, r3, r3, r2
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2164      	movs	r1, #100	; 0x64
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	3332      	adds	r3, #50	; 0x32
 8003270:	4a06      	ldr	r2, [pc, #24]	; (800328c <UART_SetConfig+0x66c>)
 8003272:	fba2 1303 	umull	r1, r3, r2, r3
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	442b      	add	r3, r5
 800327e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003280:	6093      	str	r3, [r2, #8]
}
 8003282:	e005      	b.n	8003290 <UART_SetConfig+0x670>
 8003284:	40011000 	.word	0x40011000
 8003288:	40011400 	.word	0x40011400
 800328c:	51eb851f 	.word	0x51eb851f
 8003290:	bf00      	nop
 8003292:	378c      	adds	r7, #140	; 0x8c
 8003294:	46bd      	mov	sp, r7
 8003296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800329a:	bf00      	nop

0800329c <PCF2123_init>:

static uint8_t _to_bcd(uint8_t data);
static uint8_t _from_bcd(uint8_t bcd);

int PCF2123_init(pcf2123_t *pcf, spi_xfer spi_xfer, control_ce control_ce)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
	pcf->control_ce_cb = control_ce;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	605a      	str	r2, [r3, #4]
	pcf->spi_xfer_cb = spi_xfer;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	601a      	str	r2, [r3, #0]

	pcf2123_disable(pcf);
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f9a0 	bl	80035fa <pcf2123_disable>

	return PCF2123_ENONE;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <PCF2123_set_rtcc_data>:

int PCF2123_set_rtcc_data(pcf2123_t *pcf, pcf2123_time_t *time, pcf2123_date_t *date)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
	PCF2123_ASSERT(pcf);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d102      	bne.n	80032dc <PCF2123_set_rtcc_data+0x18>
 80032d6:	f7fd ff89 	bl	80011ec <PCF2123_on_assertion>
 80032da:	e7fe      	b.n	80032da <PCF2123_set_rtcc_data+0x16>
	PCF2123_ASSERT(time);
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <PCF2123_set_rtcc_data+0x24>
 80032e2:	f7fd ff83 	bl	80011ec <PCF2123_on_assertion>
 80032e6:	e7fe      	b.n	80032e6 <PCF2123_set_rtcc_data+0x22>
	PCF2123_ASSERT(date);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d102      	bne.n	80032f4 <PCF2123_set_rtcc_data+0x30>
 80032ee:	f7fd ff7d 	bl	80011ec <PCF2123_on_assertion>
 80032f2:	e7fe      	b.n	80032f2 <PCF2123_set_rtcc_data+0x2e>

	uint8_t data[] = {
		_to_bcd(time->sec), _to_bcd(time->min), _to_bcd(time->hour),
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 fb01 	bl	8003900 <_to_bcd>
 80032fe:	4603      	mov	r3, r0
	uint8_t data[] = {
 8003300:	743b      	strb	r3, [r7, #16]
		_to_bcd(time->sec), _to_bcd(time->min), _to_bcd(time->hour),
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	785b      	ldrb	r3, [r3, #1]
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fafa 	bl	8003900 <_to_bcd>
 800330c:	4603      	mov	r3, r0
	uint8_t data[] = {
 800330e:	747b      	strb	r3, [r7, #17]
		_to_bcd(time->sec), _to_bcd(time->min), _to_bcd(time->hour),
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	789b      	ldrb	r3, [r3, #2]
 8003314:	4618      	mov	r0, r3
 8003316:	f000 faf3 	bl	8003900 <_to_bcd>
 800331a:	4603      	mov	r3, r0
	uint8_t data[] = {
 800331c:	74bb      	strb	r3, [r7, #18]
		_to_bcd(date->day), _to_bcd(date->weekday), _to_bcd(date->month), _to_bcd(date->year)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f000 faec 	bl	8003900 <_to_bcd>
 8003328:	4603      	mov	r3, r0
	uint8_t data[] = {
 800332a:	74fb      	strb	r3, [r7, #19]
		_to_bcd(date->day), _to_bcd(date->weekday), _to_bcd(date->month), _to_bcd(date->year)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fae3 	bl	8003900 <_to_bcd>
 800333a:	4603      	mov	r3, r0
	uint8_t data[] = {
 800333c:	753b      	strb	r3, [r7, #20]
		_to_bcd(date->day), _to_bcd(date->weekday), _to_bcd(date->month), _to_bcd(date->year)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fada 	bl	8003900 <_to_bcd>
 800334c:	4603      	mov	r3, r0
	uint8_t data[] = {
 800334e:	757b      	strb	r3, [r7, #21]
		_to_bcd(date->day), _to_bcd(date->weekday), _to_bcd(date->month), _to_bcd(date->year)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	78db      	ldrb	r3, [r3, #3]
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fad3 	bl	8003900 <_to_bcd>
 800335a:	4603      	mov	r3, r0
	uint8_t data[] = {
 800335c:	75bb      	strb	r3, [r7, #22]
	};

	PCF2123_write_register(pcf, PCF2123_REG_SECONDS,
 800335e:	f107 0210 	add.w	r2, r7, #16
 8003362:	2307      	movs	r3, #7
 8003364:	2102      	movs	r1, #2
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f9e4 	bl	8003734 <PCF2123_write_register>
			data, sizeof data);

	return PCF2123_ENONE;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <PCF2123_get_rtcc_data>:

int PCF2123_get_rtcc_data(pcf2123_t *pcf, pcf2123_time_t *time, pcf2123_date_t *date)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b086      	sub	sp, #24
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
	PCF2123_ASSERT(pcf);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d102      	bne.n	800338e <PCF2123_get_rtcc_data+0x18>
 8003388:	f7fd ff30 	bl	80011ec <PCF2123_on_assertion>
 800338c:	e7fe      	b.n	800338c <PCF2123_get_rtcc_data+0x16>
	PCF2123_ASSERT(time);
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d102      	bne.n	800339a <PCF2123_get_rtcc_data+0x24>
 8003394:	f7fd ff2a 	bl	80011ec <PCF2123_on_assertion>
 8003398:	e7fe      	b.n	8003398 <PCF2123_get_rtcc_data+0x22>
	PCF2123_ASSERT(date);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d102      	bne.n	80033a6 <PCF2123_get_rtcc_data+0x30>
 80033a0:	f7fd ff24 	bl	80011ec <PCF2123_on_assertion>
 80033a4:	e7fe      	b.n	80033a4 <PCF2123_get_rtcc_data+0x2e>

	uint8_t clear = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	75fb      	strb	r3, [r7, #23]
	PCF2123_read_register(pcf, PCF2123_REG_SECONDS, &clear, sizeof clear);
 80033aa:	f107 0217 	add.w	r2, r7, #23
 80033ae:	2301      	movs	r3, #1
 80033b0:	2102      	movs	r1, #2
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f933 	bl	800361e <PCF2123_read_register>

	/* Clear OS flag if it is set. */
	if (PCF2123_OS_INTEGRITY_NOT_GUARANTEED & clear) {
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	b25b      	sxtb	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	da0b      	bge.n	80033d8 <PCF2123_get_rtcc_data+0x62>
		clear |= PCF2123_OS_INTEGRITY_NOT_GUARANTEED;
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	75fb      	strb	r3, [r7, #23]
		PCF2123_write_register(pcf, PCF2123_REG_SECONDS, &clear, sizeof clear);
 80033ca:	f107 0217 	add.w	r2, r7, #23
 80033ce:	2301      	movs	r3, #1
 80033d0:	2102      	movs	r1, #2
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f9ae 	bl	8003734 <PCF2123_write_register>
	}

	/* NOTE: See datasheet 8.4.8 */
	uint8_t data[7] = {0};
 80033d8:	f107 0310 	add.w	r3, r7, #16
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	f8c3 2003 	str.w	r2, [r3, #3]

	PCF2123_read_register(pcf, PCF2123_REG_SECONDS, data, sizeof data);
 80033e4:	f107 0210 	add.w	r2, r7, #16
 80033e8:	2307      	movs	r3, #7
 80033ea:	2102      	movs	r1, #2
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f916 	bl	800361e <PCF2123_read_register>

	time->sec = _from_bcd(data[0]);
 80033f2:	7c3b      	ldrb	r3, [r7, #16]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 faa7 	bl	8003948 <_from_bcd>
 80033fa:	4603      	mov	r3, r0
 80033fc:	461a      	mov	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	701a      	strb	r2, [r3, #0]
	time->min = _from_bcd(data[1]);
 8003402:	7c7b      	ldrb	r3, [r7, #17]
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fa9f 	bl	8003948 <_from_bcd>
 800340a:	4603      	mov	r3, r0
 800340c:	461a      	mov	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	705a      	strb	r2, [r3, #1]
	time->hour = _from_bcd(data[2]);
 8003412:	7cbb      	ldrb	r3, [r7, #18]
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fa97 	bl	8003948 <_from_bcd>
 800341a:	4603      	mov	r3, r0
 800341c:	461a      	mov	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	709a      	strb	r2, [r3, #2]

	date->day = _from_bcd(data[3]);
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fa8f 	bl	8003948 <_from_bcd>
 800342a:	4603      	mov	r3, r0
 800342c:	461a      	mov	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	701a      	strb	r2, [r3, #0]
	date->weekday = _from_bcd(data[4]);
 8003432:	7d3b      	ldrb	r3, [r7, #20]
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fa87 	bl	8003948 <_from_bcd>
 800343a:	4603      	mov	r3, r0
 800343c:	b25a      	sxtb	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	705a      	strb	r2, [r3, #1]
	date->month = _from_bcd(data[5]);
 8003442:	7d7b      	ldrb	r3, [r7, #21]
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fa7f 	bl	8003948 <_from_bcd>
 800344a:	4603      	mov	r3, r0
 800344c:	b25a      	sxtb	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	709a      	strb	r2, [r3, #2]
	date->year = _from_bcd(data[6]);
 8003452:	7dbb      	ldrb	r3, [r7, #22]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fa77 	bl	8003948 <_from_bcd>
 800345a:	4603      	mov	r3, r0
 800345c:	461a      	mov	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	70da      	strb	r2, [r3, #3]

	return PCF2123_ENONE;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <PCF2123_set_alarm_interrupt>:

	return PCF2123_ENONE;
}

int PCF2123_set_alarm_interrupt(pcf2123_t *pcf, pcf2123_alarm_conf_t *alarm_conf)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
	PCF2123_ASSERT(pcf);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d102      	bne.n	8003482 <PCF2123_set_alarm_interrupt+0x16>
 800347c:	f7fd feb6 	bl	80011ec <PCF2123_on_assertion>
 8003480:	e7fe      	b.n	8003480 <PCF2123_set_alarm_interrupt+0x14>
	PCF2123_ASSERT(alarm_conf);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d102      	bne.n	800348e <PCF2123_set_alarm_interrupt+0x22>
 8003488:	f7fd feb0 	bl	80011ec <PCF2123_on_assertion>
 800348c:	e7fe      	b.n	800348c <PCF2123_set_alarm_interrupt+0x20>

	uint8_t min_alarm 		= alarm_conf->alarm_enable & PCF2123_ALARM_MIN_ENABLE ? _to_bcd(alarm_conf->min) : PCF2123_ALARM_DISABLE;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d006      	beq.n	80034a8 <PCF2123_set_alarm_interrupt+0x3c>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	785b      	ldrb	r3, [r3, #1]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fa2e 	bl	8003900 <_to_bcd>
 80034a4:	4603      	mov	r3, r0
 80034a6:	e000      	b.n	80034aa <PCF2123_set_alarm_interrupt+0x3e>
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	73fb      	strb	r3, [r7, #15]
	uint8_t hour_alarm 		= alarm_conf->alarm_enable & PCF2123_ALARM_HOUR_ENABLE ? _to_bcd(alarm_conf->hour) : PCF2123_ALARM_DISABLE;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d006      	beq.n	80034c6 <PCF2123_set_alarm_interrupt+0x5a>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	789b      	ldrb	r3, [r3, #2]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fa1f 	bl	8003900 <_to_bcd>
 80034c2:	4603      	mov	r3, r0
 80034c4:	e000      	b.n	80034c8 <PCF2123_set_alarm_interrupt+0x5c>
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	73bb      	strb	r3, [r7, #14]
	uint8_t day_alarm 		= alarm_conf->alarm_enable & PCF2123_ALARM_DAY_ENABLE ? _to_bcd(alarm_conf->day) : PCF2123_ALARM_DISABLE;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d006      	beq.n	80034e4 <PCF2123_set_alarm_interrupt+0x78>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	78db      	ldrb	r3, [r3, #3]
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fa10 	bl	8003900 <_to_bcd>
 80034e0:	4603      	mov	r3, r0
 80034e2:	e000      	b.n	80034e6 <PCF2123_set_alarm_interrupt+0x7a>
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	737b      	strb	r3, [r7, #13]
	uint8_t weekday_alarm	= alarm_conf->alarm_enable & PCF2123_ALARM_WEEKDAY_ENABLE ? _to_bcd(alarm_conf->weekday) : PCF2123_ALARM_DISABLE;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <PCF2123_set_alarm_interrupt+0x9a>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 f9ff 	bl	8003900 <_to_bcd>
 8003502:	4603      	mov	r3, r0
 8003504:	e000      	b.n	8003508 <PCF2123_set_alarm_interrupt+0x9c>
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	733b      	strb	r3, [r7, #12]

	uint8_t cntl_2 = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	72fb      	strb	r3, [r7, #11]
	PCF2123_read_register(pcf, PCF2123_REG_CONTROL_2, &cntl_2, sizeof cntl_2);
 800350e:	f107 020b 	add.w	r2, r7, #11
 8003512:	2301      	movs	r3, #1
 8003514:	2101      	movs	r1, #1
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f881 	bl	800361e <PCF2123_read_register>

	/* Clear AF bit */
	if (cntl_2 & PCF2123_AF_INT_GENERATED) {
 800351c:	7afb      	ldrb	r3, [r7, #11]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <PCF2123_set_alarm_interrupt+0xd2>
		cntl_2 &= ~(PCF2123_AF_INT_GENERATED);
 8003526:	7afb      	ldrb	r3, [r7, #11]
 8003528:	f023 0308 	bic.w	r3, r3, #8
 800352c:	b2db      	uxtb	r3, r3
 800352e:	72fb      	strb	r3, [r7, #11]
		PCF2123_write_register(pcf, PCF2123_REG_CONTROL_2, &cntl_2, sizeof cntl_2);
 8003530:	f107 020b 	add.w	r2, r7, #11
 8003534:	2301      	movs	r3, #1
 8003536:	2101      	movs	r1, #1
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f8fb 	bl	8003734 <PCF2123_write_register>
	}

	PCF2123_read_register(pcf, PCF2123_REG_CONTROL_2, &cntl_2, sizeof cntl_2);
 800353e:	f107 020b 	add.w	r2, r7, #11
 8003542:	2301      	movs	r3, #1
 8003544:	2101      	movs	r1, #1
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f869 	bl	800361e <PCF2123_read_register>

	/* if AIF is not set */
	if (~(cntl_2 & PCF2123_AIF_INT_ENABLE)) {
		/* Set AIF bit in Control Register 1 */
		cntl_2 |= PCF2123_AIF_INT_ENABLE;
 800354c:	7afb      	ldrb	r3, [r7, #11]
 800354e:	f043 0302 	orr.w	r3, r3, #2
 8003552:	b2db      	uxtb	r3, r3
 8003554:	72fb      	strb	r3, [r7, #11]
		PCF2123_write_register(pcf, PCF2123_REG_CONTROL_2, &cntl_2, sizeof cntl_2);
 8003556:	f107 020b 	add.w	r2, r7, #11
 800355a:	2301      	movs	r3, #1
 800355c:	2101      	movs	r1, #1
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f8e8 	bl	8003734 <PCF2123_write_register>
	}

	PCF2123_write_register(pcf, PCF2123_REG_MINUTE_ALARM,
 8003564:	f107 020f 	add.w	r2, r7, #15
 8003568:	2301      	movs	r3, #1
 800356a:	2109      	movs	r1, #9
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f8e1 	bl	8003734 <PCF2123_write_register>
			&min_alarm, sizeof min_alarm);
	PCF2123_write_register(pcf, PCF2123_REG_HOUR_ALARM,
 8003572:	f107 020e 	add.w	r2, r7, #14
 8003576:	2301      	movs	r3, #1
 8003578:	210a      	movs	r1, #10
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f8da 	bl	8003734 <PCF2123_write_register>
			&hour_alarm, sizeof hour_alarm);
	PCF2123_write_register(pcf, PCF2123_REG_DAY_ALARM,
 8003580:	f107 020d 	add.w	r2, r7, #13
 8003584:	2301      	movs	r3, #1
 8003586:	210b      	movs	r1, #11
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f8d3 	bl	8003734 <PCF2123_write_register>
			&day_alarm, sizeof day_alarm);
	PCF2123_write_register(pcf, PCF2123_REG_WEEKDAY_ALARM,
 800358e:	f107 020c 	add.w	r2, r7, #12
 8003592:	2301      	movs	r3, #1
 8003594:	210c      	movs	r1, #12
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f8cc 	bl	8003734 <PCF2123_write_register>
			&weekday_alarm, sizeof weekday_alarm);

	return PCF2123_ENONE;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <PCF2123_sw_reset>:

	return PCF2123_ENONE;
}

int PCF2123_sw_reset(pcf2123_t *pcf)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
	PCF2123_ASSERT(pcf);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <PCF2123_sw_reset+0x14>
 80035b4:	f7fd fe1a 	bl	80011ec <PCF2123_on_assertion>
 80035b8:	e7fe      	b.n	80035b8 <PCF2123_sw_reset+0x12>

	uint8_t magic_number = PCF2123_SW_RESET_MAGIC;
 80035ba:	2358      	movs	r3, #88	; 0x58
 80035bc:	73fb      	strb	r3, [r7, #15]
	PCF2123_write_register(pcf, PCF2123_REG_CONTROL_1,
 80035be:	f107 020f 	add.w	r2, r7, #15
 80035c2:	2301      	movs	r3, #1
 80035c4:	2100      	movs	r1, #0
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f8b4 	bl	8003734 <PCF2123_write_register>
			&magic_number, sizeof magic_number);

	return PCF2123_ENONE;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <pcf2123_enable>:

void pcf2123_enable(pcf2123_t *pcf)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
	PCF2123_ASSERT(pcf);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d102      	bne.n	80035ea <pcf2123_enable+0x14>
 80035e4:	f7fd fe02 	bl	80011ec <PCF2123_on_assertion>
 80035e8:	e7fe      	b.n	80035e8 <pcf2123_enable+0x12>

	pcf->control_ce_cb(PCF2123_CE_ENABLE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2001      	movs	r0, #1
 80035f0:	4798      	blx	r3
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <pcf2123_disable>:

void pcf2123_disable(pcf2123_t *pcf)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
	PCF2123_ASSERT(pcf);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d102      	bne.n	800360e <pcf2123_disable+0x14>
 8003608:	f7fd fdf0 	bl	80011ec <PCF2123_on_assertion>
 800360c:	e7fe      	b.n	800360c <pcf2123_disable+0x12>

	pcf->control_ce_cb(PCF2123_CE_DISABLE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2000      	movs	r0, #0
 8003614:	4798      	blx	r3
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <PCF2123_read_register>:

void PCF2123_read_register(pcf2123_t *pcf, pcf2123_reg_t reg, uint8_t *data, size_t data_len)
{
 800361e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003622:	b08d      	sub	sp, #52	; 0x34
 8003624:	af00      	add	r7, sp, #0
 8003626:	6178      	str	r0, [r7, #20]
 8003628:	60fa      	str	r2, [r7, #12]
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	460b      	mov	r3, r1
 800362e:	74fb      	strb	r3, [r7, #19]
	PCF2123_ASSERT(pcf);
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d102      	bne.n	800363c <PCF2123_read_register+0x1e>
 8003636:	f7fd fdd9 	bl	80011ec <PCF2123_on_assertion>
 800363a:	e7fe      	b.n	800363a <PCF2123_read_register+0x1c>
	PCF2123_ASSERT(data);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d102      	bne.n	8003648 <PCF2123_read_register+0x2a>
 8003642:	f7fd fdd3 	bl	80011ec <PCF2123_on_assertion>
 8003646:	e7fe      	b.n	8003646 <PCF2123_read_register+0x28>
	PCF2123_ASSERT(0 < data_len);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d102      	bne.n	8003654 <PCF2123_read_register+0x36>
 800364e:	f7fd fdcd 	bl	80011ec <PCF2123_on_assertion>
 8003652:	e7fe      	b.n	8003652 <PCF2123_read_register+0x34>

	uint8_t cmd = PCF2123_READ_DATA | PCF2123_SUBADDRESS | (uint8_t) reg;
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800365a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t write_buf[data_len + 1];
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	1c59      	adds	r1, r3, #1
 8003662:	466b      	mov	r3, sp
 8003664:	461e      	mov	r6, r3
 8003666:	460b      	mov	r3, r1
 8003668:	3b01      	subs	r3, #1
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
 800366c:	460a      	mov	r2, r1
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	00d8      	lsls	r0, r3, #3
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	00d3      	lsls	r3, r2, #3
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	460a      	mov	r2, r1
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 800368c:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
 8003690:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 8003694:	1dcb      	adds	r3, r1, #7
 8003696:	08db      	lsrs	r3, r3, #3
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	ebad 0d03 	sub.w	sp, sp, r3
 800369e:	466b      	mov	r3, sp
 80036a0:	3300      	adds	r3, #0
 80036a2:	623b      	str	r3, [r7, #32]
	uint8_t read_buf[data_len + 1];
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	1c59      	adds	r1, r3, #1
 80036a8:	460b      	mov	r3, r1
 80036aa:	3b01      	subs	r3, #1
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	460a      	mov	r2, r1
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 80036b8:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80036bc:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80036c0:	460a      	mov	r2, r1
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	00dd      	lsls	r5, r3, #3
 80036c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036cc:	00d4      	lsls	r4, r2, #3
 80036ce:	1dcb      	adds	r3, r1, #7
 80036d0:	08db      	lsrs	r3, r3, #3
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	ebad 0d03 	sub.w	sp, sp, r3
 80036d8:	466b      	mov	r3, sp
 80036da:	3300      	adds	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]

	write_buf[0] = cmd;
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80036e4:	701a      	strb	r2, [r3, #0]

	pcf2123_enable(pcf);
 80036e6:	6978      	ldr	r0, [r7, #20]
 80036e8:	f7ff ff75 	bl	80035d6 <pcf2123_enable>
	pcf->spi_xfer_cb(write_buf, read_buf, data_len + 1, PCF2123_TIMEOUT_MS);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	681c      	ldr	r4, [r3, #0]
 80036f0:	6a38      	ldr	r0, [r7, #32]
 80036f2:	69b9      	ldr	r1, [r7, #24]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80036fc:	47a0      	blx	r4
	pcf2123_disable(pcf);
 80036fe:	6978      	ldr	r0, [r7, #20]
 8003700:	f7ff ff7b 	bl	80035fa <pcf2123_disable>

	for (size_t idx = 0; idx < data_len; idx++) {
 8003704:	2300      	movs	r3, #0
 8003706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003708:	e00a      	b.n	8003720 <PCF2123_read_register+0x102>
		data[idx] = read_buf[idx + 1];
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370e:	4413      	add	r3, r2
 8003710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003712:	3201      	adds	r2, #1
 8003714:	69b9      	ldr	r1, [r7, #24]
 8003716:	5c8a      	ldrb	r2, [r1, r2]
 8003718:	701a      	strb	r2, [r3, #0]
	for (size_t idx = 0; idx < data_len; idx++) {
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	3301      	adds	r3, #1
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	429a      	cmp	r2, r3
 8003726:	d3f0      	bcc.n	800370a <PCF2123_read_register+0xec>
 8003728:	46b5      	mov	sp, r6
	}
}
 800372a:	bf00      	nop
 800372c:	3734      	adds	r7, #52	; 0x34
 800372e:	46bd      	mov	sp, r7
 8003730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003734 <PCF2123_write_register>:

/* The command byte defines the address of the first register to be accessed
	 * and the read/write mode. The address counter will auto increment after every
	 * access and will rollover to zero after the last regoster is accessed. */
void PCF2123_write_register(pcf2123_t *pcf, pcf2123_reg_t reg, uint8_t *data, size_t data_len)
{
 8003734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003738:	b08d      	sub	sp, #52	; 0x34
 800373a:	af00      	add	r7, sp, #0
 800373c:	6178      	str	r0, [r7, #20]
 800373e:	60fa      	str	r2, [r7, #12]
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	460b      	mov	r3, r1
 8003744:	74fb      	strb	r3, [r7, #19]
	PCF2123_ASSERT(pcf);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d102      	bne.n	8003752 <PCF2123_write_register+0x1e>
 800374c:	f7fd fd4e 	bl	80011ec <PCF2123_on_assertion>
 8003750:	e7fe      	b.n	8003750 <PCF2123_write_register+0x1c>
	PCF2123_ASSERT(data);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d102      	bne.n	800375e <PCF2123_write_register+0x2a>
 8003758:	f7fd fd48 	bl	80011ec <PCF2123_on_assertion>
 800375c:	e7fe      	b.n	800375c <PCF2123_write_register+0x28>
	PCF2123_ASSERT(0 < data_len);
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d102      	bne.n	800376a <PCF2123_write_register+0x36>
 8003764:	f7fd fd42 	bl	80011ec <PCF2123_on_assertion>
 8003768:	e7fe      	b.n	8003768 <PCF2123_write_register+0x34>

	uint8_t cmd = PCF2123_WRITE_DATA | PCF2123_SUBADDRESS | (uint8_t) reg;
 800376a:	7cfb      	ldrb	r3, [r7, #19]
 800376c:	f043 0310 	orr.w	r3, r3, #16
 8003770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t write_buf[data_len + 1];
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	1c59      	adds	r1, r3, #1
 8003778:	466b      	mov	r3, sp
 800377a:	461e      	mov	r6, r3
 800377c:	460b      	mov	r3, r1
 800377e:	3b01      	subs	r3, #1
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
 8003782:	460a      	mov	r2, r1
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	00d8      	lsls	r0, r3, #3
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	ea40 7052 	orr.w	r0, r0, r2, lsr #29
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	00d3      	lsls	r3, r2, #3
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	460a      	mov	r2, r1
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 80037a2:	ea4b 7b52 	orr.w	fp, fp, r2, lsr #29
 80037a6:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 80037aa:	1dcb      	adds	r3, r1, #7
 80037ac:	08db      	lsrs	r3, r3, #3
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	ebad 0d03 	sub.w	sp, sp, r3
 80037b4:	466b      	mov	r3, sp
 80037b6:	3300      	adds	r3, #0
 80037b8:	623b      	str	r3, [r7, #32]
	uint8_t read_buf[data_len + 1];
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	1c59      	adds	r1, r3, #1
 80037be:	460b      	mov	r3, r1
 80037c0:	3b01      	subs	r3, #1
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	460a      	mov	r2, r1
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 80037ce:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80037d2:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80037d6:	460a      	mov	r2, r1
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	00dd      	lsls	r5, r3, #3
 80037de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037e2:	00d4      	lsls	r4, r2, #3
 80037e4:	1dcb      	adds	r3, r1, #7
 80037e6:	08db      	lsrs	r3, r3, #3
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	ebad 0d03 	sub.w	sp, sp, r3
 80037ee:	466b      	mov	r3, sp
 80037f0:	3300      	adds	r3, #0
 80037f2:	61bb      	str	r3, [r7, #24]

	write_buf[0] = cmd;
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80037fa:	701a      	strb	r2, [r3, #0]

	for (size_t idx = 1; idx < (data_len + 1); idx++) {
 80037fc:	2301      	movs	r3, #1
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003800:	e00c      	b.n	800381c <PCF2123_write_register+0xe8>
			write_buf[idx] = data[idx - 1];
 8003802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003804:	3b01      	subs	r3, #1
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4413      	add	r3, r2
 800380a:	7819      	ldrb	r1, [r3, #0]
 800380c:	6a3a      	ldr	r2, [r7, #32]
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	4413      	add	r3, r2
 8003812:	460a      	mov	r2, r1
 8003814:	701a      	strb	r2, [r3, #0]
	for (size_t idx = 1; idx < (data_len + 1); idx++) {
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	3301      	adds	r3, #1
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003822:	429a      	cmp	r2, r3
 8003824:	d8ed      	bhi.n	8003802 <PCF2123_write_register+0xce>
	}

	pcf2123_enable(pcf);
 8003826:	6978      	ldr	r0, [r7, #20]
 8003828:	f7ff fed5 	bl	80035d6 <pcf2123_enable>
	pcf->spi_xfer_cb(write_buf, read_buf, data_len + 1, PCF2123_TIMEOUT_MS);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	681c      	ldr	r4, [r3, #0]
 8003830:	6a38      	ldr	r0, [r7, #32]
 8003832:	69b9      	ldr	r1, [r7, #24]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800383c:	47a0      	blx	r4
	pcf2123_disable(pcf);
 800383e:	6978      	ldr	r0, [r7, #20]
 8003840:	f7ff fedb 	bl	80035fa <pcf2123_disable>
 8003844:	46b5      	mov	sp, r6
}
 8003846:	bf00      	nop
 8003848:	3734      	adds	r7, #52	; 0x34
 800384a:	46bd      	mov	sp, r7
 800384c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003850 <PCF2123_clear_af>:

	return PCF2123_AF_INT_GENERATED & control_2;
}

void PCF2123_clear_af(pcf2123_t *pcf)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	PCF2123_ASSERT(pcf);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d102      	bne.n	8003864 <PCF2123_clear_af+0x14>
 800385e:	f7fd fcc5 	bl	80011ec <PCF2123_on_assertion>
 8003862:	e7fe      	b.n	8003862 <PCF2123_clear_af+0x12>

	uint8_t control_2;
	PCF2123_read_register(pcf, PCF2123_REG_CONTROL_2,
 8003864:	f107 020f 	add.w	r2, r7, #15
 8003868:	2301      	movs	r3, #1
 800386a:	2101      	movs	r1, #1
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff fed6 	bl	800361e <PCF2123_read_register>
			&control_2, sizeof control_2);

	control_2 &= ~(PCF2123_AF_INT_GENERATED);
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	f023 0308 	bic.w	r3, r3, #8
 8003878:	b2db      	uxtb	r3, r3
 800387a:	73fb      	strb	r3, [r7, #15]

	PCF2123_write_register(pcf, PCF2123_REG_CONTROL_2,
 800387c:	f107 020f 	add.w	r2, r7, #15
 8003880:	2301      	movs	r3, #1
 8003882:	2101      	movs	r1, #1
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff ff55 	bl	8003734 <PCF2123_write_register>
			&control_2, sizeof control_2);
}
 800388a:	bf00      	nop
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <PCF2123_clear_tf>:

	return PCF2123_TF_INTERRUPT_GENERTED & control_2;
}

void PCF2123_clear_tf(pcf2123_t *pcf)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
	PCF2123_ASSERT(pcf);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d102      	bne.n	80038a6 <PCF2123_clear_tf+0x14>
 80038a0:	f7fd fca4 	bl	80011ec <PCF2123_on_assertion>
 80038a4:	e7fe      	b.n	80038a4 <PCF2123_clear_tf+0x12>

	uint8_t control_2;
	PCF2123_read_register(pcf, PCF2123_REG_CONTROL_2,
 80038a6:	f107 020f 	add.w	r2, r7, #15
 80038aa:	2301      	movs	r3, #1
 80038ac:	2101      	movs	r1, #1
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff feb5 	bl	800361e <PCF2123_read_register>
			&control_2, sizeof control_2);

	control_2 &= ~(PCF2123_TF_INTERRUPT_GENERTED);
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	f023 0304 	bic.w	r3, r3, #4
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	73fb      	strb	r3, [r7, #15]

	PCF2123_write_register(pcf, PCF2123_REG_CONTROL_2,
 80038be:	f107 020f 	add.w	r2, r7, #15
 80038c2:	2301      	movs	r3, #1
 80038c4:	2101      	movs	r1, #1
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff ff34 	bl	8003734 <PCF2123_write_register>
			&control_2, sizeof control_2);
}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <PCF2123_get_interrupt_flags>:

uint8_t PCF2123_get_interrupt_flags(pcf2123_t *pcf)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	PCF2123_ASSERT(pcf);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d102      	bne.n	80038e8 <PCF2123_get_interrupt_flags+0x14>
 80038e2:	f7fd fc83 	bl	80011ec <PCF2123_on_assertion>
 80038e6:	e7fe      	b.n	80038e6 <PCF2123_get_interrupt_flags+0x12>

	uint8_t control_2;
	PCF2123_read_register(pcf, PCF2123_REG_CONTROL_2,
 80038e8:	f107 020f 	add.w	r2, r7, #15
 80038ec:	2301      	movs	r3, #1
 80038ee:	2101      	movs	r1, #1
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff fe94 	bl	800361e <PCF2123_read_register>
			&control_2, sizeof control_2);

	return control_2;
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <_to_bcd>:
			&control_2, sizeof control_2);
}

/* Source: http://www.mbeddedc.com/2017/03/decimal-to-binary-coded-decimal-bcd.html */
static uint8_t _to_bcd(uint8_t data)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	71fb      	strb	r3, [r7, #7]
	return ((data / 10) << 4) | (data % 10);
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	4a0d      	ldr	r2, [pc, #52]	; (8003944 <_to_bcd+0x44>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	08db      	lsrs	r3, r3, #3
 8003914:	b2db      	uxtb	r3, r3
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	b258      	sxtb	r0, r3
 800391a:	79fa      	ldrb	r2, [r7, #7]
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <_to_bcd+0x44>)
 800391e:	fba3 1302 	umull	r1, r3, r3, r2
 8003922:	08d9      	lsrs	r1, r3, #3
 8003924:	460b      	mov	r3, r1
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	b25b      	sxtb	r3, r3
 8003932:	4303      	orrs	r3, r0
 8003934:	b25b      	sxtb	r3, r3
 8003936:	b2db      	uxtb	r3, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	cccccccd 	.word	0xcccccccd

08003948 <_from_bcd>:

/* Source: http://www.mbeddedc.com/2017/03/decimal-to-binary-coded-decimal-bcd.html */
static uint8_t _from_bcd(uint8_t bcd)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
	return ((bcd >> 4) * 10) + (bcd & 0x0F);
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	b2db      	uxtb	r3, r3
 8003958:	461a      	mov	r2, r3
 800395a:	0092      	lsls	r2, r2, #2
 800395c:	4413      	add	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	b2da      	uxtb	r2, r3
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	b2db      	uxtb	r3, r3
 800396a:	4413      	add	r3, r2
 800396c:	b2db      	uxtb	r3, r3
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
	...

0800397c <_putchar>:
#include "usart.h"

static UART_HandleTypeDef *DBG_UART_PORT = NULL;

void _putchar(char character)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(DBG_UART_PORT, (uint8_t *) &character, 1, 250);
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <_putchar+0x20>)
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	1df9      	adds	r1, r7, #7
 800398c:	23fa      	movs	r3, #250	; 0xfa
 800398e:	2201      	movs	r2, #1
 8003990:	f7ff f863 	bl	8002a5a <HAL_UART_Transmit>
}
 8003994:	bf00      	nop
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20000028 	.word	0x20000028

080039a0 <DBG_init>:

void DBG_init(void *handle)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
    DBG_UART_PORT = (UART_HandleTypeDef *) handle;
 80039a8:	4a04      	ldr	r2, [pc, #16]	; (80039bc <DBG_init+0x1c>)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6013      	str	r3, [r2, #0]
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	20000028 	.word	0x20000028

080039c0 <DBG_println>:
	uint8_t clear_page = 0x0C;
	HAL_UART_Transmit(DBG_UART_PORT, &clear_page, 1, 250);
}

void DBG_println(const char *fmt, ...)
{
 80039c0:	b40f      	push	{r0, r1, r2, r3}
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, fmt);
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	607b      	str	r3, [r7, #4]
	vprintf(fmt, args);
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	6938      	ldr	r0, [r7, #16]
 80039d2:	f001 fc33 	bl	800523c <vprintf_>
	va_end(args);

	HAL_UART_Transmit(DBG_UART_PORT, (uint8_t *) "\r\n", strlen("\r\n"), 250);
 80039d6:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <DBG_println+0x34>)
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	23fa      	movs	r3, #250	; 0xfa
 80039dc:	2202      	movs	r2, #2
 80039de:	4906      	ldr	r1, [pc, #24]	; (80039f8 <DBG_println+0x38>)
 80039e0:	f7ff f83b 	bl	8002a5a <HAL_UART_Transmit>
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039ee:	b004      	add	sp, #16
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20000028 	.word	0x20000028
 80039f8:	080053cc 	.word	0x080053cc

080039fc <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	4603      	mov	r3, r0
 8003a0a:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	4603      	mov	r3, r0
 8003a26:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <_out_char+0x1e>
    _putchar(character);
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ffa3 	bl	800397c <_putchar>
  }
}
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b085      	sub	sp, #20
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	e002      	b.n	8003a54 <_strnlen_s+0x16>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3301      	adds	r3, #1
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <_strnlen_s+0x28>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	1e5a      	subs	r2, r3, #1
 8003a60:	603a      	str	r2, [r7, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f3      	bne.n	8003a4e <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	1ad3      	subs	r3, r2, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	2b2f      	cmp	r3, #47	; 0x2f
 8003a86:	d904      	bls.n	8003a92 <_is_digit+0x1a>
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	2b39      	cmp	r3, #57	; 0x39
 8003a8c:	d801      	bhi.n	8003a92 <_is_digit+0x1a>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <_is_digit+0x1c>
 8003a92:	2300      	movs	r3, #0
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	b2db      	uxtb	r3, r3
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003ab2:	e00e      	b.n	8003ad2 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	4618      	mov	r0, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	1c59      	adds	r1, r3, #1
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6011      	str	r1, [r2, #0]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	4403      	add	r3, r0
 8003ace:	3b30      	subs	r3, #48	; 0x30
 8003ad0:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff ffcd 	bl	8003a78 <_is_digit>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e7      	bne.n	8003ab4 <_atoi+0xe>
  }
  return i;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8003aee:	b590      	push	{r4, r7, lr}
 8003af0:	b087      	sub	sp, #28
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d125      	bne.n	8003b56 <_out_rev+0x68>
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d120      	bne.n	8003b56 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8003b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	e00a      	b.n	8003b30 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	1c53      	adds	r3, r2, #1
 8003b1e:	607b      	str	r3, [r7, #4]
 8003b20:	68fc      	ldr	r4, [r7, #12]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	2020      	movs	r0, #32
 8003b28:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d3f0      	bcc.n	8003b1a <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8003b38:	e00d      	b.n	8003b56 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8003b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b44:	4413      	add	r3, r2
 8003b46:	7818      	ldrb	r0, [r3, #0]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	1c53      	adds	r3, r2, #1
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	68fc      	ldr	r4, [r7, #12]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68b9      	ldr	r1, [r7, #8]
 8003b54:	47a0      	blx	r4
  while (len) {
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1ee      	bne.n	8003b3a <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8003b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00e      	beq.n	8003b84 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8003b66:	e007      	b.n	8003b78 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	1c53      	adds	r3, r2, #1
 8003b6c:	607b      	str	r3, [r7, #4]
 8003b6e:	68fc      	ldr	r4, [r7, #12]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	2020      	movs	r0, #32
 8003b76:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad2      	subs	r2, r2, r3
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d3f1      	bcc.n	8003b68 <_out_rev+0x7a>
    }
  }

  return idx;
 8003b84:	687b      	ldr	r3, [r7, #4]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd90      	pop	{r4, r7, pc}

08003b8e <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b088      	sub	sp, #32
 8003b92:	af04      	add	r7, sp, #16
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d136      	bne.n	8003c14 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d018      	beq.n	8003bde <_ntoa_format+0x50>
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d013      	beq.n	8003bde <_ntoa_format+0x50>
 8003bb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d104      	bne.n	8003bc8 <_ntoa_format+0x3a>
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <_ntoa_format+0x50>
      width--;
 8003bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003bce:	e006      	b.n	8003bde <_ntoa_format+0x50>
      buf[len++] = '0';
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	61fa      	str	r2, [r7, #28]
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4413      	add	r3, r2
 8003bda:	2230      	movs	r2, #48	; 0x30
 8003bdc:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d20a      	bcs.n	8003bfc <_ntoa_format+0x6e>
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	2b1f      	cmp	r3, #31
 8003bea:	d9f1      	bls.n	8003bd0 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003bec:	e006      	b.n	8003bfc <_ntoa_format+0x6e>
      buf[len++] = '0';
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	61fa      	str	r2, [r7, #28]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	2230      	movs	r2, #48	; 0x30
 8003bfa:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d006      	beq.n	8003c14 <_ntoa_format+0x86>
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d202      	bcs.n	8003c14 <_ntoa_format+0x86>
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	2b1f      	cmp	r3, #31
 8003c12:	d9ec      	bls.n	8003bee <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d058      	beq.n	8003cd0 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d116      	bne.n	8003c56 <_ntoa_format+0xc8>
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d013      	beq.n	8003c56 <_ntoa_format+0xc8>
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d003      	beq.n	8003c3e <_ntoa_format+0xb0>
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d10b      	bne.n	8003c56 <_ntoa_format+0xc8>
      len--;
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <_ntoa_format+0xc8>
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	2b10      	cmp	r3, #16
 8003c4e:	d102      	bne.n	8003c56 <_ntoa_format+0xc8>
        len--;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d10f      	bne.n	8003c7c <_ntoa_format+0xee>
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10a      	bne.n	8003c7c <_ntoa_format+0xee>
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	2b1f      	cmp	r3, #31
 8003c6a:	d807      	bhi.n	8003c7c <_ntoa_format+0xee>
      buf[len++] = 'x';
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	61fa      	str	r2, [r7, #28]
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4413      	add	r3, r2
 8003c76:	2278      	movs	r2, #120	; 0x78
 8003c78:	701a      	strb	r2, [r3, #0]
 8003c7a:	e01f      	b.n	8003cbc <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	2b10      	cmp	r3, #16
 8003c80:	d10f      	bne.n	8003ca2 <_ntoa_format+0x114>
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	f003 0320 	and.w	r3, r3, #32
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <_ntoa_format+0x114>
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	2b1f      	cmp	r3, #31
 8003c90:	d807      	bhi.n	8003ca2 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	61fa      	str	r2, [r7, #28]
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	2258      	movs	r2, #88	; 0x58
 8003c9e:	701a      	strb	r2, [r3, #0]
 8003ca0:	e00c      	b.n	8003cbc <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d109      	bne.n	8003cbc <_ntoa_format+0x12e>
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	2b1f      	cmp	r3, #31
 8003cac:	d806      	bhi.n	8003cbc <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	61fa      	str	r2, [r7, #28]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	2262      	movs	r2, #98	; 0x62
 8003cba:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	2b1f      	cmp	r3, #31
 8003cc0:	d806      	bhi.n	8003cd0 <_ntoa_format+0x142>
      buf[len++] = '0';
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	61fa      	str	r2, [r7, #28]
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4413      	add	r3, r2
 8003ccc:	2230      	movs	r2, #48	; 0x30
 8003cce:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	2b1f      	cmp	r3, #31
 8003cd4:	d824      	bhi.n	8003d20 <_ntoa_format+0x192>
    if (negative) {
 8003cd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <_ntoa_format+0x160>
      buf[len++] = '-';
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	61fa      	str	r2, [r7, #28]
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	222d      	movs	r2, #45	; 0x2d
 8003cea:	701a      	strb	r2, [r3, #0]
 8003cec:	e018      	b.n	8003d20 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	61fa      	str	r2, [r7, #28]
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4413      	add	r3, r2
 8003d02:	222b      	movs	r2, #43	; 0x2b
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	e00b      	b.n	8003d20 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d006      	beq.n	8003d20 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	61fa      	str	r2, [r7, #28]
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	9303      	str	r3, [sp, #12]
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	9302      	str	r3, [sp, #8]
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	9301      	str	r3, [sp, #4]
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f7ff fed9 	bl	8003aee <_out_rev>
 8003d3c:	4603      	mov	r3, r0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b096      	sub	sp, #88	; 0x58
 8003d4a:	af08      	add	r7, sp, #32
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	607a      	str	r2, [r7, #4]
 8003d52:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d103      	bne.n	8003d66 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8003d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d60:	f023 0310 	bic.w	r3, r3, #16
 8003d64:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <_ntoa_long+0x30>
 8003d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d033      	beq.n	8003dde <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8003d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003d80:	fb01 f202 	mul.w	r2, r1, r2
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	637a      	str	r2, [r7, #52]	; 0x34
 8003d90:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003d94:	2a09      	cmp	r2, #9
 8003d96:	d804      	bhi.n	8003da2 <_ntoa_long+0x5c>
 8003d98:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003d9c:	3230      	adds	r2, #48	; 0x30
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	e00d      	b.n	8003dbe <_ntoa_long+0x78>
 8003da2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003da4:	f002 0220 	and.w	r2, r2, #32
 8003da8:	2a00      	cmp	r2, #0
 8003daa:	d001      	beq.n	8003db0 <_ntoa_long+0x6a>
 8003dac:	2141      	movs	r1, #65	; 0x41
 8003dae:	e000      	b.n	8003db2 <_ntoa_long+0x6c>
 8003db0:	2161      	movs	r1, #97	; 0x61
 8003db2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003db6:	440a      	add	r2, r1
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	3a0a      	subs	r2, #10
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003dc2:	440b      	add	r3, r1
 8003dc4:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8003dc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <_ntoa_long+0x98>
 8003dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dda:	2b1f      	cmp	r3, #31
 8003ddc:	d9cb      	bls.n	8003d76 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003de0:	9306      	str	r3, [sp, #24]
 8003de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003de4:	9305      	str	r3, [sp, #20]
 8003de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de8:	9304      	str	r3, [sp, #16]
 8003dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dec:	9303      	str	r3, [sp, #12]
 8003dee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003df2:	9302      	str	r3, [sp, #8]
 8003df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	f107 0310 	add.w	r3, r7, #16
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f7ff fec2 	bl	8003b8e <_ntoa_format>
 8003e0a:	4603      	mov	r3, r0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3738      	adds	r7, #56	; 0x38
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003e14:	b590      	push	{r4, r7, lr}
 8003e16:	b097      	sub	sp, #92	; 0x5c
 8003e18:	af08      	add	r7, sp, #32
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003e26:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8003e2a:	4323      	orrs	r3, r4
 8003e2c:	d103      	bne.n	8003e36 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8003e2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e30:	f023 0310 	bic.w	r3, r3, #16
 8003e34:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003e36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <_ntoa_long_long+0x34>
 8003e40:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8003e44:	4323      	orrs	r3, r4
 8003e46:	d039      	beq.n	8003ebc <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 8003e48:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003e4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e50:	f7fc fe5c 	bl	8000b0c <__aeabi_uldivmod>
 8003e54:	461c      	mov	r4, r3
 8003e56:	4613      	mov	r3, r2
 8003e58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	637a      	str	r2, [r7, #52]	; 0x34
 8003e62:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003e66:	2a09      	cmp	r2, #9
 8003e68:	d804      	bhi.n	8003e74 <_ntoa_long_long+0x60>
 8003e6a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003e6e:	3230      	adds	r2, #48	; 0x30
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	e00d      	b.n	8003e90 <_ntoa_long_long+0x7c>
 8003e74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e76:	f002 0220 	and.w	r2, r2, #32
 8003e7a:	2a00      	cmp	r2, #0
 8003e7c:	d001      	beq.n	8003e82 <_ntoa_long_long+0x6e>
 8003e7e:	2141      	movs	r1, #65	; 0x41
 8003e80:	e000      	b.n	8003e84 <_ntoa_long_long+0x70>
 8003e82:	2161      	movs	r1, #97	; 0x61
 8003e84:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003e88:	440a      	add	r2, r1
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	3a0a      	subs	r2, #10
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003e94:	440b      	add	r3, r1
 8003e96:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8003e9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003ea2:	f7fc fe33 	bl	8000b0c <__aeabi_uldivmod>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003eae:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8003eb2:	4323      	orrs	r3, r4
 8003eb4:	d002      	beq.n	8003ebc <_ntoa_long_long+0xa8>
 8003eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb8:	2b1f      	cmp	r3, #31
 8003eba:	d9c5      	bls.n	8003e48 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003ebc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ebe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ec0:	9206      	str	r2, [sp, #24]
 8003ec2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ec4:	9205      	str	r2, [sp, #20]
 8003ec6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ec8:	9204      	str	r2, [sp, #16]
 8003eca:	9303      	str	r3, [sp, #12]
 8003ecc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003ed0:	9302      	str	r3, [sp, #8]
 8003ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed4:	9301      	str	r3, [sp, #4]
 8003ed6:	f107 0310 	add.w	r3, r7, #16
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f7ff fe53 	bl	8003b8e <_ntoa_format>
 8003ee8:	4603      	mov	r3, r0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	373c      	adds	r7, #60	; 0x3c
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd90      	pop	{r4, r7, pc}
 8003ef2:	0000      	movs	r0, r0
 8003ef4:	0000      	movs	r0, r0
	...

08003ef8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003ef8:	b590      	push	{r4, r7, lr}
 8003efa:	b09d      	sub	sp, #116	; 0x74
 8003efc:	af04      	add	r7, sp, #16
 8003efe:	6178      	str	r0, [r7, #20]
 8003f00:	6139      	str	r1, [r7, #16]
 8003f02:	60fa      	str	r2, [r7, #12]
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	f04f 0400 	mov.w	r4, #0
 8003f16:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8003f1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f22:	f7fc fd79 	bl	8000a18 <__aeabi_dcmpeq>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10f      	bne.n	8003f4c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8003f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f2e:	9303      	str	r3, [sp, #12]
 8003f30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f32:	9302      	str	r3, [sp, #8]
 8003f34:	2303      	movs	r3, #3
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	4bad      	ldr	r3, [pc, #692]	; (80041f0 <_ftoa+0x2f8>)
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	6939      	ldr	r1, [r7, #16]
 8003f42:	6978      	ldr	r0, [r7, #20]
 8003f44:	f7ff fdd3 	bl	8003aee <_out_rev>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	e233      	b.n	80043b4 <_ftoa+0x4bc>
  if (value < -DBL_MAX)
 8003f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f50:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003f54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f58:	f7fc fd68 	bl	8000a2c <__aeabi_dcmplt>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00f      	beq.n	8003f82 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8003f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f64:	9303      	str	r3, [sp, #12]
 8003f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f68:	9302      	str	r3, [sp, #8]
 8003f6a:	2304      	movs	r3, #4
 8003f6c:	9301      	str	r3, [sp, #4]
 8003f6e:	4ba1      	ldr	r3, [pc, #644]	; (80041f4 <_ftoa+0x2fc>)
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	6939      	ldr	r1, [r7, #16]
 8003f78:	6978      	ldr	r0, [r7, #20]
 8003f7a:	f7ff fdb8 	bl	8003aee <_out_rev>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	e218      	b.n	80043b4 <_ftoa+0x4bc>
  if (value > DBL_MAX)
 8003f82:	f04f 32ff 	mov.w	r2, #4294967295
 8003f86:	4b9c      	ldr	r3, [pc, #624]	; (80041f8 <_ftoa+0x300>)
 8003f88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f8c:	f7fc fd6c 	bl	8000a68 <__aeabi_dcmpgt>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d01d      	beq.n	8003fd2 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003f96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <_ftoa+0xac>
 8003fa0:	4b96      	ldr	r3, [pc, #600]	; (80041fc <_ftoa+0x304>)
 8003fa2:	e000      	b.n	8003fa6 <_ftoa+0xae>
 8003fa4:	4b96      	ldr	r3, [pc, #600]	; (8004200 <_ftoa+0x308>)
 8003fa6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003fa8:	f002 0204 	and.w	r2, r2, #4
 8003fac:	2a00      	cmp	r2, #0
 8003fae:	d001      	beq.n	8003fb4 <_ftoa+0xbc>
 8003fb0:	2204      	movs	r2, #4
 8003fb2:	e000      	b.n	8003fb6 <_ftoa+0xbe>
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003fb8:	9103      	str	r1, [sp, #12]
 8003fba:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003fbc:	9102      	str	r1, [sp, #8]
 8003fbe:	9201      	str	r2, [sp, #4]
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	6939      	ldr	r1, [r7, #16]
 8003fc8:	6978      	ldr	r0, [r7, #20]
 8003fca:	f7ff fd90 	bl	8003aee <_out_rev>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	e1f0      	b.n	80043b4 <_ftoa+0x4bc>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8003fd2:	a383      	add	r3, pc, #524	; (adr r3, 80041e0 <_ftoa+0x2e8>)
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fdc:	f7fc fd44 	bl	8000a68 <__aeabi_dcmpgt>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <_ftoa+0x102>
 8003fe6:	a380      	add	r3, pc, #512	; (adr r3, 80041e8 <_ftoa+0x2f0>)
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ff0:	f7fc fd1c 	bl	8000a2c <__aeabi_dcmplt>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00f      	beq.n	800401a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003ffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ffc:	9302      	str	r3, [sp, #8]
 8003ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004000:	9301      	str	r3, [sp, #4]
 8004002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	ed97 0b00 	vldr	d0, [r7]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	6939      	ldr	r1, [r7, #16]
 8004010:	6978      	ldr	r0, [r7, #20]
 8004012:	f000 f9d9 	bl	80043c8 <_etoa>
 8004016:	4603      	mov	r3, r0
 8004018:	e1cc      	b.n	80043b4 <_ftoa+0x4bc>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800401a:	2300      	movs	r3, #0
 800401c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	e9d7 0100 	ldrd	r0, r1, [r7]
 800402c:	f7fc fcfe 	bl	8000a2c <__aeabi_dcmplt>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00e      	beq.n	8004054 <_ftoa+0x15c>
    negative = true;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800403c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004040:	f04f 0000 	mov.w	r0, #0
 8004044:	f04f 0100 	mov.w	r1, #0
 8004048:	f7fc f8ca 	bl	80001e0 <__aeabi_dsub>
 800404c:	4603      	mov	r3, r0
 800404e:	460c      	mov	r4, r1
 8004050:	e887 0018 	stmia.w	r7, {r3, r4}
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8004054:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10e      	bne.n	800407c <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800405e:	2306      	movs	r3, #6
 8004060:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8004062:	e00b      	b.n	800407c <_ftoa+0x184>
    buf[len++] = '0';
 8004064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	65fa      	str	r2, [r7, #92]	; 0x5c
 800406a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800406e:	4413      	add	r3, r2
 8004070:	2230      	movs	r2, #48	; 0x30
 8004072:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8004076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004078:	3b01      	subs	r3, #1
 800407a:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800407c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800407e:	2b1f      	cmp	r3, #31
 8004080:	d802      	bhi.n	8004088 <_ftoa+0x190>
 8004082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004084:	2b09      	cmp	r3, #9
 8004086:	d8ed      	bhi.n	8004064 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8004088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800408c:	f7fc fcf6 	bl	8000a7c <__aeabi_d2iz>
 8004090:	4603      	mov	r3, r0
 8004092:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8004094:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004096:	f7fc f9f1 	bl	800047c <__aeabi_i2d>
 800409a:	4603      	mov	r3, r0
 800409c:	460c      	mov	r4, r1
 800409e:	461a      	mov	r2, r3
 80040a0:	4623      	mov	r3, r4
 80040a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040a6:	f7fc f89b 	bl	80001e0 <__aeabi_dsub>
 80040aa:	4603      	mov	r3, r0
 80040ac:	460c      	mov	r4, r1
 80040ae:	4618      	mov	r0, r3
 80040b0:	4621      	mov	r1, r4
 80040b2:	4a54      	ldr	r2, [pc, #336]	; (8004204 <_ftoa+0x30c>)
 80040b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4413      	add	r3, r2
 80040ba:	cb18      	ldmia	r3, {r3, r4}
 80040bc:	461a      	mov	r2, r3
 80040be:	4623      	mov	r3, r4
 80040c0:	f7fc fa42 	bl	8000548 <__aeabi_dmul>
 80040c4:	4603      	mov	r3, r0
 80040c6:	460c      	mov	r4, r1
 80040c8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 80040cc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80040d0:	f7fc fcfc 	bl	8000acc <__aeabi_d2uiz>
 80040d4:	4603      	mov	r3, r0
 80040d6:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 80040d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80040da:	f7fc f9bf 	bl	800045c <__aeabi_ui2d>
 80040de:	4603      	mov	r3, r0
 80040e0:	460c      	mov	r4, r1
 80040e2:	461a      	mov	r2, r3
 80040e4:	4623      	mov	r3, r4
 80040e6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80040ea:	f7fc f879 	bl	80001e0 <__aeabi_dsub>
 80040ee:	4603      	mov	r3, r0
 80040f0:	460c      	mov	r4, r1
 80040f2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  if (diff > 0.5) {
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	4b43      	ldr	r3, [pc, #268]	; (8004208 <_ftoa+0x310>)
 80040fc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004100:	f7fc fcb2 	bl	8000a68 <__aeabi_dcmpgt>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d017      	beq.n	800413a <_ftoa+0x242>
    ++frac;
 800410a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800410c:	3301      	adds	r3, #1
 800410e:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8004110:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004112:	f7fc f9a3 	bl	800045c <__aeabi_ui2d>
 8004116:	4a3b      	ldr	r2, [pc, #236]	; (8004204 <_ftoa+0x30c>)
 8004118:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4413      	add	r3, r2
 800411e:	cb18      	ldmia	r3, {r3, r4}
 8004120:	461a      	mov	r2, r3
 8004122:	4623      	mov	r3, r4
 8004124:	f7fc fc96 	bl	8000a54 <__aeabi_dcmpge>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d01a      	beq.n	8004164 <_ftoa+0x26c>
      frac = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8004132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004134:	3301      	adds	r3, #1
 8004136:	657b      	str	r3, [r7, #84]	; 0x54
 8004138:	e014      	b.n	8004164 <_ftoa+0x26c>
    }
  }
  else if (diff < 0.5) {
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	4b32      	ldr	r3, [pc, #200]	; (8004208 <_ftoa+0x310>)
 8004140:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004144:	f7fc fc72 	bl	8000a2c <__aeabi_dcmplt>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10a      	bne.n	8004164 <_ftoa+0x26c>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800414e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004150:	2b00      	cmp	r3, #0
 8004152:	d004      	beq.n	800415e <_ftoa+0x266>
 8004154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <_ftoa+0x26c>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800415e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004160:	3301      	adds	r3, #1
 8004162:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8004164:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004166:	2b00      	cmp	r3, #0
 8004168:	d136      	bne.n	80041d8 <_ftoa+0x2e0>
    diff = value - (double)whole;
 800416a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800416c:	f7fc f986 	bl	800047c <__aeabi_i2d>
 8004170:	4603      	mov	r3, r0
 8004172:	460c      	mov	r4, r1
 8004174:	461a      	mov	r2, r3
 8004176:	4623      	mov	r3, r4
 8004178:	e9d7 0100 	ldrd	r0, r1, [r7]
 800417c:	f7fc f830 	bl	80001e0 <__aeabi_dsub>
 8004180:	4603      	mov	r3, r0
 8004182:	460c      	mov	r4, r1
 8004184:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8004188:	2301      	movs	r3, #1
 800418a:	461c      	mov	r4, r3
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <_ftoa+0x310>)
 8004192:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004196:	f7fc fc49 	bl	8000a2c <__aeabi_dcmplt>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <_ftoa+0x2ac>
 80041a0:	2300      	movs	r3, #0
 80041a2:	461c      	mov	r4, r3
 80041a4:	b2e3      	uxtb	r3, r4
 80041a6:	f083 0301 	eor.w	r3, r3, #1
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d109      	bne.n	80041c4 <_ftoa+0x2cc>
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	4b14      	ldr	r3, [pc, #80]	; (8004208 <_ftoa+0x310>)
 80041b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80041ba:	f7fc fc55 	bl	8000a68 <__aeabi_dcmpgt>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d067      	beq.n	8004294 <_ftoa+0x39c>
 80041c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8085 	beq.w	80042da <_ftoa+0x3e2>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80041d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d2:	3301      	adds	r3, #1
 80041d4:	657b      	str	r3, [r7, #84]	; 0x54
 80041d6:	e080      	b.n	80042da <_ftoa+0x3e2>
    }
  }
  else {
    unsigned int count = prec;
 80041d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041da:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80041dc:	e037      	b.n	800424e <_ftoa+0x356>
 80041de:	bf00      	nop
 80041e0:	00000000 	.word	0x00000000
 80041e4:	41cdcd65 	.word	0x41cdcd65
 80041e8:	00000000 	.word	0x00000000
 80041ec:	c1cdcd65 	.word	0xc1cdcd65
 80041f0:	08005444 	.word	0x08005444
 80041f4:	08005448 	.word	0x08005448
 80041f8:	7fefffff 	.word	0x7fefffff
 80041fc:	08005450 	.word	0x08005450
 8004200:	08005458 	.word	0x08005458
 8004204:	08005478 	.word	0x08005478
 8004208:	3fe00000 	.word	0x3fe00000
      --count;
 800420c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800420e:	3b01      	subs	r3, #1
 8004210:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8004212:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004214:	1c4b      	adds	r3, r1, #1
 8004216:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004218:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800421a:	4b68      	ldr	r3, [pc, #416]	; (80043bc <_ftoa+0x4c4>)
 800421c:	fba3 2300 	umull	r2, r3, r3, r0
 8004220:	08da      	lsrs	r2, r3, #3
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	1ac2      	subs	r2, r0, r3
 800422c:	b2d3      	uxtb	r3, r2
 800422e:	3330      	adds	r3, #48	; 0x30
 8004230:	b2da      	uxtb	r2, r3
 8004232:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004236:	440b      	add	r3, r1
 8004238:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800423c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800423e:	4a5f      	ldr	r2, [pc, #380]	; (80043bc <_ftoa+0x4c4>)
 8004240:	fba2 2303 	umull	r2, r3, r2, r3
 8004244:	08db      	lsrs	r3, r3, #3
 8004246:	653b      	str	r3, [r7, #80]	; 0x50
 8004248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <_ftoa+0x35e>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800424e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004250:	2b1f      	cmp	r3, #31
 8004252:	d9db      	bls.n	800420c <_ftoa+0x314>
 8004254:	e00a      	b.n	800426c <_ftoa+0x374>
        break;
 8004256:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8004258:	e008      	b.n	800426c <_ftoa+0x374>
      buf[len++] = '0';
 800425a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004260:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004264:	4413      	add	r3, r2
 8004266:	2230      	movs	r2, #48	; 0x30
 8004268:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800426c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800426e:	2b1f      	cmp	r3, #31
 8004270:	d804      	bhi.n	800427c <_ftoa+0x384>
 8004272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004274:	1e5a      	subs	r2, r3, #1
 8004276:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1ee      	bne.n	800425a <_ftoa+0x362>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800427c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427e:	2b1f      	cmp	r3, #31
 8004280:	d82b      	bhi.n	80042da <_ftoa+0x3e2>
      // add decimal
      buf[len++] = '.';
 8004282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004288:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800428c:	4413      	add	r3, r2
 800428e:	222e      	movs	r2, #46	; 0x2e
 8004290:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004294:	e021      	b.n	80042da <_ftoa+0x3e2>
    buf[len++] = (char)(48 + (whole % 10));
 8004296:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800429c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800429e:	4b48      	ldr	r3, [pc, #288]	; (80043c0 <_ftoa+0x4c8>)
 80042a0:	fb83 1302 	smull	r1, r3, r3, r2
 80042a4:	1099      	asrs	r1, r3, #2
 80042a6:	17d3      	asrs	r3, r2, #31
 80042a8:	1ac9      	subs	r1, r1, r3
 80042aa:	460b      	mov	r3, r1
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	440b      	add	r3, r1
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	1ad1      	subs	r1, r2, r3
 80042b4:	b2cb      	uxtb	r3, r1
 80042b6:	3330      	adds	r3, #48	; 0x30
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80042be:	4403      	add	r3, r0
 80042c0:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 80042c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c6:	4a3e      	ldr	r2, [pc, #248]	; (80043c0 <_ftoa+0x4c8>)
 80042c8:	fb82 1203 	smull	r1, r2, r2, r3
 80042cc:	1092      	asrs	r2, r2, #2
 80042ce:	17db      	asrs	r3, r3, #31
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	657b      	str	r3, [r7, #84]	; 0x54
 80042d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <_ftoa+0x3ea>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80042da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042dc:	2b1f      	cmp	r3, #31
 80042de:	d9da      	bls.n	8004296 <_ftoa+0x39e>
 80042e0:	e000      	b.n	80042e4 <_ftoa+0x3ec>
      break;
 80042e2:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80042e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d124      	bne.n	8004338 <_ftoa+0x440>
 80042ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d01f      	beq.n	8004338 <_ftoa+0x440>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80042f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d015      	beq.n	800432a <_ftoa+0x432>
 80042fe:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004302:	2b00      	cmp	r3, #0
 8004304:	d104      	bne.n	8004310 <_ftoa+0x418>
 8004306:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00c      	beq.n	800432a <_ftoa+0x432>
      width--;
 8004310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004312:	3b01      	subs	r3, #1
 8004314:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8004316:	e008      	b.n	800432a <_ftoa+0x432>
      buf[len++] = '0';
 8004318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800431e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004322:	4413      	add	r3, r2
 8004324:	2230      	movs	r2, #48	; 0x30
 8004326:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800432a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800432c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800432e:	429a      	cmp	r2, r3
 8004330:	d202      	bcs.n	8004338 <_ftoa+0x440>
 8004332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004334:	2b1f      	cmp	r3, #31
 8004336:	d9ef      	bls.n	8004318 <_ftoa+0x420>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800433a:	2b1f      	cmp	r3, #31
 800433c:	d82a      	bhi.n	8004394 <_ftoa+0x49c>
    if (negative) {
 800433e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <_ftoa+0x462>
      buf[len++] = '-';
 8004346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800434c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004350:	4413      	add	r3, r2
 8004352:	222d      	movs	r2, #45	; 0x2d
 8004354:	f803 2c48 	strb.w	r2, [r3, #-72]
 8004358:	e01c      	b.n	8004394 <_ftoa+0x49c>
    }
    else if (flags & FLAGS_PLUS) {
 800435a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	d009      	beq.n	8004378 <_ftoa+0x480>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	65fa      	str	r2, [r7, #92]	; 0x5c
 800436a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800436e:	4413      	add	r3, r2
 8004370:	222b      	movs	r2, #43	; 0x2b
 8004372:	f803 2c48 	strb.w	r2, [r3, #-72]
 8004376:	e00d      	b.n	8004394 <_ftoa+0x49c>
    }
    else if (flags & FLAGS_SPACE) {
 8004378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d008      	beq.n	8004394 <_ftoa+0x49c>
      buf[len++] = ' ';
 8004382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004388:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800438c:	4413      	add	r3, r2
 800438e:	2220      	movs	r2, #32
 8004390:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8004394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004396:	9303      	str	r3, [sp, #12]
 8004398:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800439a:	9302      	str	r3, [sp, #8]
 800439c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800439e:	9301      	str	r3, [sp, #4]
 80043a0:	f107 0318 	add.w	r3, r7, #24
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	6939      	ldr	r1, [r7, #16]
 80043ac:	6978      	ldr	r0, [r7, #20]
 80043ae:	f7ff fb9e 	bl	8003aee <_out_rev>
 80043b2:	4603      	mov	r3, r0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3764      	adds	r7, #100	; 0x64
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd90      	pop	{r4, r7, pc}
 80043bc:	cccccccd 	.word	0xcccccccd
 80043c0:	66666667 	.word	0x66666667
 80043c4:	00000000 	.word	0x00000000

080043c8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80043c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043cc:	b09d      	sub	sp, #116	; 0x74
 80043ce:	af06      	add	r7, sp, #24
 80043d0:	61f8      	str	r0, [r7, #28]
 80043d2:	61b9      	str	r1, [r7, #24]
 80043d4:	617a      	str	r2, [r7, #20]
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80043dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043e4:	f7fc fb18 	bl	8000a18 <__aeabi_dcmpeq>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d014      	beq.n	8004418 <_etoa+0x50>
 80043ee:	f04f 32ff 	mov.w	r2, #4294967295
 80043f2:	4bbf      	ldr	r3, [pc, #764]	; (80046f0 <_etoa+0x328>)
 80043f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043f8:	f7fc fb36 	bl	8000a68 <__aeabi_dcmpgt>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10a      	bne.n	8004418 <_etoa+0x50>
 8004402:	f04f 32ff 	mov.w	r2, #4294967295
 8004406:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800440a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800440e:	f7fc fb0d 	bl	8000a2c <__aeabi_dcmplt>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d012      	beq.n	800443e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8004418:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800441c:	9302      	str	r3, [sp, #8]
 800441e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004422:	9301      	str	r3, [sp, #4]
 8004424:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	ed97 0b02 	vldr	d0, [r7, #8]
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	69b9      	ldr	r1, [r7, #24]
 8004434:	69f8      	ldr	r0, [r7, #28]
 8004436:	f7ff fd5f 	bl	8003ef8 <_ftoa>
 800443a:	4603      	mov	r3, r0
 800443c:	e23f      	b.n	80048be <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800443e:	2301      	movs	r3, #1
 8004440:	461e      	mov	r6, r3
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800444e:	f7fc faed 	bl	8000a2c <__aeabi_dcmplt>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <_etoa+0x94>
 8004458:	2300      	movs	r3, #0
 800445a:	461e      	mov	r6, r3
 800445c:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8004460:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <_etoa+0xac>
    value = -value;
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	60bb      	str	r3, [r7, #8]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004472:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8004474:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447c:	2b00      	cmp	r3, #0
 800447e:	d102      	bne.n	8004486 <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004480:	2306      	movs	r3, #6
 8004482:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8004486:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800448a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800448e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004492:	ea4f 5813 	mov.w	r8, r3, lsr #20
 8004496:	f04f 0900 	mov.w	r9, #0
 800449a:	4643      	mov	r3, r8
 800449c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80044a4:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80044a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044aa:	f04f 30ff 	mov.w	r0, #4294967295
 80044ae:	4991      	ldr	r1, [pc, #580]	; (80046f4 <_etoa+0x32c>)
 80044b0:	ea02 0200 	and.w	r2, r2, r0
 80044b4:	ea03 0301 	and.w	r3, r3, r1
 80044b8:	f04f 0000 	mov.w	r0, #0
 80044bc:	498e      	ldr	r1, [pc, #568]	; (80046f8 <_etoa+0x330>)
 80044be:	ea42 0200 	orr.w	r2, r2, r0
 80044c2:	ea43 0301 	orr.w	r3, r3, r1
 80044c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80044ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80044cc:	f7fb ffd6 	bl	800047c <__aeabi_i2d>
 80044d0:	a37b      	add	r3, pc, #492	; (adr r3, 80046c0 <_etoa+0x2f8>)
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f7fc f837 	bl	8000548 <__aeabi_dmul>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4610      	mov	r0, r2
 80044e0:	4619      	mov	r1, r3
 80044e2:	a379      	add	r3, pc, #484	; (adr r3, 80046c8 <_etoa+0x300>)
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	f7fb fe7c 	bl	80001e4 <__adddf3>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4690      	mov	r8, r2
 80044f2:	4699      	mov	r9, r3
 80044f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	4b7f      	ldr	r3, [pc, #508]	; (80046fc <_etoa+0x334>)
 80044fe:	f7fb fe6f 	bl	80001e0 <__aeabi_dsub>
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4610      	mov	r0, r2
 8004508:	4619      	mov	r1, r3
 800450a:	a371      	add	r3, pc, #452	; (adr r3, 80046d0 <_etoa+0x308>)
 800450c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004510:	f7fc f81a 	bl	8000548 <__aeabi_dmul>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4640      	mov	r0, r8
 800451a:	4649      	mov	r1, r9
 800451c:	f7fb fe62 	bl	80001e4 <__adddf3>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4610      	mov	r0, r2
 8004526:	4619      	mov	r1, r3
 8004528:	f7fc faa8 	bl	8000a7c <__aeabi_d2iz>
 800452c:	4603      	mov	r3, r0
 800452e:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8004530:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004532:	f7fb ffa3 	bl	800047c <__aeabi_i2d>
 8004536:	a368      	add	r3, pc, #416	; (adr r3, 80046d8 <_etoa+0x310>)
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f7fc f804 	bl	8000548 <__aeabi_dmul>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4610      	mov	r0, r2
 8004546:	4619      	mov	r1, r3
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	4b6c      	ldr	r3, [pc, #432]	; (8004700 <_etoa+0x338>)
 800454e:	f7fb fe49 	bl	80001e4 <__adddf3>
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	4610      	mov	r0, r2
 8004558:	4619      	mov	r1, r3
 800455a:	f7fc fa8f 	bl	8000a7c <__aeabi_d2iz>
 800455e:	4603      	mov	r3, r0
 8004560:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8004562:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004564:	f7fb ff8a 	bl	800047c <__aeabi_i2d>
 8004568:	a35d      	add	r3, pc, #372	; (adr r3, 80046e0 <_etoa+0x318>)
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f7fb ffeb 	bl	8000548 <__aeabi_dmul>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4690      	mov	r8, r2
 8004578:	4699      	mov	r9, r3
 800457a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800457c:	f7fb ff7e 	bl	800047c <__aeabi_i2d>
 8004580:	a359      	add	r3, pc, #356	; (adr r3, 80046e8 <_etoa+0x320>)
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	f7fb ffdf 	bl	8000548 <__aeabi_dmul>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4640      	mov	r0, r8
 8004590:	4649      	mov	r1, r9
 8004592:	f7fb fe25 	bl	80001e0 <__aeabi_dsub>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 800459e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045a2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80045a6:	f7fb ffcf 	bl	8000548 <__aeabi_dmul>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80045b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80045b8:	461a      	mov	r2, r3
 80045ba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80045be:	0515      	lsls	r5, r2, #20
 80045c0:	2400      	movs	r4, #0
 80045c2:	e9c7 4508 	strd	r4, r5, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80045c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80045ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	f7fb fe07 	bl	80001e4 <__adddf3>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4690      	mov	r8, r2
 80045dc:	4699      	mov	r9, r3
 80045de:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045e2:	f04f 0000 	mov.w	r0, #0
 80045e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80045ea:	f7fb fdf9 	bl	80001e0 <__aeabi_dsub>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4692      	mov	sl, r2
 80045f4:	469b      	mov	fp, r3
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	4b42      	ldr	r3, [pc, #264]	; (8004704 <_etoa+0x33c>)
 80045fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004600:	f7fc f8cc 	bl	800079c <__aeabi_ddiv>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4610      	mov	r0, r2
 800460a:	4619      	mov	r1, r3
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	4b3d      	ldr	r3, [pc, #244]	; (8004708 <_etoa+0x340>)
 8004612:	f7fb fde7 	bl	80001e4 <__adddf3>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800461e:	f7fc f8bd 	bl	800079c <__aeabi_ddiv>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	4b37      	ldr	r3, [pc, #220]	; (800470c <_etoa+0x344>)
 8004630:	f7fb fdd8 	bl	80001e4 <__adddf3>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800463c:	f7fc f8ae 	bl	800079c <__aeabi_ddiv>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4650      	mov	r0, sl
 8004646:	4659      	mov	r1, fp
 8004648:	f7fb fdcc 	bl	80001e4 <__adddf3>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4640      	mov	r0, r8
 8004652:	4649      	mov	r1, r9
 8004654:	f7fc f8a2 	bl	800079c <__aeabi_ddiv>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4610      	mov	r0, r2
 800465e:	4619      	mov	r1, r3
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	4b24      	ldr	r3, [pc, #144]	; (80046f8 <_etoa+0x330>)
 8004666:	f7fb fdbd 	bl	80001e4 <__adddf3>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4620      	mov	r0, r4
 8004670:	4629      	mov	r1, r5
 8004672:	f7fb ff69 	bl	8000548 <__aeabi_dmul>
 8004676:	4603      	mov	r3, r0
 8004678:	460c      	mov	r4, r1
 800467a:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 800467e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004682:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004686:	f7fc f9ef 	bl	8000a68 <__aeabi_dcmpgt>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00d      	beq.n	80046ac <_etoa+0x2e4>
    expval--;
 8004690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004692:	3b01      	subs	r3, #1
 8004694:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8004696:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	4b1a      	ldr	r3, [pc, #104]	; (8004708 <_etoa+0x340>)
 80046a0:	f7fc f87c 	bl	800079c <__aeabi_ddiv>
 80046a4:	4603      	mov	r3, r0
 80046a6:	460c      	mov	r4, r1
 80046a8:	e9c7 3408 	strd	r3, r4, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80046ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ae:	2b63      	cmp	r3, #99	; 0x63
 80046b0:	dc2e      	bgt.n	8004710 <_etoa+0x348>
 80046b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b4:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80046b8:	db2a      	blt.n	8004710 <_etoa+0x348>
 80046ba:	2304      	movs	r3, #4
 80046bc:	e029      	b.n	8004712 <_etoa+0x34a>
 80046be:	bf00      	nop
 80046c0:	509f79fb 	.word	0x509f79fb
 80046c4:	3fd34413 	.word	0x3fd34413
 80046c8:	8b60c8b3 	.word	0x8b60c8b3
 80046cc:	3fc68a28 	.word	0x3fc68a28
 80046d0:	636f4361 	.word	0x636f4361
 80046d4:	3fd287a7 	.word	0x3fd287a7
 80046d8:	0979a371 	.word	0x0979a371
 80046dc:	400a934f 	.word	0x400a934f
 80046e0:	bbb55516 	.word	0xbbb55516
 80046e4:	40026bb1 	.word	0x40026bb1
 80046e8:	fefa39ef 	.word	0xfefa39ef
 80046ec:	3fe62e42 	.word	0x3fe62e42
 80046f0:	7fefffff 	.word	0x7fefffff
 80046f4:	000fffff 	.word	0x000fffff
 80046f8:	3ff00000 	.word	0x3ff00000
 80046fc:	3ff80000 	.word	0x3ff80000
 8004700:	3fe00000 	.word	0x3fe00000
 8004704:	402c0000 	.word	0x402c0000
 8004708:	40240000 	.word	0x40240000
 800470c:	40180000 	.word	0x40180000
 8004710:	2305      	movs	r3, #5
 8004712:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004714:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800471c:	2b00      	cmp	r3, #0
 800471e:	d03d      	beq.n	800479c <_etoa+0x3d4>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8004720:	a369      	add	r3, pc, #420	; (adr r3, 80048c8 <_etoa+0x500>)
 8004722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004726:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800472a:	f7fc f993 	bl	8000a54 <__aeabi_dcmpge>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d024      	beq.n	800477e <_etoa+0x3b6>
 8004734:	a366      	add	r3, pc, #408	; (adr r3, 80048d0 <_etoa+0x508>)
 8004736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800473e:	f7fc f975 	bl	8000a2c <__aeabi_dcmplt>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01a      	beq.n	800477e <_etoa+0x3b6>
      if ((int)prec > expval) {
 8004748:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800474c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800474e:	429a      	cmp	r2, r3
 8004750:	dd07      	ble.n	8004762 <_etoa+0x39a>
        prec = (unsigned)((int)prec - expval - 1);
 8004752:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004760:	e002      	b.n	8004768 <_etoa+0x3a0>
      }
      else {
        prec = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8004768:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800476c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004770:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	657b      	str	r3, [r7, #84]	; 0x54
 800477c:	e00e      	b.n	800479c <_etoa+0x3d4>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800477e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <_etoa+0x3d4>
 8004786:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800478a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800478e:	2b00      	cmp	r3, #0
 8004790:	d004      	beq.n	800479c <_etoa+0x3d4>
        --prec;
 8004792:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004796:	3b01      	subs	r3, #1
 8004798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800479c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 80047a2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80047a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d904      	bls.n	80047b6 <_etoa+0x3ee>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80047ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047b4:	e001      	b.n	80047ba <_etoa+0x3f2>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80047ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d004      	beq.n	80047d0 <_etoa+0x408>
 80047c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <_etoa+0x408>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 80047d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00b      	beq.n	80047ee <_etoa+0x426>
    value /= conv.F;
 80047d6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80047da:	461a      	mov	r2, r3
 80047dc:	4623      	mov	r3, r4
 80047de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047e2:	f7fb ffdb 	bl	800079c <__aeabi_ddiv>
 80047e6:	4603      	mov	r3, r0
 80047e8:	460c      	mov	r4, r1
 80047ea:	e9c7 3402 	strd	r3, r4, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80047f2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d006      	beq.n	8004808 <_etoa+0x440>
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	603b      	str	r3, [r7, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004804:	607b      	str	r3, [r7, #4]
 8004806:	e003      	b.n	8004810 <_etoa+0x448>
 8004808:	ed97 7b02 	vldr	d7, [r7, #8]
 800480c:	ed87 7b00 	vstr	d7, [r7]
 8004810:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004818:	9302      	str	r3, [sp, #8]
 800481a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800481c:	9301      	str	r3, [sp, #4]
 800481e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	ed97 0b00 	vldr	d0, [r7]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	69b9      	ldr	r1, [r7, #24]
 800482e:	69f8      	ldr	r0, [r7, #28]
 8004830:	f7ff fb62 	bl	8003ef8 <_ftoa>
 8004834:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 8004836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004838:	2b00      	cmp	r3, #0
 800483a:	d03f      	beq.n	80048bc <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800483c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <_etoa+0x484>
 8004848:	2045      	movs	r0, #69	; 0x45
 800484a:	e000      	b.n	800484e <_etoa+0x486>
 800484c:	2065      	movs	r0, #101	; 0x65
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	1c53      	adds	r3, r2, #1
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	69fc      	ldr	r4, [r7, #28]
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	69b9      	ldr	r1, [r7, #24]
 800485a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800485c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800485e:	2b00      	cmp	r3, #0
 8004860:	bfb8      	it	lt
 8004862:	425b      	neglt	r3, r3
 8004864:	4618      	mov	r0, r3
 8004866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004868:	0fdb      	lsrs	r3, r3, #31
 800486a:	b2db      	uxtb	r3, r3
 800486c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800486e:	3a01      	subs	r2, #1
 8004870:	2105      	movs	r1, #5
 8004872:	9105      	str	r1, [sp, #20]
 8004874:	9204      	str	r2, [sp, #16]
 8004876:	2200      	movs	r2, #0
 8004878:	9203      	str	r2, [sp, #12]
 800487a:	220a      	movs	r2, #10
 800487c:	9202      	str	r2, [sp, #8]
 800487e:	9301      	str	r3, [sp, #4]
 8004880:	9000      	str	r0, [sp, #0]
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	69b9      	ldr	r1, [r7, #24]
 8004888:	69f8      	ldr	r0, [r7, #28]
 800488a:	f7ff fa5c 	bl	8003d46 <_ntoa_long>
 800488e:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004890:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00f      	beq.n	80048bc <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800489c:	e007      	b.n	80048ae <_etoa+0x4e6>
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	1c53      	adds	r3, r2, #1
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	69fc      	ldr	r4, [r7, #28]
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	69b9      	ldr	r1, [r7, #24]
 80048aa:	2020      	movs	r0, #32
 80048ac:	47a0      	blx	r4
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b2:	1ad2      	subs	r2, r2, r3
 80048b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d3f0      	bcc.n	800489e <_etoa+0x4d6>
    }
  }
  return idx;
 80048bc:	697b      	ldr	r3, [r7, #20]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	375c      	adds	r7, #92	; 0x5c
 80048c2:	46bd      	mov	sp, r7
 80048c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c8:	eb1c432d 	.word	0xeb1c432d
 80048cc:	3f1a36e2 	.word	0x3f1a36e2
 80048d0:	00000000 	.word	0x00000000
 80048d4:	412e8480 	.word	0x412e8480

080048d8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80048d8:	b5b0      	push	{r4, r5, r7, lr}
 80048da:	b0a0      	sub	sp, #128	; 0x80
 80048dc:	af0a      	add	r7, sp, #40	; 0x28
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f040 848e 	bne.w	800520e <_vsnprintf+0x936>
    // use null output function
    out = _out_null;
 80048f2:	4ba0      	ldr	r3, [pc, #640]	; (8004b74 <_vsnprintf+0x29c>)
 80048f4:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 80048f6:	f000 bc8a 	b.w	800520e <_vsnprintf+0x936>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b25      	cmp	r3, #37	; 0x25
 8004900:	d00d      	beq.n	800491e <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	7818      	ldrb	r0, [r3, #0]
 8004906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004908:	1c53      	adds	r3, r2, #1
 800490a:	647b      	str	r3, [r7, #68]	; 0x44
 800490c:	68fc      	ldr	r4, [r7, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	47a0      	blx	r4
      format++;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	3301      	adds	r3, #1
 8004918:	603b      	str	r3, [r7, #0]
      continue;
 800491a:	f000 bc78 	b.w	800520e <_vsnprintf+0x936>
    }
    else {
      // yes, evaluate it
      format++;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	3301      	adds	r3, #1
 8004922:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	3b20      	subs	r3, #32
 800492e:	2b10      	cmp	r3, #16
 8004930:	d856      	bhi.n	80049e0 <_vsnprintf+0x108>
 8004932:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <_vsnprintf+0x60>)
 8004934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004938:	080049b9 	.word	0x080049b9
 800493c:	080049e1 	.word	0x080049e1
 8004940:	080049e1 	.word	0x080049e1
 8004944:	080049cd 	.word	0x080049cd
 8004948:	080049e1 	.word	0x080049e1
 800494c:	080049e1 	.word	0x080049e1
 8004950:	080049e1 	.word	0x080049e1
 8004954:	080049e1 	.word	0x080049e1
 8004958:	080049e1 	.word	0x080049e1
 800495c:	080049e1 	.word	0x080049e1
 8004960:	080049e1 	.word	0x080049e1
 8004964:	080049a5 	.word	0x080049a5
 8004968:	080049e1 	.word	0x080049e1
 800496c:	08004991 	.word	0x08004991
 8004970:	080049e1 	.word	0x080049e1
 8004974:	080049e1 	.word	0x080049e1
 8004978:	0800497d 	.word	0x0800497d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800497c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	657b      	str	r3, [r7, #84]	; 0x54
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	3301      	adds	r3, #1
 8004988:	603b      	str	r3, [r7, #0]
 800498a:	2301      	movs	r3, #1
 800498c:	64bb      	str	r3, [r7, #72]	; 0x48
 800498e:	e02a      	b.n	80049e6 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8004990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004992:	f043 0302 	orr.w	r3, r3, #2
 8004996:	657b      	str	r3, [r7, #84]	; 0x54
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	3301      	adds	r3, #1
 800499c:	603b      	str	r3, [r7, #0]
 800499e:	2301      	movs	r3, #1
 80049a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80049a2:	e020      	b.n	80049e6 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80049a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a6:	f043 0304 	orr.w	r3, r3, #4
 80049aa:	657b      	str	r3, [r7, #84]	; 0x54
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	3301      	adds	r3, #1
 80049b0:	603b      	str	r3, [r7, #0]
 80049b2:	2301      	movs	r3, #1
 80049b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80049b6:	e016      	b.n	80049e6 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80049b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ba:	f043 0308 	orr.w	r3, r3, #8
 80049be:	657b      	str	r3, [r7, #84]	; 0x54
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	3301      	adds	r3, #1
 80049c4:	603b      	str	r3, [r7, #0]
 80049c6:	2301      	movs	r3, #1
 80049c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80049ca:	e00c      	b.n	80049e6 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80049cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ce:	f043 0310 	orr.w	r3, r3, #16
 80049d2:	657b      	str	r3, [r7, #84]	; 0x54
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	3301      	adds	r3, #1
 80049d8:	603b      	str	r3, [r7, #0]
 80049da:	2301      	movs	r3, #1
 80049dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80049de:	e002      	b.n	80049e6 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 80049e0:	2300      	movs	r3, #0
 80049e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80049e4:	bf00      	nop
      }
    } while (n);
 80049e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d19d      	bne.n	8004928 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff f83f 	bl	8003a78 <_is_digit>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <_vsnprintf+0x134>
      width = _atoi(&format);
 8004a00:	463b      	mov	r3, r7
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff f84f 	bl	8003aa6 <_atoi>
 8004a08:	6538      	str	r0, [r7, #80]	; 0x50
 8004a0a:	e018      	b.n	8004a3e <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b2a      	cmp	r3, #42	; 0x2a
 8004a12:	d114      	bne.n	8004a3e <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 8004a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a16:	1d1a      	adds	r2, r3, #4
 8004a18:	66ba      	str	r2, [r7, #104]	; 0x68
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	da07      	bge.n	8004a34 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 8004a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a26:	f043 0302 	orr.w	r3, r3, #2
 8004a2a:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	425b      	negs	r3, r3
 8004a30:	653b      	str	r3, [r7, #80]	; 0x50
 8004a32:	e001      	b.n	8004a38 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 8004a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a36:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b2e      	cmp	r3, #46	; 0x2e
 8004a48:	d124      	bne.n	8004a94 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 8004a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a50:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	3301      	adds	r3, #1
 8004a56:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff f80b 	bl	8003a78 <_is_digit>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8004a68:	463b      	mov	r3, r7
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff f81b 	bl	8003aa6 <_atoi>
 8004a70:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004a72:	e00f      	b.n	8004a94 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b2a      	cmp	r3, #42	; 0x2a
 8004a7a:	d10b      	bne.n	8004a94 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 8004a7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a7e:	1d1a      	adds	r2, r3, #4
 8004a80:	66ba      	str	r2, [r7, #104]	; 0x68
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8004a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	3301      	adds	r3, #1
 8004a92:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	3b68      	subs	r3, #104	; 0x68
 8004a9a:	2b12      	cmp	r3, #18
 8004a9c:	d866      	bhi.n	8004b6c <_vsnprintf+0x294>
 8004a9e:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <_vsnprintf+0x1cc>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004b17 	.word	0x08004b17
 8004aa8:	08004b6d 	.word	0x08004b6d
 8004aac:	08004b4d 	.word	0x08004b4d
 8004ab0:	08004b6d 	.word	0x08004b6d
 8004ab4:	08004af1 	.word	0x08004af1
 8004ab8:	08004b6d 	.word	0x08004b6d
 8004abc:	08004b6d 	.word	0x08004b6d
 8004ac0:	08004b6d 	.word	0x08004b6d
 8004ac4:	08004b6d 	.word	0x08004b6d
 8004ac8:	08004b6d 	.word	0x08004b6d
 8004acc:	08004b6d 	.word	0x08004b6d
 8004ad0:	08004b6d 	.word	0x08004b6d
 8004ad4:	08004b3d 	.word	0x08004b3d
 8004ad8:	08004b6d 	.word	0x08004b6d
 8004adc:	08004b6d 	.word	0x08004b6d
 8004ae0:	08004b6d 	.word	0x08004b6d
 8004ae4:	08004b6d 	.word	0x08004b6d
 8004ae8:	08004b6d 	.word	0x08004b6d
 8004aec:	08004b5d 	.word	0x08004b5d
      case 'l' :
        flags |= FLAGS_LONG;
 8004af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	3301      	adds	r3, #1
 8004afc:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b6c      	cmp	r3, #108	; 0x6c
 8004b04:	d134      	bne.n	8004b70 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 8004b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b0c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	3301      	adds	r3, #1
 8004b12:	603b      	str	r3, [r7, #0]
        }
        break;
 8004b14:	e02c      	b.n	8004b70 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 8004b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b1c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	3301      	adds	r3, #1
 8004b22:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b68      	cmp	r3, #104	; 0x68
 8004b2a:	d125      	bne.n	8004b78 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8004b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b32:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	3301      	adds	r3, #1
 8004b38:	603b      	str	r3, [r7, #0]
        }
        break;
 8004b3a:	e01d      	b.n	8004b78 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b42:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	3301      	adds	r3, #1
 8004b48:	603b      	str	r3, [r7, #0]
        break;
 8004b4a:	e016      	b.n	8004b7a <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b52:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	3301      	adds	r3, #1
 8004b58:	603b      	str	r3, [r7, #0]
        break;
 8004b5a:	e00e      	b.n	8004b7a <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b62:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	3301      	adds	r3, #1
 8004b68:	603b      	str	r3, [r7, #0]
        break;
 8004b6a:	e006      	b.n	8004b7a <_vsnprintf+0x2a2>
      default :
        break;
 8004b6c:	bf00      	nop
 8004b6e:	e004      	b.n	8004b7a <_vsnprintf+0x2a2>
        break;
 8004b70:	bf00      	nop
 8004b72:	e002      	b.n	8004b7a <_vsnprintf+0x2a2>
 8004b74:	080039fd 	.word	0x080039fd
        break;
 8004b78:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	3b25      	subs	r3, #37	; 0x25
 8004b80:	2b53      	cmp	r3, #83	; 0x53
 8004b82:	f200 8337 	bhi.w	80051f4 <_vsnprintf+0x91c>
 8004b86:	a201      	add	r2, pc, #4	; (adr r2, 8004b8c <_vsnprintf+0x2b4>)
 8004b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8c:	080051dd 	.word	0x080051dd
 8004b90:	080051f5 	.word	0x080051f5
 8004b94:	080051f5 	.word	0x080051f5
 8004b98:	080051f5 	.word	0x080051f5
 8004b9c:	080051f5 	.word	0x080051f5
 8004ba0:	080051f5 	.word	0x080051f5
 8004ba4:	080051f5 	.word	0x080051f5
 8004ba8:	080051f5 	.word	0x080051f5
 8004bac:	080051f5 	.word	0x080051f5
 8004bb0:	080051f5 	.word	0x080051f5
 8004bb4:	080051f5 	.word	0x080051f5
 8004bb8:	080051f5 	.word	0x080051f5
 8004bbc:	080051f5 	.word	0x080051f5
 8004bc0:	080051f5 	.word	0x080051f5
 8004bc4:	080051f5 	.word	0x080051f5
 8004bc8:	080051f5 	.word	0x080051f5
 8004bcc:	080051f5 	.word	0x080051f5
 8004bd0:	080051f5 	.word	0x080051f5
 8004bd4:	080051f5 	.word	0x080051f5
 8004bd8:	080051f5 	.word	0x080051f5
 8004bdc:	080051f5 	.word	0x080051f5
 8004be0:	080051f5 	.word	0x080051f5
 8004be4:	080051f5 	.word	0x080051f5
 8004be8:	080051f5 	.word	0x080051f5
 8004bec:	080051f5 	.word	0x080051f5
 8004bf0:	080051f5 	.word	0x080051f5
 8004bf4:	080051f5 	.word	0x080051f5
 8004bf8:	080051f5 	.word	0x080051f5
 8004bfc:	080051f5 	.word	0x080051f5
 8004c00:	080051f5 	.word	0x080051f5
 8004c04:	080051f5 	.word	0x080051f5
 8004c08:	080051f5 	.word	0x080051f5
 8004c0c:	08004fb1 	.word	0x08004fb1
 8004c10:	08004f65 	.word	0x08004f65
 8004c14:	08004fb1 	.word	0x08004fb1
 8004c18:	080051f5 	.word	0x080051f5
 8004c1c:	080051f5 	.word	0x080051f5
 8004c20:	080051f5 	.word	0x080051f5
 8004c24:	080051f5 	.word	0x080051f5
 8004c28:	080051f5 	.word	0x080051f5
 8004c2c:	080051f5 	.word	0x080051f5
 8004c30:	080051f5 	.word	0x080051f5
 8004c34:	080051f5 	.word	0x080051f5
 8004c38:	080051f5 	.word	0x080051f5
 8004c3c:	080051f5 	.word	0x080051f5
 8004c40:	080051f5 	.word	0x080051f5
 8004c44:	080051f5 	.word	0x080051f5
 8004c48:	080051f5 	.word	0x080051f5
 8004c4c:	080051f5 	.word	0x080051f5
 8004c50:	080051f5 	.word	0x080051f5
 8004c54:	080051f5 	.word	0x080051f5
 8004c58:	08004cdd 	.word	0x08004cdd
 8004c5c:	080051f5 	.word	0x080051f5
 8004c60:	080051f5 	.word	0x080051f5
 8004c64:	080051f5 	.word	0x080051f5
 8004c68:	080051f5 	.word	0x080051f5
 8004c6c:	080051f5 	.word	0x080051f5
 8004c70:	080051f5 	.word	0x080051f5
 8004c74:	080051f5 	.word	0x080051f5
 8004c78:	080051f5 	.word	0x080051f5
 8004c7c:	080051f5 	.word	0x080051f5
 8004c80:	08004cdd 	.word	0x08004cdd
 8004c84:	0800501d 	.word	0x0800501d
 8004c88:	08004cdd 	.word	0x08004cdd
 8004c8c:	08004fb1 	.word	0x08004fb1
 8004c90:	08004f65 	.word	0x08004f65
 8004c94:	08004fb1 	.word	0x08004fb1
 8004c98:	080051f5 	.word	0x080051f5
 8004c9c:	08004cdd 	.word	0x08004cdd
 8004ca0:	080051f5 	.word	0x080051f5
 8004ca4:	080051f5 	.word	0x080051f5
 8004ca8:	080051f5 	.word	0x080051f5
 8004cac:	080051f5 	.word	0x080051f5
 8004cb0:	080051f5 	.word	0x080051f5
 8004cb4:	08004cdd 	.word	0x08004cdd
 8004cb8:	08005155 	.word	0x08005155
 8004cbc:	080051f5 	.word	0x080051f5
 8004cc0:	080051f5 	.word	0x080051f5
 8004cc4:	08005091 	.word	0x08005091
 8004cc8:	080051f5 	.word	0x080051f5
 8004ccc:	08004cdd 	.word	0x08004cdd
 8004cd0:	080051f5 	.word	0x080051f5
 8004cd4:	080051f5 	.word	0x080051f5
 8004cd8:	08004cdd 	.word	0x08004cdd
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b78      	cmp	r3, #120	; 0x78
 8004ce2:	d003      	beq.n	8004cec <_vsnprintf+0x414>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b58      	cmp	r3, #88	; 0x58
 8004cea:	d102      	bne.n	8004cf2 <_vsnprintf+0x41a>
          base = 16U;
 8004cec:	2310      	movs	r3, #16
 8004cee:	643b      	str	r3, [r7, #64]	; 0x40
 8004cf0:	e013      	b.n	8004d1a <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b6f      	cmp	r3, #111	; 0x6f
 8004cf8:	d102      	bne.n	8004d00 <_vsnprintf+0x428>
          base =  8U;
 8004cfa:	2308      	movs	r3, #8
 8004cfc:	643b      	str	r3, [r7, #64]	; 0x40
 8004cfe:	e00c      	b.n	8004d1a <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b62      	cmp	r3, #98	; 0x62
 8004d06:	d102      	bne.n	8004d0e <_vsnprintf+0x436>
          base =  2U;
 8004d08:	2302      	movs	r3, #2
 8004d0a:	643b      	str	r3, [r7, #64]	; 0x40
 8004d0c:	e005      	b.n	8004d1a <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8004d0e:	230a      	movs	r3, #10
 8004d10:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8004d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d14:	f023 0310 	bic.w	r3, r3, #16
 8004d18:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b58      	cmp	r3, #88	; 0x58
 8004d20:	d103      	bne.n	8004d2a <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8004d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d24:	f043 0320 	orr.w	r3, r3, #32
 8004d28:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b69      	cmp	r3, #105	; 0x69
 8004d30:	d007      	beq.n	8004d42 <_vsnprintf+0x46a>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b64      	cmp	r3, #100	; 0x64
 8004d38:	d003      	beq.n	8004d42 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d3c:	f023 030c 	bic.w	r3, r3, #12
 8004d40:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8004d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 8004d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b69      	cmp	r3, #105	; 0x69
 8004d5a:	d004      	beq.n	8004d66 <_vsnprintf+0x48e>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b64      	cmp	r3, #100	; 0x64
 8004d62:	f040 808c 	bne.w	8004e7e <_vsnprintf+0x5a6>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8004d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d02d      	beq.n	8004dcc <_vsnprintf+0x4f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8004d70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d72:	3307      	adds	r3, #7
 8004d74:	f023 0307 	bic.w	r3, r3, #7
 8004d78:	f103 0208 	add.w	r2, r3, #8
 8004d7c:	66ba      	str	r2, [r7, #104]	; 0x68
 8004d7e:	cb18      	ldmia	r3, {r3, r4}
 8004d80:	e9c7 3408 	strd	r3, r4, [r7, #32]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004d84:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f174 0200 	sbcs.w	r2, r4, #0
 8004d8e:	da02      	bge.n	8004d96 <_vsnprintf+0x4be>
 8004d90:	425b      	negs	r3, r3
 8004d92:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8004d96:	4619      	mov	r1, r3
 8004d98:	4622      	mov	r2, r4
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	0fdb      	lsrs	r3, r3, #31
 8004d9e:	b2d8      	uxtb	r0, r3
 8004da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da2:	f04f 0400 	mov.w	r4, #0
 8004da6:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8004da8:	9508      	str	r5, [sp, #32]
 8004daa:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8004dac:	9507      	str	r5, [sp, #28]
 8004dae:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8004db0:	9506      	str	r5, [sp, #24]
 8004db2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004db6:	9002      	str	r0, [sp, #8]
 8004db8:	e88d 0006 	stmia.w	sp, {r1, r2}
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f7ff f826 	bl	8003e14 <_ntoa_long_long>
 8004dc8:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8004dca:	e0c7      	b.n	8004f5c <_vsnprintf+0x684>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d01e      	beq.n	8004e14 <_vsnprintf+0x53c>
            const long value = va_arg(va, long);
 8004dd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dd8:	1d1a      	adds	r2, r3, #4
 8004dda:	66ba      	str	r2, [r7, #104]	; 0x68
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bfb8      	it	lt
 8004de6:	425b      	neglt	r3, r3
 8004de8:	4619      	mov	r1, r3
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	0fdb      	lsrs	r3, r3, #31
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004df2:	9205      	str	r2, [sp, #20]
 8004df4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004df6:	9204      	str	r2, [sp, #16]
 8004df8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dfa:	9203      	str	r2, [sp, #12]
 8004dfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dfe:	9202      	str	r2, [sp, #8]
 8004e00:	9301      	str	r3, [sp, #4]
 8004e02:	9100      	str	r1, [sp, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e08:	68b9      	ldr	r1, [r7, #8]
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f7fe ff9b 	bl	8003d46 <_ntoa_long>
 8004e10:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8004e12:	e0a3      	b.n	8004f5c <_vsnprintf+0x684>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8004e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <_vsnprintf+0x552>
 8004e1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e20:	1d1a      	adds	r2, r3, #4
 8004e22:	66ba      	str	r2, [r7, #104]	; 0x68
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	e00e      	b.n	8004e48 <_vsnprintf+0x570>
 8004e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <_vsnprintf+0x568>
 8004e34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e36:	1d1a      	adds	r2, r3, #4
 8004e38:	66ba      	str	r2, [r7, #104]	; 0x68
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	b21b      	sxth	r3, r3
 8004e3e:	e003      	b.n	8004e48 <_vsnprintf+0x570>
 8004e40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e42:	1d1a      	adds	r2, r3, #4
 8004e44:	66ba      	str	r2, [r7, #104]	; 0x68
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	61bb      	str	r3, [r7, #24]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	bfb8      	it	lt
 8004e50:	425b      	neglt	r3, r3
 8004e52:	4619      	mov	r1, r3
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	0fdb      	lsrs	r3, r3, #31
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e5c:	9205      	str	r2, [sp, #20]
 8004e5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e60:	9204      	str	r2, [sp, #16]
 8004e62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e64:	9203      	str	r2, [sp, #12]
 8004e66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e68:	9202      	str	r2, [sp, #8]
 8004e6a:	9301      	str	r3, [sp, #4]
 8004e6c:	9100      	str	r1, [sp, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f7fe ff66 	bl	8003d46 <_ntoa_long>
 8004e7a:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8004e7c:	e06e      	b.n	8004f5c <_vsnprintf+0x684>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8004e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01f      	beq.n	8004ec8 <_vsnprintf+0x5f0>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8004e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e8a:	3307      	adds	r3, #7
 8004e8c:	f023 0307 	bic.w	r3, r3, #7
 8004e90:	f103 0208 	add.w	r2, r3, #8
 8004e94:	66ba      	str	r2, [r7, #104]	; 0x68
 8004e96:	cb18      	ldmia	r3, {r3, r4}
 8004e98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004ea2:	9008      	str	r0, [sp, #32]
 8004ea4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004ea6:	9007      	str	r0, [sp, #28]
 8004ea8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004eaa:	9006      	str	r0, [sp, #24]
 8004eac:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	9202      	str	r2, [sp, #8]
 8004eb4:	e88d 0018 	stmia.w	sp, {r3, r4}
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f7fe ffa8 	bl	8003e14 <_ntoa_long_long>
 8004ec4:	6478      	str	r0, [r7, #68]	; 0x44
 8004ec6:	e049      	b.n	8004f5c <_vsnprintf+0x684>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d016      	beq.n	8004f00 <_vsnprintf+0x628>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8004ed2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ed4:	1d1a      	adds	r2, r3, #4
 8004ed6:	66ba      	str	r2, [r7, #104]	; 0x68
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004edc:	9205      	str	r2, [sp, #20]
 8004ede:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ee0:	9204      	str	r2, [sp, #16]
 8004ee2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ee4:	9203      	str	r2, [sp, #12]
 8004ee6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ee8:	9202      	str	r2, [sp, #8]
 8004eea:	2200      	movs	r2, #0
 8004eec:	9201      	str	r2, [sp, #4]
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f7fe ff25 	bl	8003d46 <_ntoa_long>
 8004efc:	6478      	str	r0, [r7, #68]	; 0x44
 8004efe:	e02d      	b.n	8004f5c <_vsnprintf+0x684>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <_vsnprintf+0x63e>
 8004f0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f0c:	1d1a      	adds	r2, r3, #4
 8004f0e:	66ba      	str	r2, [r7, #104]	; 0x68
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	e00e      	b.n	8004f34 <_vsnprintf+0x65c>
 8004f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <_vsnprintf+0x654>
 8004f20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f22:	1d1a      	adds	r2, r3, #4
 8004f24:	66ba      	str	r2, [r7, #104]	; 0x68
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	e003      	b.n	8004f34 <_vsnprintf+0x65c>
 8004f2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f2e:	1d1a      	adds	r2, r3, #4
 8004f30:	66ba      	str	r2, [r7, #104]	; 0x68
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8004f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f38:	9305      	str	r3, [sp, #20]
 8004f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f3c:	9304      	str	r3, [sp, #16]
 8004f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f40:	9303      	str	r3, [sp, #12]
 8004f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f44:	9302      	str	r3, [sp, #8]
 8004f46:	2300      	movs	r3, #0
 8004f48:	9301      	str	r3, [sp, #4]
 8004f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7fe fef6 	bl	8003d46 <_ntoa_long>
 8004f5a:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	603b      	str	r3, [r7, #0]
        break;
 8004f62:	e154      	b.n	800520e <_vsnprintf+0x936>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b46      	cmp	r3, #70	; 0x46
 8004f6a:	d103      	bne.n	8004f74 <_vsnprintf+0x69c>
 8004f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f6e:	f043 0320 	orr.w	r3, r3, #32
 8004f72:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004f74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f76:	3307      	adds	r3, #7
 8004f78:	f023 0307 	bic.w	r3, r3, #7
 8004f7c:	f103 0208 	add.w	r2, r3, #8
 8004f80:	66ba      	str	r2, [r7, #104]	; 0x68
 8004f82:	ed93 7b00 	vldr	d7, [r3]
 8004f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f88:	9302      	str	r3, [sp, #8]
 8004f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f8c:	9301      	str	r3, [sp, #4]
 8004f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	eeb0 0a47 	vmov.f32	s0, s14
 8004f96:	eef0 0a67 	vmov.f32	s1, s15
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f7fe ffa9 	bl	8003ef8 <_ftoa>
 8004fa6:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	3301      	adds	r3, #1
 8004fac:	603b      	str	r3, [r7, #0]
        break;
 8004fae:	e12e      	b.n	800520e <_vsnprintf+0x936>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b67      	cmp	r3, #103	; 0x67
 8004fb6:	d003      	beq.n	8004fc0 <_vsnprintf+0x6e8>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b47      	cmp	r3, #71	; 0x47
 8004fbe:	d103      	bne.n	8004fc8 <_vsnprintf+0x6f0>
 8004fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004fc6:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b45      	cmp	r3, #69	; 0x45
 8004fce:	d003      	beq.n	8004fd8 <_vsnprintf+0x700>
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b47      	cmp	r3, #71	; 0x47
 8004fd6:	d103      	bne.n	8004fe0 <_vsnprintf+0x708>
 8004fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fda:	f043 0320 	orr.w	r3, r3, #32
 8004fde:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004fe0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fe2:	3307      	adds	r3, #7
 8004fe4:	f023 0307 	bic.w	r3, r3, #7
 8004fe8:	f103 0208 	add.w	r2, r3, #8
 8004fec:	66ba      	str	r2, [r7, #104]	; 0x68
 8004fee:	ed93 7b00 	vldr	d7, [r3]
 8004ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ff4:	9302      	str	r3, [sp, #8]
 8004ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ff8:	9301      	str	r3, [sp, #4]
 8004ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	eeb0 0a47 	vmov.f32	s0, s14
 8005002:	eef0 0a67 	vmov.f32	s1, s15
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800500a:	68b9      	ldr	r1, [r7, #8]
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f7ff f9db 	bl	80043c8 <_etoa>
 8005012:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	3301      	adds	r3, #1
 8005018:	603b      	str	r3, [r7, #0]
        break;
 800501a:	e0f8      	b.n	800520e <_vsnprintf+0x936>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800501c:	2301      	movs	r3, #1
 800501e:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8005020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10e      	bne.n	8005048 <_vsnprintf+0x770>
          while (l++ < width) {
 800502a:	e007      	b.n	800503c <_vsnprintf+0x764>
            out(' ', buffer, idx++, maxlen);
 800502c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800502e:	1c53      	adds	r3, r2, #1
 8005030:	647b      	str	r3, [r7, #68]	; 0x44
 8005032:	68fc      	ldr	r4, [r7, #12]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68b9      	ldr	r1, [r7, #8]
 8005038:	2020      	movs	r0, #32
 800503a:	47a0      	blx	r4
          while (l++ < width) {
 800503c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005042:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005044:	4293      	cmp	r3, r2
 8005046:	d3f1      	bcc.n	800502c <_vsnprintf+0x754>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8005048:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800504a:	1d1a      	adds	r2, r3, #4
 800504c:	66ba      	str	r2, [r7, #104]	; 0x68
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	b2d8      	uxtb	r0, r3
 8005052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005054:	1c53      	adds	r3, r2, #1
 8005056:	647b      	str	r3, [r7, #68]	; 0x44
 8005058:	68fc      	ldr	r4, [r7, #12]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8005060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00e      	beq.n	8005088 <_vsnprintf+0x7b0>
          while (l++ < width) {
 800506a:	e007      	b.n	800507c <_vsnprintf+0x7a4>
            out(' ', buffer, idx++, maxlen);
 800506c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800506e:	1c53      	adds	r3, r2, #1
 8005070:	647b      	str	r3, [r7, #68]	; 0x44
 8005072:	68fc      	ldr	r4, [r7, #12]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68b9      	ldr	r1, [r7, #8]
 8005078:	2020      	movs	r0, #32
 800507a:	47a0      	blx	r4
          while (l++ < width) {
 800507c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005082:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005084:	4293      	cmp	r3, r2
 8005086:	d3f1      	bcc.n	800506c <_vsnprintf+0x794>
          }
        }
        format++;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	3301      	adds	r3, #1
 800508c:	603b      	str	r3, [r7, #0]
        break;
 800508e:	e0be      	b.n	800520e <_vsnprintf+0x936>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8005090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005092:	1d1a      	adds	r2, r3, #4
 8005094:	66ba      	str	r2, [r7, #104]	; 0x68
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800509a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <_vsnprintf+0x7cc>
 80050a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a2:	e001      	b.n	80050a8 <_vsnprintf+0x7d0>
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295
 80050a8:	4619      	mov	r1, r3
 80050aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80050ac:	f7fe fcc7 	bl	8003a3e <_strnlen_s>
 80050b0:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80050b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <_vsnprintf+0x7f0>
          l = (l < precision ? l : precision);
 80050bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c0:	4293      	cmp	r3, r2
 80050c2:	bf28      	it	cs
 80050c4:	4613      	movcs	r3, r2
 80050c6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 80050c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d11a      	bne.n	8005108 <_vsnprintf+0x830>
          while (l++ < width) {
 80050d2:	e007      	b.n	80050e4 <_vsnprintf+0x80c>
            out(' ', buffer, idx++, maxlen);
 80050d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050d6:	1c53      	adds	r3, r2, #1
 80050d8:	647b      	str	r3, [r7, #68]	; 0x44
 80050da:	68fc      	ldr	r4, [r7, #12]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	2020      	movs	r0, #32
 80050e2:	47a0      	blx	r4
          while (l++ < width) {
 80050e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	637a      	str	r2, [r7, #52]	; 0x34
 80050ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d3f1      	bcc.n	80050d4 <_vsnprintf+0x7fc>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80050f0:	e00a      	b.n	8005108 <_vsnprintf+0x830>
          out(*(p++), buffer, idx++, maxlen);
 80050f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	63ba      	str	r2, [r7, #56]	; 0x38
 80050f8:	7818      	ldrb	r0, [r3, #0]
 80050fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050fc:	1c53      	adds	r3, r2, #1
 80050fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005100:	68fc      	ldr	r4, [r7, #12]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d009      	beq.n	8005124 <_vsnprintf+0x84c>
 8005110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0eb      	beq.n	80050f2 <_vsnprintf+0x81a>
 800511a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511c:	1e5a      	subs	r2, r3, #1
 800511e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e6      	bne.n	80050f2 <_vsnprintf+0x81a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8005124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00e      	beq.n	800514c <_vsnprintf+0x874>
          while (l++ < width) {
 800512e:	e007      	b.n	8005140 <_vsnprintf+0x868>
            out(' ', buffer, idx++, maxlen);
 8005130:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005132:	1c53      	adds	r3, r2, #1
 8005134:	647b      	str	r3, [r7, #68]	; 0x44
 8005136:	68fc      	ldr	r4, [r7, #12]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	2020      	movs	r0, #32
 800513e:	47a0      	blx	r4
          while (l++ < width) {
 8005140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	637a      	str	r2, [r7, #52]	; 0x34
 8005146:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005148:	4293      	cmp	r3, r2
 800514a:	d3f1      	bcc.n	8005130 <_vsnprintf+0x858>
          }
        }
        format++;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	3301      	adds	r3, #1
 8005150:	603b      	str	r3, [r7, #0]
        break;
 8005152:	e05c      	b.n	800520e <_vsnprintf+0x936>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8005154:	2308      	movs	r3, #8
 8005156:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8005158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800515a:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800515e:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8005160:	2300      	movs	r3, #0
 8005162:	75fb      	strb	r3, [r7, #23]
        if (is_ll) {
 8005164:	7dfb      	ldrb	r3, [r7, #23]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d01d      	beq.n	80051a6 <_vsnprintf+0x8ce>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800516a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800516c:	1d1a      	adds	r2, r3, #4
 800516e:	66ba      	str	r2, [r7, #104]	; 0x68
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f04f 0400 	mov.w	r4, #0
 8005176:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005178:	9208      	str	r2, [sp, #32]
 800517a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800517c:	9207      	str	r2, [sp, #28]
 800517e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005180:	9206      	str	r2, [sp, #24]
 8005182:	f04f 0110 	mov.w	r1, #16
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800518e:	2200      	movs	r2, #0
 8005190:	9202      	str	r2, [sp, #8]
 8005192:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f7fe fe39 	bl	8003e14 <_ntoa_long_long>
 80051a2:	6478      	str	r0, [r7, #68]	; 0x44
 80051a4:	e016      	b.n	80051d4 <_vsnprintf+0x8fc>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80051a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051a8:	1d1a      	adds	r2, r3, #4
 80051aa:	66ba      	str	r2, [r7, #104]	; 0x68
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051b2:	9305      	str	r3, [sp, #20]
 80051b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b6:	9304      	str	r3, [sp, #16]
 80051b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ba:	9303      	str	r3, [sp, #12]
 80051bc:	2310      	movs	r3, #16
 80051be:	9302      	str	r3, [sp, #8]
 80051c0:	2300      	movs	r3, #0
 80051c2:	9301      	str	r3, [sp, #4]
 80051c4:	9200      	str	r2, [sp, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051ca:	68b9      	ldr	r1, [r7, #8]
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f7fe fdba 	bl	8003d46 <_ntoa_long>
 80051d2:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	3301      	adds	r3, #1
 80051d8:	603b      	str	r3, [r7, #0]
        break;
 80051da:	e018      	b.n	800520e <_vsnprintf+0x936>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80051dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051de:	1c53      	adds	r3, r2, #1
 80051e0:	647b      	str	r3, [r7, #68]	; 0x44
 80051e2:	68fc      	ldr	r4, [r7, #12]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	2025      	movs	r0, #37	; 0x25
 80051ea:	47a0      	blx	r4
        format++;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	3301      	adds	r3, #1
 80051f0:	603b      	str	r3, [r7, #0]
        break;
 80051f2:	e00c      	b.n	800520e <_vsnprintf+0x936>

      default :
        out(*format, buffer, idx++, maxlen);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	7818      	ldrb	r0, [r3, #0]
 80051f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051fa:	1c53      	adds	r3, r2, #1
 80051fc:	647b      	str	r3, [r7, #68]	; 0x44
 80051fe:	68fc      	ldr	r4, [r7, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	47a0      	blx	r4
        format++;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	3301      	adds	r3, #1
 800520a:	603b      	str	r3, [r7, #0]
        break;
 800520c:	bf00      	nop
  while (*format)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	f47f ab71 	bne.w	80048fa <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8005218:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	429a      	cmp	r2, r3
 800521e:	d302      	bcc.n	8005226 <_vsnprintf+0x94e>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	1e5a      	subs	r2, r3, #1
 8005224:	e000      	b.n	8005228 <_vsnprintf+0x950>
 8005226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005228:	68fc      	ldr	r4, [r7, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	2000      	movs	r0, #0
 8005230:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8005232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005234:	4618      	mov	r0, r3
 8005236:	3758      	adds	r7, #88	; 0x58
 8005238:	46bd      	mov	sp, r7
 800523a:	bdb0      	pop	{r4, r5, r7, pc}

0800523c <vprintf_>:
  return ret;
}


int vprintf_(const char* format, va_list va)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af02      	add	r7, sp, #8
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  char buffer[1];
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8005246:	f107 010c 	add.w	r1, r7, #12
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f04f 32ff 	mov.w	r2, #4294967295
 8005254:	4803      	ldr	r0, [pc, #12]	; (8005264 <vprintf_+0x28>)
 8005256:	f7ff fb3f 	bl	80048d8 <_vsnprintf>
 800525a:	4603      	mov	r3, r0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	08003a19 	.word	0x08003a19

08005268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800526c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800526e:	e003      	b.n	8005278 <LoopCopyDataInit>

08005270 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005270:	4b0c      	ldr	r3, [pc, #48]	; (80052a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005272:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005274:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005276:	3104      	adds	r1, #4

08005278 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005278:	480b      	ldr	r0, [pc, #44]	; (80052a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800527a:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800527c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800527e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005280:	d3f6      	bcc.n	8005270 <CopyDataInit>
  ldr  r2, =_sbss
 8005282:	4a0b      	ldr	r2, [pc, #44]	; (80052b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005284:	e002      	b.n	800528c <LoopFillZerobss>

08005286 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005286:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005288:	f842 3b04 	str.w	r3, [r2], #4

0800528c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800528c:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800528e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005290:	d3f9      	bcc.n	8005286 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005292:	f7fc f8ef 	bl	8001474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005296:	f000 f811 	bl	80052bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800529a:	f7fb fe19 	bl	8000ed0 <main>
  bx  lr    
 800529e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80052a0:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80052a4:	080054d8 	.word	0x080054d8
  ldr  r0, =_sdata
 80052a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80052ac:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80052b0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80052b4:	200000d0 	.word	0x200000d0

080052b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80052b8:	e7fe      	b.n	80052b8 <ADC_IRQHandler>
	...

080052bc <__libc_init_array>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	4e0d      	ldr	r6, [pc, #52]	; (80052f4 <__libc_init_array+0x38>)
 80052c0:	4c0d      	ldr	r4, [pc, #52]	; (80052f8 <__libc_init_array+0x3c>)
 80052c2:	1ba4      	subs	r4, r4, r6
 80052c4:	10a4      	asrs	r4, r4, #2
 80052c6:	2500      	movs	r5, #0
 80052c8:	42a5      	cmp	r5, r4
 80052ca:	d109      	bne.n	80052e0 <__libc_init_array+0x24>
 80052cc:	4e0b      	ldr	r6, [pc, #44]	; (80052fc <__libc_init_array+0x40>)
 80052ce:	4c0c      	ldr	r4, [pc, #48]	; (8005300 <__libc_init_array+0x44>)
 80052d0:	f000 f820 	bl	8005314 <_init>
 80052d4:	1ba4      	subs	r4, r4, r6
 80052d6:	10a4      	asrs	r4, r4, #2
 80052d8:	2500      	movs	r5, #0
 80052da:	42a5      	cmp	r5, r4
 80052dc:	d105      	bne.n	80052ea <__libc_init_array+0x2e>
 80052de:	bd70      	pop	{r4, r5, r6, pc}
 80052e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052e4:	4798      	blx	r3
 80052e6:	3501      	adds	r5, #1
 80052e8:	e7ee      	b.n	80052c8 <__libc_init_array+0xc>
 80052ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052ee:	4798      	blx	r3
 80052f0:	3501      	adds	r5, #1
 80052f2:	e7f2      	b.n	80052da <__libc_init_array+0x1e>
 80052f4:	080054d0 	.word	0x080054d0
 80052f8:	080054d0 	.word	0x080054d0
 80052fc:	080054d0 	.word	0x080054d0
 8005300:	080054d4 	.word	0x080054d4

08005304 <memset>:
 8005304:	4402      	add	r2, r0
 8005306:	4603      	mov	r3, r0
 8005308:	4293      	cmp	r3, r2
 800530a:	d100      	bne.n	800530e <memset+0xa>
 800530c:	4770      	bx	lr
 800530e:	f803 1b01 	strb.w	r1, [r3], #1
 8005312:	e7f9      	b.n	8005308 <memset+0x4>

08005314 <_init>:
 8005314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005316:	bf00      	nop
 8005318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531a:	bc08      	pop	{r3}
 800531c:	469e      	mov	lr, r3
 800531e:	4770      	bx	lr

08005320 <_fini>:
 8005320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005322:	bf00      	nop
 8005324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005326:	bc08      	pop	{r3}
 8005328:	469e      	mov	lr, r3
 800532a:	4770      	bx	lr
